// Generated by Haxe 3.4.2
(function ($hx_exports, $global) { "use strict";
$hx_exports["glaze"] = $hx_exports["glaze"] || {};
$hx_exports["glaze"]["debug"] = $hx_exports["glaze"]["debug"] || {};
$hx_exports["glaze"]["debug"]["DebugEngine"] = $hx_exports["glaze"]["debug"]["DebugEngine"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var CompileTime = function() { };
CompileTime.__name__ = ["CompileTime"];
var glaze_engine_core_GameEngine = function(canvas) {
	this.canvas = canvas;
	this.loop = new glaze_core_GameLoop();
	this.loop.updateFunc = $bind(this,this.update);
	this.input = new glaze_core_DigitalInput();
	var rect = canvas.getBoundingClientRect();
	this.input.InputTarget(window.document,new glaze_geom_Vector2(rect.left,rect.top));
	this.engine = new glaze_eco_core_Engine();
};
glaze_engine_core_GameEngine.__name__ = ["glaze","engine","core","GameEngine"];
glaze_engine_core_GameEngine.prototype = {
	loadAssets: function(assetList) {
		this.assets = new glaze_util_AssetLoader();
		this.assets.loaded.add($bind(this,this.initalize));
		this.assets.SetImagesToLoad(assetList);
		this.assets.Load();
	}
	,initalize: function() {
	}
	,update: function(delta,now) {
		this.preUpdate();
		this.engine.update(now,delta);
		this.postUpdate();
	}
	,preUpdate: function() {
	}
	,postUpdate: function() {
	}
	,__class__: glaze_engine_core_GameEngine
};
var GameTestA = function() {
	this.TS = 16;
	this.shakeIt = 0;
	this.killChickens = false;
	glaze_engine_core_GameEngine.call(this,js_Boot.__cast(window.document.getElementById("view") , HTMLCanvasElement));
	this.loadAssets(["data/16map.tmx","data/sprites.json","data/sprites.png","data/particles.json","data/particles.png","data/particleFrames.json","data/superSet.png","data/frames.json","data/tileFrames.json"]);
};
GameTestA.__name__ = ["GameTestA"];
GameTestA.throttle = function(callback,delayms,leading) {
	if(leading == null) {
		leading = false;
	}
	var waiting = false;
	var poll = function() {
		waiting = true;
		GameTestA.delay(callback,delayms);
	};
	return function() {
		if(leading) {
			leading = false;
			callback();
			return;
		}
		if(waiting) {
			return;
		}
		poll();
	};
};
GameTestA.cancel = function(id) {
	return clearTimeout;
};
GameTestA.delay = function(callback,delayms) {
	var id = setTimeout(callback,delayms);
	return function() {
		return GameTestA.cancel(id);
	};
};
GameTestA.limit = function(callback,delayms,leading) {
	if(leading == null) {
		leading = false;
	}
	var lastTime = .0;
	return function(p) {
		var now = new Date().getTime() / 1000 * 1000;
		if(now - lastTime < delayms) {
			return;
		}
		lastTime = now;
		callback(p);
	};
};
GameTestA.main = function() {
	var game = new GameTestA();
	glaze_debug_DebugEngine.gameEngine = game;
	window.document.getElementById("stopbutton").addEventListener("click",function(event) {
		game.loop.stop();
	});
	window.document.getElementById("startbutton").addEventListener("click",function(event1) {
		game.loop.start();
	});
	window.document.getElementById("debug1button").addEventListener("click",function(event2) {
		game.flyChickens();
	});
	window.document.getElementById("debug2button").addEventListener("click",function(event3) {
		game.dropGrenades();
	});
	window.document.getElementById("debug3button").addEventListener("click",function(event4) {
		var _this = game.rock;
		var rockbody = game.rock.map["PhysicsBody"];
		haxe_Log.trace(rockbody.body.mass,{ fileName : "GameTestA.hx", lineNumber : 850, className : "GameTestA", methodName : "main"});
		var _this1 = rockbody.body;
		var f_y;
		var f_x = 0;
		f_y = -128000;
		var _this2 = _this1.forces;
		var s = _this1.invMass;
		_this2.x += f_x * s;
		_this2.y += f_y * s;
		_this1.canSleep = false;
		_this1.motion = 10;
		_this1.bounceCount = 0;
	});
	window.document.getElementById("debug4button").addEventListener("click",function(event5) {
		game.shakeIt = 15;
	});
	window.document.getElementById("debug5button").addEventListener("click",function(event6) {
		game.throwWabbits();
	});
	window.document.getElementById("entities").addEventListener("click",function(event7) {
		window.writeResult(glaze_debug_DebugEngine.GetAllEntities());
	});
	window.document.getElementById("systems").addEventListener("click",function(event8) {
		window.writeResult(glaze_debug_DebugEngine.GetAllSystems());
	});
};
GameTestA.__super__ = glaze_engine_core_GameEngine;
GameTestA.prototype = $extend(glaze_engine_core_GameEngine.prototype,{
	initalize: function() {
		dat_Data.load("{\n\t\"sheets\": [\n\t\t{\n\t\t\t\"name\": \"entities\",\n\t\t\t\"columns\": [\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"0\",\n\t\t\t\t\t\"name\": \"id\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"1\",\n\t\t\t\t\t\"name\": \"description\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"5:door,switch\",\n\t\t\t\t\t\"name\": \"factory\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"lines\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"HallDoor\",\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\"factory\": 0\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"HallDoorSwitch\",\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\"factory\": 1\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"separators\": [],\n\t\t\t\"props\": {}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"states\",\n\t\t\t\"columns\": [\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"0\",\n\t\t\t\t\t\"name\": \"id\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"9:StateType\",\n\t\t\t\t\t\"name\": \"value\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"lines\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"DoorAState\",\n\t\t\t\t\t\"value\": [\n\t\t\t\t\t\t0\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"GlobalAState\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"separators\": [],\n\t\t\t\"props\": {}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"switches\",\n\t\t\t\"columns\": [\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"6:entities\",\n\t\t\t\t\t\"name\": \"entity\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"5:collision\",\n\t\t\t\t\t\"name\": \"trigger\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"3\",\n\t\t\t\t\t\"name\": \"frequency\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"6:states\",\n\t\t\t\t\t\"name\": \"state\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"lines\": [\n\t\t\t\t{\n\t\t\t\t\t\"trigger\": 0,\n\t\t\t\t\t\"frequency\": 500,\n\t\t\t\t\t\"state\": \"DoorAState\",\n\t\t\t\t\t\"entity\": \"HallDoor\",\n\t\t\t\t\t\"index\": 0\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"trigger\": 0,\n\t\t\t\t\t\"frequency\": 1000,\n\t\t\t\t\t\"state\": \"DoorAState\",\n\t\t\t\t\t\"entity\": \"HallDoorSwitch\",\n\t\t\t\t\t\"index\": 1\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"separators\": [],\n\t\t\t\"props\": {\n\t\t\t\t\"hasIndex\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"doors\",\n\t\t\t\"columns\": [\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"6:entities\",\n\t\t\t\t\t\"name\": \"entity\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"3\",\n\t\t\t\t\t\"name\": \"health\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"typeStr\": \"6:states\",\n\t\t\t\t\t\"name\": \"state\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"lines\": [\n\t\t\t\t{\n\t\t\t\t\t\"entity\": \"HallDoor\",\n\t\t\t\t\t\"health\": 1000,\n\t\t\t\t\t\"state\": \"DoorAState\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"separators\": [],\n\t\t\t\"props\": {}\n\t\t}\n\t],\n\t\"customTypes\": [\n\t\t{\n\t\t\t\"name\": \"StateType\",\n\t\t\t\"cases\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"On\",\n\t\t\t\t\t\"args\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Off\",\n\t\t\t\t\t\"args\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"True\",\n\t\t\t\t\t\"args\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"False\",\n\t\t\t\t\t\"args\": []\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"compress\": false\n}");
		var this1 = new tink_state__$State_StateObject(true);
		var doorAState = this1;
		var switchX = tink_state__$Observable_Observable_$Impl_$.auto(tink_state__$Observable_Computation_$Impl_$.plain(function() {
			return tink_state__$State_State_$Impl_$.get_value(doorAState);
		}));
		var doorA = tink_state__$Observable_Observable_$Impl_$.auto(tink_state__$Observable_Computation_$Impl_$.plain(function() {
			return tink_state__$State_State_$Impl_$.get_value(doorAState);
		}));
		tink_state__$Observable_Observable_$Impl_$.bind(tink_state__$State_State_$Impl_$.observe(doorAState),null,function(v) {
			haxe_Log.trace(v,{ fileName : "GameTestA.hx", lineNumber : 231, className : "GameTestA", methodName : "initalize"});
		});
		haxe_Log.trace(tink_state__$Observable_Observable_$Impl_$.get_value(switchX),{ fileName : "GameTestA.hx", lineNumber : 234, className : "GameTestA", methodName : "initalize", customParams : [tink_state__$Observable_Observable_$Impl_$.get_value(doorA)]});
		var updater = GameTestA.limit($bind(doorAState,doorAState.set),10000);
		doorAState.set(false);
		haxe_Log.trace(tink_state__$Observable_Observable_$Impl_$.get_value(switchX),{ fileName : "GameTestA.hx", lineNumber : 240, className : "GameTestA", methodName : "initalize", customParams : [tink_state__$Observable_Observable_$Impl_$.get_value(doorA)]});
		updater(true);
		haxe_Log.trace(tink_state__$Observable_Observable_$Impl_$.get_value(switchX),{ fileName : "GameTestA.hx", lineNumber : 243, className : "GameTestA", methodName : "initalize", customParams : [tink_state__$Observable_Observable_$Impl_$.get_value(doorA)]});
		updater(false);
		haxe_Log.trace(tink_state__$Observable_Observable_$Impl_$.get_value(switchX),{ fileName : "GameTestA.hx", lineNumber : 245, className : "GameTestA", methodName : "initalize", customParams : [tink_state__$Observable_Observable_$Impl_$.get_value(doorA)]});
		this.xf = GameTestA.limit(function(p) {
			haxe_Log.trace("called",{ fileName : "GameTestA.hx", lineNumber : 249, className : "GameTestA", methodName : "initalize"});
		},1000);
		var owner = this.engine.createEntity();
		var dfsm = new glaze_ai_fsm_DefaultStateMachine(owner);
		dfsm.changeState(new glaze_ai_fsm_TestState());
		glaze_ai_behaviortree_BehaviorTree.initialize();
		glaze_ai_behaviortree_BehaviorTree.registerScript("bird","{\n\t\"name\":\"blah test\",\n\t\"import\":{\n\t\t\"localname\":\"qualified.name\",\n\t\t\"localname2\":\"qualified.name2\"\n\t},\n\t\"parameters\":{\n\t\t\"home\":\"glaze.geom.Vector2\"\n\t},\n\t\"debug\":0,\n\t\"tree\":{\n\t\t\"type\":\"repeat\",\n\t\t\"params\":[0],\n\t\t\"children\":[\n\t\t\t{\n\t\t\t\t\"type\":\"sequence\",\n\t\t\t\t\"children\":[\n\t\t\t\t\t{\t\"type\":\"CopyContextData\",\"params\":[\"home\",\"target\"],\"description\":\"Copy 'home' to 'target'\"},\n\t\t\t\t\t{\t\"type\":\"WanderToTarget\",\"params\":[128],\"description\":\"Going Home\"},\n\t\t\t\t\t{\t\"type\":\"RepeatUntilSuccess\",\n\t\t\t\t\t\t\"children\":[\n\t\t\t\t\t\t\t{\t\"type\":\"sequence\",\n\t\t\t\t\t\t\t\t\"children\":[\n\t\t\t\t\t\t\t\t\t{\"type\":\"delay\",\"params\":[1000]},\n\t\t\t\t\t\t\t\t\t{\"type\":\"FindTarget\",\"description\":\"Look for target\"}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\t\"type\":\"SeekTarget\",\"description\":\"Found target, seeking\"},\n\t\t\t\t\t{\t\"type\":\"RepeatUntilFail\",\n\t\t\t\t\t\t\"children\":[\n\t\t\t\t\t\t\t{\t\"type\":\"sequence\",\n\t\t\t\t\t\t\t\t\"children\":[\n\t\t\t\t\t\t\t\t\t{\"type\":\"delay\",\"params\":[1000]},\n\t\t\t\t\t\t\t\t\t{\"type\":\"CanSee\",\"description\":\"Still seeking\"}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n}");
		this.engine.config.tileSize = 16;
		var _this = this.assets.assets;
		this.tmxMap = new glaze_tmx_TmxMap(__map_reserved["data/16map.tmx"] != null ? _this.getReserved("data/16map.tmx") : _this.h["data/16map.tmx"],16);
		var factory = new exile_factory_TmxCastleFactory(this.engine,this.tmxMap);
		factory.registerFactory(exile_entities_items_DoorFactory);
		factory.parse("Objects");
		var aiphase = this.engine.createPhase();
		var corephase = this.engine.createPhase();
		this.messageBus = new glaze_util_MessageBus();
		var cameraRange = new glaze_geom_AABB2(0,this.TS * this.tmxMap.width,this.TS * this.tmxMap.height,0);
		cameraRange.expand(-32);
		this.renderSystem = new glaze_engine_systems_RenderSystem(this.canvas,cameraRange);
		var _this1 = this.assets.assets;
		this.renderSystem.textureManager.AddTexture("data/sprites.png",__map_reserved["data/sprites.png"] != null ? _this1.getReserved("data/sprites.png") : _this1.h["data/sprites.png"]);
		var _this2 = this.assets.assets;
		this.renderSystem.textureManager.AddTexture("data/particles.png",__map_reserved["data/particles.png"] != null ? _this2.getReserved("data/particles.png") : _this2.h["data/particles.png"]);
		var _this3 = this.assets.assets;
		this.renderSystem.textureManager.AddTexture("data/superSet.png",__map_reserved["data/superSet.png"] != null ? _this3.getReserved("data/superSet.png") : _this3.h["data/superSet.png"]);
		var _this4 = this.assets.assets;
		this.renderSystem.textureManager.ParseTexturePackerJSON(__map_reserved["data/sprites.json"] != null ? _this4.getReserved("data/sprites.json") : _this4.h["data/sprites.json"],"data/sprites.png");
		var _this5 = this.assets.assets;
		this.renderSystem.frameListManager.ParseFrameListJSON(__map_reserved["data/frames.json"] != null ? _this5.getReserved("data/frames.json") : _this5.h["data/frames.json"]);
		var background = glaze_tmx_TmxLayer.LayerToCoordTexture(this.tmxMap.getLayer("Background"));
		var foreground1 = glaze_tmx_TmxLayer.LayerToCoordTexture(this.tmxMap.getLayer("Foreground1"));
		var foreground2 = glaze_tmx_TmxLayer.LayerToCoordTexture(this.tmxMap.getLayer("Foreground2"));
		var collisionData = glaze_tmx_TmxLayer.LayerToCollisionData(this.tmxMap.getLayer("Collision"),16);
		var tileMap = new glaze_render_renderers_webgl_TileMap(8,2);
		tileMap.SetTileRenderLayer([2,1]);
		tileMap.SetTileRenderLayer([0]);
		this.renderSystem.renderer.AddRenderer(tileMap);
		var _this6 = this.renderSystem.textureManager.baseTextures;
		tileMap.SetTileLayerFromData(foreground2,__map_reserved["data/superSet.png"] != null ? _this6.getReserved("data/superSet.png") : _this6.h["data/superSet.png"],"f2",1,1);
		var _this7 = this.renderSystem.textureManager.baseTextures;
		tileMap.SetTileLayerFromData(foreground1,__map_reserved["data/superSet.png"] != null ? _this7.getReserved("data/superSet.png") : _this7.h["data/superSet.png"],"f1",1,1);
		var _this8 = this.renderSystem.textureManager.baseTextures;
		tileMap.SetTileLayerFromData(background,__map_reserved["data/superSet.png"] != null ? _this8.getReserved("data/superSet.png") : _this8.h["data/superSet.png"],"bg",1,1);
		var spriteRender = new glaze_render_renderers_webgl_SpriteRenderer();
		spriteRender.AddStage(this.renderSystem.stage);
		this.renderSystem.renderer.AddRenderer(spriteRender);
		this.renderSystem.itemContainer.addChild(tileMap.renderLayers[0].sprite);
		this.renderSystem.camera.addChild(tileMap.renderLayers[1].sprite);
		this.blockParticleEngine = new glaze_particle_BlockSpriteParticleEngine(4000,16.6666666666666679,collisionData);
		this.renderSystem.renderer.AddRenderer(this.blockParticleEngine.renderer);
		var spriteParticleManager = new glaze_particle_SpriteParticleManager();
		var _this9 = this.assets.assets;
		spriteParticleManager.ParseTexturePackerJSON(__map_reserved["data/particles.json"] != null ? _this9.getReserved("data/particles.json") : _this9.h["data/particles.json"]);
		var _this10 = this.assets.assets;
		spriteParticleManager.ParseSequenceJSON(__map_reserved["data/particleFrames.json"] != null ? _this10.getReserved("data/particleFrames.json") : _this10.h["data/particleFrames.json"]);
		this.spriteParticleEngine = new glaze_particle_PointSpriteParticleEngine(4000,16.6666666666666679,spriteParticleManager,collisionData);
		glaze_debug_DebugEngine.particleEngine = this.blockParticleEngine;
		this.renderSystem.renderer.AddRenderer(this.spriteParticleEngine.renderer);
		var _this11 = this.renderSystem.textureManager.baseTextures;
		this.spriteParticleEngine.renderer.SetSpriteSheet((__map_reserved["data/particles.png"] != null ? _this11.getReserved("data/particles.png") : _this11.h["data/particles.png"]).texture,16,16,16);
		var map = new glaze_physics_collision_Map(collisionData);
		exile_entities_creatures_BeeFactory.map = map;
		corephase.addSystem(new glaze_physics_systems_PhysicsUpdateSystem());
		corephase.addSystem(new glaze_ai_steering_systems_SteeringSystem());
		this.engine.config.map = map;
		this.nf = new glaze_physics_collision_Intersect();
		this.broadphase = new glaze_physics_collision_broadphase_BruteforceBroadphase(map,this.nf);
		glaze_util_CombatUtils.setBroadphase(this.broadphase);
		corephase.addSystem(new glaze_physics_systems_PhysicsStaticSystem(this.broadphase));
		corephase.addSystem(new glaze_physics_systems_PhysicsMoveableSystem(this.broadphase));
		corephase.addSystem(new glaze_physics_systems_PhysicsCollisionSystem(this.broadphase));
		corephase.addSystem(new glaze_physics_systems_PhysicsMassSystem());
		corephase.addSystem(new glaze_physics_systems_PhysicsPositionSystem());
		corephase.addSystem(new glaze_engine_systems_HeldSystem());
		corephase.addSystem(new glaze_physics_systems_ContactRouterSystem());
		corephase.addSystem(new glaze_engine_systems_WaterSystem(this.blockParticleEngine));
		corephase.addSystem(new glaze_engine_systems_environment_EnvironmentForceSystem());
		corephase.addSystem(new glaze_engine_systems_environment_WindRenderSystem(this.blockParticleEngine));
		corephase.addSystem(new glaze_engine_systems_HolderSystem(64));
		corephase.addSystem(new glaze_engine_systems_HoldableSystem(64));
		corephase.addSystem(new glaze_engine_systems_HealthSystem());
		corephase.addSystem(new glaze_engine_systems_AgeSystem());
		corephase.addSystem(new glaze_engine_systems_CollisionCountSystem());
		aiphase.addSystem(new glaze_engine_systems_BehaviourSystem());
		aiphase.addSystem(new glaze_engine_systems_StateSystem(this.messageBus));
		aiphase.addSystem(new glaze_engine_systems_CollidableSwitchSystem(this.messageBus));
		aiphase.addSystem(new exile_systems_DoorSystem());
		aiphase.addSystem(new exile_systems_TeleporterSystem());
		aiphase.addSystem(new exile_systems_BeeHiveSystem());
		aiphase.addSystem(new exile_systems_BirdNestSystem());
		aiphase.addSystem(new exile_systems_BirdSystem(this.broadphase));
		aiphase.addSystem(new exile_systems_GunTurretSystem());
		aiphase.addSystem(new exile_systems_WaterHolderSystem());
		this.chickenSystem = new exile_systems_ChickenSystem(this.blockParticleEngine);
		aiphase.addSystem(this.chickenSystem);
		this.rabbitSystem = new exile_systems_RabbitSystem();
		aiphase.addSystem(this.rabbitSystem);
		aiphase.addSystem(new exile_systems_MaggotSystem(this.broadphase,this.blockParticleEngine));
		aiphase.addSystem(new exile_systems_GrenadeSystem(this.broadphase));
		aiphase.addSystem(new glaze_engine_systems_InventorySystem());
		corephase.addSystem(new glaze_engine_systems_DestroySystem());
		corephase.addSystem(new exile_systems_PlayerSystem(this.input,this.blockParticleEngine,this.spriteParticleEngine));
		corephase.addSystem(new glaze_engine_systems_FixedViewManagementSystem(this.renderSystem.camera));
		corephase.addSystem(new glaze_engine_systems_ParticleSystem(this.blockParticleEngine,this.spriteParticleEngine));
		corephase.addSystem(new glaze_animation_systems_AnimationSystem(this.renderSystem.frameListManager));
		var _this12 = this.assets.assets;
		var tileRenderSystem = new glaze_engine_systems_TileRenderSystem(__map_reserved["data/tileFrames.json"] != null ? _this12.getReserved("data/tileFrames.json") : _this12.h["data/tileFrames.json"],tileMap,map);
		corephase.addSystem(tileRenderSystem);
		corephase.addSystem(this.renderSystem);
		this.filterSupport = new glaze_engine_actions_FilterSupport(this.engine);
		var tmxFactory = new glaze_engine_factories_TMXFactory(this.engine,this.tmxMap);
		tmxFactory.registerFactory(glaze_engine_factories_tmx_LightFactory);
		tmxFactory.registerFactory(glaze_engine_factories_tmx_WaterFactory);
		tmxFactory.registerFactory(glaze_engine_factories_tmx_ForceFactory);
		tmxFactory.parseObjectGroup("Objects");
		this.createEntities();
		this.loop.start();
	}
	,mapPosition: function(xTiles,yTiles) {
		return new glaze_engine_components_Position(xTiles * this.TS,yTiles * this.TS);
	}
	,mapPositionCenter: function(l,t,r,b) {
		return this.mapPosition(l + (r - l) * 0.5,t + (b - t) * 0.5);
	}
	,mapExtents: function(l,t,r,b) {
		return new glaze_engine_components_Extents((r - l) * 0.5 * this.TS,(b - t) * 0.5 * this.TS);
	}
	,createEntities: function() {
		this.playerFilter = new glaze_physics_collision_Filter();
		this.playerFilter.categoryBits = 4;
		this.playerFilter.maskBits |= 8;
		this.playerFilter.groupIndex = -1;
		var body = new glaze_physics_Body(new glaze_physics_Material(1,0.3,0.1));
		body.maxScalarVelocity = 0;
		var _this = body.maxVelocity;
		_this.x = 1600;
		_this.y = 1000;
		this.playerFaction = new glaze_ai_faction_Faction("player","player",0);
		this.player = this.engine.createEntity([new exile_components_Player(),this.mapPosition(33.5,38.5),new glaze_engine_components_Extents(7,20),new glaze_engine_components_Display("player"),new glaze_animation_components_SpriteAnimation("player",["idle","scratch","shrug","fly","runright"],"idle"),new glaze_physics_components_PhysicsBody(body,true),new glaze_physics_components_PhysicsCollision(false,this.playerFilter,[]),new glaze_engine_components_Moveable(),new glaze_engine_components_Active(),new glaze_ai_faction_components_Personality(this.playerFaction)],"player");
		var _this1 = this.player;
		this.chickenSystem.scaredOfPosition = this.player.map["Position"];
		var _this2 = this.player;
		this.rabbitSystem.scaredOfPosition = this.player.map["Position"];
		var _this3 = this.player;
		this.renderSystem.CameraTarget(this.player.map["Position"].coords);
		this.createTurret();
		var doorSwitch = this.engine.createEntity([this.mapPosition(10.5,18.5),new glaze_engine_components_Extents(8,8),new glaze_physics_components_PhysicsCollision(false,null,[]),new glaze_engine_components_Fixed(),new glaze_engine_components_CollidableSwitch(false,1000,["doorA"]),new glaze_engine_components_Active(),new glaze_engine_components_TileDisplay("switchOff")],"Door Switch");
		this.engine.createEntity([this.mapPosition(3,23),new glaze_engine_components_Extents(16,32),new glaze_physics_components_PhysicsCollision(true,null,[]),new glaze_engine_components_Fixed(),new exile_components_Teleporter(new glaze_geom_Vector2(192,576)),new glaze_engine_components_ParticleEmitters([new glaze_particle_emitter_ScanLineEmitter(200,100,600,10)]),new glaze_engine_components_State(["on","off"],0,[]),new glaze_engine_components_Active()],"teleporter");
		this.engine.createEntity([this.mapPosition(20.5,17),new glaze_engine_components_Extents(16,16),new glaze_engine_components_Display("insects","hive"),new glaze_physics_components_PhysicsCollision(false,null,[]),new glaze_engine_components_Fixed(),new glaze_engine_components_Active(),new exile_components_BeeHive(5)],"BeeHive");
		this.rock = this.engine.createEntity([this.mapPosition(13,4),new glaze_engine_components_Extents(7,7),new glaze_engine_components_Display("items","rock"),new glaze_physics_components_PhysicsCollision(false,new glaze_physics_collision_Filter(),[]),new glaze_engine_components_Moveable(),new glaze_physics_components_PhysicsBody(new glaze_physics_Body(glaze_physics_Material.ROCK),true),new glaze_engine_components_Holdable(),new glaze_engine_components_Active()],"rock");
		var nestFaction = new glaze_ai_faction_Faction("nest1","nest",0);
		nestFaction.addRelation(new glaze_ai_faction_FactionRelationship(this.playerFaction,-10));
		this.engine.createEntity([this.mapPosition(34,30),new glaze_engine_components_Extents(7,7),new glaze_engine_components_Fixed(),new exile_components_BirdNest(5),new glaze_engine_components_Active(),new glaze_ai_faction_components_Personality(nestFaction)],"birdsnest");
		this.engine.createEntity([this.mapPosition(19,96),new glaze_engine_components_Extents(7,7),new glaze_engine_components_Fixed(),new exile_components_BirdNest(5),new glaze_engine_components_Active(),new glaze_ai_faction_components_Personality(nestFaction)],"birdsnest2");
		this.engine.createEntity([this.mapPosition(25,57),new glaze_engine_components_Extents(6,14),new glaze_engine_components_Display("items","water_container_full"),new glaze_physics_components_PhysicsCollision(false,new glaze_physics_collision_Filter(),[]),new glaze_engine_components_Moveable(),new glaze_physics_components_PhysicsBody(new glaze_physics_Body(glaze_physics_Material.NORMAL),true),new glaze_engine_components_Holdable(),new exile_components_WaterHolder(10),new glaze_engine_components_Active()],"water_container");
	}
	,testBT: function() {
		debugger;
		var bt = new glaze_ai_behaviortree_branch_Sequence();
		var seq = new glaze_ai_behaviortree_branch_Monitor();
		bt.addChild(seq);
		seq.addChild(new glaze_ai_behaviortree_leaf_Logger("message 1"));
		seq.addChild(new glaze_ai_behaviortree_leaf_Logger("message 2"));
		seq.addChild(new glaze_ai_behaviortree_leaf_Logger("message 3"));
		bt.addChild(new glaze_ai_behaviortree_leaf_Logger("done"));
		var btc = new glaze_ai_behaviortree_BehaviorContext(new glaze_eco_core_Entity(null,null));
		var _g = 0;
		while(_g < 15) {
			var i = _g++;
			haxe_Log.trace("tick:" + i,{ fileName : "GameTestA.hx", lineNumber : 678, className : "GameTestA", methodName : "testBT"});
			bt.tick(btc);
		}
		debugger;
	}
	,createTurret: function() {
		var filter = new glaze_physics_collision_Filter();
		filter.groupIndex = -3;
		var turretFaction = new glaze_ai_faction_Faction("turret1","turret",0);
		turretFaction.addRelation(new glaze_ai_faction_FactionRelationship(this.playerFaction,-10));
		var turret = this.engine.createEntity([this.mapPosition(25,1.5),new glaze_engine_components_TileDisplay("turret"),new glaze_engine_components_Extents(12,12),new glaze_physics_components_PhysicsCollision(false,filter,[]),new glaze_engine_components_Fixed(),new exile_components_GunTurret(),new glaze_ai_faction_components_Personality(turretFaction),new glaze_engine_components_Active()],"turret");
	}
	,fireBullet: function(pos,target) {
		var filter = new glaze_physics_collision_Filter();
		filter.groupIndex = -3;
		var bullet = exile_entities_projectile_StandardBulletFactory.create(this.engine,new glaze_engine_components_Position(pos.x,pos.y),filter,target);
	}
	,fireBulletAtEntity: function(context) {
		var ec = context.data.ec;
		if(ec.entities.length == 0) {
			return;
		}
		var _this = context.entity;
		var _this1 = context.entity.map["Position"].coords;
		var tmp = new glaze_geom_Vector2(_this1.x,_this1.y);
		var _this2 = ec.entities.head.entity;
		var _this3 = ec.entities.head.entity.map["Position"].coords;
		this.fireBullet(tmp,new glaze_geom_Vector2(_this3.x,_this3.y));
	}
	,dropGrenades: function() {
		var spread = 50;
		exile_entities_weapon_HandGrenadeFactory.create(this.engine,350,150);
		exile_entities_weapon_HandGrenadeFactory.create(this.engine,350 + spread,150);
		exile_entities_weapon_HandGrenadeFactory.create(this.engine,350 + spread * 2,150);
		exile_entities_weapon_HandGrenadeFactory.create(this.engine,350 + spread * 3,150);
		exile_entities_weapon_HandGrenadeFactory.create(this.engine,350 + spread * 4,150);
		exile_entities_weapon_HandGrenadeFactory.create(this.engine,350 + spread * 5,150);
	}
	,flyChickens: function() {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			var _this = this.player;
			var pos = this.player.map["Position"].clone();
			var chickie = exile_entities_creatures_ChickenFactory.create(this.engine,pos);
			var _this1 = chickie.map["PhysicsBody"].body;
			var f_y;
			var f_x = Math.floor(Math.random() * 2000 + -1000);
			f_y = Math.floor(Math.random() * 1100 + -1000);
			var _this2 = _this1.forces;
			var s = _this1.invMass;
			_this2.x += f_x * s;
			_this2.y += f_y * s;
			_this1.canSleep = false;
			_this1.motion = 10;
			_this1.bounceCount = 0;
		}
	}
	,throwWabbits: function() {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			var _this = this.player;
			var pos = this.player.map["Position"].clone();
			var wabbit = exile_entities_creatures_RabbitFactory.create(this.engine,pos);
			var _this1 = wabbit.map["PhysicsBody"].body;
			var f_y;
			var f_x = Math.floor(Math.random() * 2000 + -1000);
			f_y = Math.floor(Math.random() * 1100 + -1000);
			var _this2 = _this1.forces;
			var s = _this1.invMass;
			_this2.x += f_x * s;
			_this2.y += f_y * s;
			_this1.canSleep = false;
			_this1.motion = 10;
			_this1.bounceCount = 0;
		}
	}
	,destroyChickens: function() {
		var cs = this.engine.getSystem(exile_systems_ChickenSystem);
		var explosion = new glaze_particle_emitter_Explosion(10,50);
		var entity = cs.view.entities[0];
		if(entity != null) {
			entity.addComponent(new glaze_engine_components_Destroy(1));
			explosion.update(1,entity,this.blockParticleEngine,this.spriteParticleEngine);
		} else {
			this.killChickens = false;
		}
	}
	,preUpdate: function() {
		this.xf(1);
		this.input.Update(-this.renderSystem.camera.position.x,-this.renderSystem.camera.position.y);
		if(this.killChickens) {
			this.destroyChickens();
		}
		if(this.shakeIt > 1) {
			haxe_Log.trace("shakeit",{ fileName : "GameTestA.hx", lineNumber : 824, className : "GameTestA", methodName : "preUpdate"});
			var _this = this.renderSystem.camera.shake;
			var min = -this.shakeIt;
			var max = this.shakeIt;
			var x = Math.random() * (max - min) + min;
			var min1 = -this.shakeIt;
			var max1 = this.shakeIt;
			var y = Math.random() * (max1 - min1) + min1;
			_this.x = x;
			_this.y = y;
			this.shakeIt *= 0.9;
		}
	}
	,__class__: GameTestA
});
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = ["Lambda"];
Lambda.map = function(it,f) {
	var l = new List();
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(x1));
	}
	return l;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var cdb_ColumnType = { __ename__ : true, __constructs__ : ["TId","TString","TBool","TInt","TFloat","TEnum","TRef","TImage","TList","TCustom","TFlags","TColor","TLayer","TFile","TTilePos","TTileLayer","TDynamic"] };
cdb_ColumnType.TId = ["TId",0];
cdb_ColumnType.TId.toString = $estr;
cdb_ColumnType.TId.__enum__ = cdb_ColumnType;
cdb_ColumnType.TString = ["TString",1];
cdb_ColumnType.TString.toString = $estr;
cdb_ColumnType.TString.__enum__ = cdb_ColumnType;
cdb_ColumnType.TBool = ["TBool",2];
cdb_ColumnType.TBool.toString = $estr;
cdb_ColumnType.TBool.__enum__ = cdb_ColumnType;
cdb_ColumnType.TInt = ["TInt",3];
cdb_ColumnType.TInt.toString = $estr;
cdb_ColumnType.TInt.__enum__ = cdb_ColumnType;
cdb_ColumnType.TFloat = ["TFloat",4];
cdb_ColumnType.TFloat.toString = $estr;
cdb_ColumnType.TFloat.__enum__ = cdb_ColumnType;
cdb_ColumnType.TEnum = function(values) { var $x = ["TEnum",5,values]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TRef = function(sheet) { var $x = ["TRef",6,sheet]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TImage = ["TImage",7];
cdb_ColumnType.TImage.toString = $estr;
cdb_ColumnType.TImage.__enum__ = cdb_ColumnType;
cdb_ColumnType.TList = ["TList",8];
cdb_ColumnType.TList.toString = $estr;
cdb_ColumnType.TList.__enum__ = cdb_ColumnType;
cdb_ColumnType.TCustom = function(name) { var $x = ["TCustom",9,name]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TFlags = function(values) { var $x = ["TFlags",10,values]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TColor = ["TColor",11];
cdb_ColumnType.TColor.toString = $estr;
cdb_ColumnType.TColor.__enum__ = cdb_ColumnType;
cdb_ColumnType.TLayer = function(type) { var $x = ["TLayer",12,type]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TFile = ["TFile",13];
cdb_ColumnType.TFile.toString = $estr;
cdb_ColumnType.TFile.__enum__ = cdb_ColumnType;
cdb_ColumnType.TTilePos = ["TTilePos",14];
cdb_ColumnType.TTilePos.toString = $estr;
cdb_ColumnType.TTilePos.__enum__ = cdb_ColumnType;
cdb_ColumnType.TTileLayer = ["TTileLayer",15];
cdb_ColumnType.TTileLayer.toString = $estr;
cdb_ColumnType.TTileLayer.__enum__ = cdb_ColumnType;
cdb_ColumnType.TDynamic = ["TDynamic",16];
cdb_ColumnType.TDynamic.toString = $estr;
cdb_ColumnType.TDynamic.__enum__ = cdb_ColumnType;
var cdb__$Data_TileMode_$Impl_$ = {};
cdb__$Data_TileMode_$Impl_$.__name__ = ["cdb","_Data","TileMode_Impl_"];
cdb__$Data_TileMode_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
cdb__$Data_TileMode_$Impl_$.ofString = function(s) {
	return cdb__$Data_TileMode_$Impl_$._new(s);
};
cdb__$Data_TileMode_$Impl_$.toString = function(this1) {
	return this1;
};
var cdb_Lz4Reader = function() {
};
cdb_Lz4Reader.__name__ = ["cdb","Lz4Reader"];
cdb_Lz4Reader.uncompress = function(src,srcPos,srcLen,out,outPos) {
	var outSave = outPos;
	var srcEnd = srcPos + srcLen;
	if(srcLen == 0) {
		return [srcPos,outPos,0];
	}
	var outLen = out.length;
	while(true) {
		var start = srcPos;
		var tk = src.b[srcPos++];
		var litLen = tk >> 4;
		var matchLen = tk & 15;
		if(litLen == 15) {
			var b;
			while(true) {
				b = src.b[srcPos++];
				litLen += b;
				if(!(b == 255)) {
					break;
				}
			}
		}
		if(outPos + litLen > outLen) {
			return [start,outPos,litLen + matchLen];
		}
		switch(litLen) {
		case 0:
			break;
		case 1:
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			break;
		case 2:
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			break;
		case 3:
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			break;
		default:
			out.blit(outPos,src,srcPos,litLen);
			outPos += litLen;
			srcPos += litLen;
		}
		if(srcPos >= srcEnd) {
			break;
		}
		var offset = src.b[srcPos++];
		offset |= src.b[srcPos++] << 8;
		if(matchLen == 15) {
			var b1;
			while(true) {
				b1 = src.b[srcPos++];
				matchLen += b1;
				if(!(b1 == 255)) {
					break;
				}
			}
		}
		matchLen += 4;
		if(outPos + matchLen > outLen) {
			return [start,outPos - litLen,litLen + matchLen];
		}
		if(matchLen >= 64 && matchLen <= offset) {
			out.blit(outPos,out,outPos - offset,matchLen);
			outPos += matchLen;
		} else {
			var copyEnd = outPos + matchLen;
			while(outPos < copyEnd) {
				out.b[outPos] = out.b[outPos - offset] & 255;
				++outPos;
			}
		}
	}
	if(srcPos != srcEnd) {
		throw new js__$Boot_HaxeError("Read too much data " + (srcPos - srcLen));
	}
	return [srcPos,outPos,0];
};
cdb_Lz4Reader.decodeString = function(s) {
	if(s == "") {
		return new haxe_io_Bytes(new ArrayBuffer(0));
	}
	var k = haxe_crypto_Base64.decode(s);
	if(k.b[0] != 4 || k.b[1] != 34 || k.b[2] != 77 || k.b[3] != 24) {
		return k;
	}
	return new cdb_Lz4Reader().read(k);
};
cdb_Lz4Reader.encodeBytes = function(b,compress) {
	var tmp = compress && b.length > 0;
	return haxe_crypto_Base64.encode(b);
};
cdb_Lz4Reader.prototype = {
	b: function() {
		return this.bytes.b[this.pos++];
	}
	,grow: function(out,pos,len) {
		var size = out.length;
		while(true) {
			size = size * 3 >> 1;
			if(!(size < pos + len)) {
				break;
			}
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(size));
		out2.blit(0,out,0,pos);
		return out2;
	}
	,read: function(bytes) {
		this.bytes = bytes;
		this.pos = 0;
		if(this.bytes.b[this.pos++] != 4 || this.bytes.b[this.pos++] != 34 || this.bytes.b[this.pos++] != 77 || this.bytes.b[this.pos++] != 24) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var flags = this.bytes.b[this.pos++];
		if(flags >> 6 != 1) {
			throw new js__$Boot_HaxeError("Invalid version " + (flags >> 6));
		}
		var blockChecksum = (flags & 16) != 0;
		var streamSize = (flags & 8) != 0;
		var streamChecksum = (flags & 4) != 0;
		if((flags & 2) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		var presetDict = (flags & 1) != 0;
		var bd = this.bytes.b[this.pos++];
		if((bd & 128) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		var maxBlockSize = [0,0,0,0,65536,262144,1048576,4194304][bd >> 4 & 7];
		if(maxBlockSize == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if((bd & 15) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(streamSize) {
			this.pos += 8;
		}
		if(presetDict) {
			throw new js__$Boot_HaxeError("Preset dictionary not supported");
		}
		var headerChk = this.bytes.b[this.pos++];
		var out = new haxe_io_Bytes(new ArrayBuffer(128));
		var outPos = 0;
		while(true) {
			var size = this.bytes.b[this.pos++] | this.bytes.b[this.pos++] << 8 | this.bytes.b[this.pos++] << 16 | this.bytes.b[this.pos++] << 24;
			if(size == 0) {
				break;
			}
			if((size & -16) == 407710288) {
				var dataSize = this.bytes.b[this.pos++] | this.bytes.b[this.pos++] << 8 | this.bytes.b[this.pos++] << 16 | this.bytes.b[this.pos++] << 24;
				this.pos += dataSize;
				continue;
			}
			if((size & -2147483648) != 0) {
				size &= 2147483647;
				if(outPos + out.length < size) {
					out = this.grow(out,outPos,size);
				}
				out.blit(outPos,bytes,this.pos,size);
				outPos += size;
				this.pos += size;
			} else {
				var srcEnd = this.pos + size;
				while(this.pos < srcEnd) {
					var r = cdb_Lz4Reader.uncompress(bytes,this.pos,srcEnd - this.pos,out,outPos);
					this.pos = r[0];
					outPos = r[1];
					var req = r[2];
					if(req > 0) {
						out = this.grow(out,outPos,req);
					}
				}
			}
			if(blockChecksum) {
				this.pos += 4;
			}
		}
		return out.sub(0,outPos);
	}
	,__class__: cdb_Lz4Reader
};
var cdb_Parser = function() { };
cdb_Parser.__name__ = ["cdb","Parser"];
cdb_Parser.saveType = function(t) {
	switch(t[1]) {
	case 5:
		var values = t[2];
		return t[1] + ":" + values.join(",");
	case 6:case 9:case 12:
		return t[1] + ":" + Std.string(t.slice(2)[0]);
	case 10:
		var values1 = t[2];
		return t[1] + ":" + values1.join(",");
	case 0:case 1:case 2:case 3:case 4:case 7:case 8:case 11:case 13:case 14:case 15:case 16:
		return Std.string(t[1]);
	}
};
cdb_Parser.getType = function(str) {
	var _g = Std.parseInt(str);
	if(_g == null) {
		throw new js__$Boot_HaxeError("Unknown type " + str);
	} else {
		switch(_g) {
		case 0:
			return cdb_ColumnType.TId;
		case 1:
			return cdb_ColumnType.TString;
		case 2:
			return cdb_ColumnType.TBool;
		case 3:
			return cdb_ColumnType.TInt;
		case 4:
			return cdb_ColumnType.TFloat;
		case 5:
			return cdb_ColumnType.TEnum(HxOverrides.substr(str,str.indexOf(":") + 1,null).split(","));
		case 6:
			return cdb_ColumnType.TRef(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 7:
			return cdb_ColumnType.TImage;
		case 8:
			return cdb_ColumnType.TList;
		case 9:
			return cdb_ColumnType.TCustom(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 10:
			return cdb_ColumnType.TFlags(HxOverrides.substr(str,str.indexOf(":") + 1,null).split(","));
		case 11:
			return cdb_ColumnType.TColor;
		case 12:
			return cdb_ColumnType.TLayer(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 13:
			return cdb_ColumnType.TFile;
		case 14:
			return cdb_ColumnType.TTilePos;
		case 15:
			return cdb_ColumnType.TTileLayer;
		case 16:
			return cdb_ColumnType.TDynamic;
		default:
			throw new js__$Boot_HaxeError("Unknown type " + str);
		}
	}
};
cdb_Parser.parse = function(content) {
	if(content == null) {
		throw new js__$Boot_HaxeError("CDB content is null");
	}
	var data = JSON.parse(content);
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			c.type = cdb_Parser.getType(c.typeStr);
			c.typeStr = null;
		}
	}
	var _g4 = 0;
	var _g11 = data.customTypes;
	while(_g4 < _g11.length) {
		var t = _g11[_g4];
		++_g4;
		var _g21 = 0;
		var _g31 = t.cases;
		while(_g21 < _g31.length) {
			var c1 = _g31[_g21];
			++_g21;
			var _g41 = 0;
			var _g5 = c1.args;
			while(_g41 < _g5.length) {
				var a = _g5[_g41];
				++_g41;
				a.type = cdb_Parser.getType(a.typeStr);
				a.typeStr = null;
			}
		}
	}
	return data;
};
cdb_Parser.save = function(data) {
	var save = [];
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			save.push(c.type);
			if(c.typeStr == null) {
				c.typeStr = cdb_Parser.saveType(c.type);
			}
			Reflect.deleteField(c,"type");
		}
	}
	var _g4 = 0;
	var _g11 = data.customTypes;
	while(_g4 < _g11.length) {
		var t = _g11[_g4];
		++_g4;
		var _g21 = 0;
		var _g31 = t.cases;
		while(_g21 < _g31.length) {
			var c1 = _g31[_g21];
			++_g21;
			var _g41 = 0;
			var _g5 = c1.args;
			while(_g41 < _g5.length) {
				var a = _g5[_g41];
				++_g41;
				save.push(a.type);
				if(a.typeStr == null) {
					a.typeStr = cdb_Parser.saveType(a.type);
				}
				Reflect.deleteField(a,"type");
			}
		}
	}
	var str = JSON.stringify(data,null,"\t");
	var _g6 = 0;
	var _g12 = data.sheets;
	while(_g6 < _g12.length) {
		var s1 = _g12[_g6];
		++_g6;
		var _g22 = 0;
		var _g32 = s1.columns;
		while(_g22 < _g32.length) {
			var c2 = _g32[_g22];
			++_g22;
			c2.type = save.shift();
		}
	}
	var _g7 = 0;
	var _g13 = data.customTypes;
	while(_g7 < _g13.length) {
		var t1 = _g13[_g7];
		++_g7;
		var _g23 = 0;
		var _g33 = t1.cases;
		while(_g23 < _g33.length) {
			var c3 = _g33[_g23];
			++_g23;
			var _g42 = 0;
			var _g51 = c3.args;
			while(_g42 < _g51.length) {
				var a1 = _g51[_g42];
				++_g42;
				a1.type = save.shift();
			}
		}
	}
	return str;
};
var cdb__$Types_ArrayIterator = function(a) {
	this.a = a;
	this.pos = 0;
};
cdb__$Types_ArrayIterator.__name__ = ["cdb","_Types","ArrayIterator"];
cdb__$Types_ArrayIterator.prototype = {
	hasNext: function() {
		return this.pos < this.a.length;
	}
	,next: function() {
		return this.a[this.pos++];
	}
	,__class__: cdb__$Types_ArrayIterator
};
var cdb__$Types_FlagsIterator = function(flags) {
	this.flags = flags;
	this.k = 0;
};
cdb__$Types_FlagsIterator.__name__ = ["cdb","_Types","FlagsIterator"];
cdb__$Types_FlagsIterator.prototype = {
	hasNext: function() {
		return this.flags >= 1 << this.k;
	}
	,next: function() {
		while((this.flags & 1 << this.k) == 0) this.k++;
		return this.k++;
	}
	,__class__: cdb__$Types_FlagsIterator
};
var cdb__$Types_ArrayRead_$Impl_$ = {};
cdb__$Types_ArrayRead_$Impl_$.__name__ = ["cdb","_Types","ArrayRead_Impl_"];
cdb__$Types_ArrayRead_$Impl_$.__properties__ = {get_length:"get_length"};
cdb__$Types_ArrayRead_$Impl_$._new = function(a) {
	var this1 = a;
	return this1;
};
cdb__$Types_ArrayRead_$Impl_$.get_length = function(this1) {
	return this1.length;
};
cdb__$Types_ArrayRead_$Impl_$.iterator = function(this1) {
	return new cdb__$Types_ArrayIterator(this1);
};
cdb__$Types_ArrayRead_$Impl_$.castArray = function(this1) {
	return this1;
};
cdb__$Types_ArrayRead_$Impl_$.toArrayCopy = function(this1) {
	return this1.slice();
};
cdb__$Types_ArrayRead_$Impl_$.getIndex = function(this1,v) {
	return this1[v];
};
var cdb__$Types_Flags_$Impl_$ = {};
cdb__$Types_Flags_$Impl_$.__name__ = ["cdb","_Types","Flags_Impl_"];
cdb__$Types_Flags_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
cdb__$Types_Flags_$Impl_$.has = function(this1,t) {
	return (this1 & 1 << t) != 0;
};
cdb__$Types_Flags_$Impl_$.set = function(this1,t) {
	this1 |= 1 << t;
};
cdb__$Types_Flags_$Impl_$.unset = function(this1,t) {
	this1 &= ~(1 << t);
};
cdb__$Types_Flags_$Impl_$.iterator = function(this1) {
	var this2 = this1;
	return new cdb__$Types_FlagsIterator(this2);
};
cdb__$Types_Flags_$Impl_$.toInt = function(this1) {
	return this1;
};
var cdb__$Types_Layer_$Impl_$ = {};
cdb__$Types_Layer_$Impl_$.__name__ = ["cdb","_Types","Layer_Impl_"];
cdb__$Types_Layer_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
cdb__$Types_Layer_$Impl_$.decode = function(this1,all) {
	var k = cdb_Lz4Reader.decodeString(this1);
	var _g = [];
	var _g2 = 0;
	var _g1 = k.length;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(all[k.b[i]]);
	}
	return _g;
};
cdb__$Types_Layer_$Impl_$.encode = function(a,compress) {
	var b = new haxe_io_Bytes(new ArrayBuffer(a.length));
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		b.b[i] = a[i] & 255;
	}
	var this1 = cdb_Lz4Reader.encodeBytes(b,compress);
	return this1;
};
var cdb__$Types_TileLayerData_$Impl_$ = {};
cdb__$Types_TileLayerData_$Impl_$.__name__ = ["cdb","_Types","TileLayerData_Impl_"];
cdb__$Types_TileLayerData_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
cdb__$Types_TileLayerData_$Impl_$.decode = function(this1) {
	var k = cdb_Lz4Reader.decodeString(this1);
	var _g = [];
	var _g2 = 0;
	var _g1 = k.length >> 1;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(k.b[i << 1] | k.b[(i << 1) + 1] << 8);
	}
	return _g;
};
cdb__$Types_TileLayerData_$Impl_$.encode = function(a,compress) {
	var b = new haxe_io_Bytes(new ArrayBuffer(a.length * 2));
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		var v = a[i];
		b.b[i << 1] = v & 255 & 255;
		b.b[(i << 1) + 1] = v >> 8 & 255 & 255;
	}
	return cdb__$Types_TileLayerData_$Impl_$._new(cdb_Lz4Reader.encodeBytes(b,compress));
};
var cdb__$Types_LevelPropsAccess_$Impl_$ = {};
cdb__$Types_LevelPropsAccess_$Impl_$.__name__ = ["cdb","_Types","LevelPropsAccess_Impl_"];
cdb__$Types_LevelPropsAccess_$Impl_$.__properties__ = {get_tileSize:"get_tileSize"};
cdb__$Types_LevelPropsAccess_$Impl_$.get_tileSize = function(this1) {
	return this1.tileSize;
};
cdb__$Types_LevelPropsAccess_$Impl_$.getTileset = function(this1,i,name) {
	return Reflect.field(i.sheet.props.level.tileSets,name);
};
cdb__$Types_LevelPropsAccess_$Impl_$.getLayer = function(this1,name) {
	if(this1 == null || this1.layers == null) {
		return null;
	}
	var _g = 0;
	var _g1 = this1.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.l == name) {
			return l.p;
		}
	}
	return null;
};
var cdb_Index = function(data,name) {
	this.name = name;
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(s.name == name) {
			this.all = s.lines;
			this.sheet = s;
			break;
		}
	}
	if(this.sheet == null) {
		throw new js__$Boot_HaxeError("'" + name + "' not found in CDB data");
	}
};
cdb_Index.__name__ = ["cdb","Index"];
cdb_Index.prototype = {
	__class__: cdb_Index
};
var cdb_IndexId = function(data,name) {
	cdb_Index.call(this,data,name);
	this.byId = new haxe_ds_StringMap();
	this.byIndex = [];
	var _g = 0;
	var _g1 = this.sheet.columns;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		var _g2 = c.type;
		if(_g2[1] == 0) {
			var cname = c.name;
			var _g21 = 0;
			var _g3 = this.sheet.lines;
			while(_g21 < _g3.length) {
				var a = _g3[_g21];
				++_g21;
				var id = Reflect.field(a,cname);
				if(id != null && id != "") {
					this.byId.set(id,a);
					this.byIndex.push(a);
				}
			}
			break;
		}
	}
};
cdb_IndexId.__name__ = ["cdb","IndexId"];
cdb_IndexId.__super__ = cdb_Index;
cdb_IndexId.prototype = $extend(cdb_Index.prototype,{
	get: function(k) {
		var _this = this.byId;
		var key = k;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,resolve: function(id,opt) {
		if(id == null) {
			return null;
		}
		var _this = this.byId;
		var v = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(v == null && !opt) {
			throw new js__$Boot_HaxeError("Missing " + this.name + "." + id);
		} else {
			return v;
		}
	}
	,__class__: cdb_IndexId
});
var dat__$Data_Entities_$factory_$Impl_$ = {};
dat__$Data_Entities_$factory_$Impl_$.__name__ = ["dat","_Data","Entities_factory_Impl_"];
dat__$Data_Entities_$factory_$Impl_$.ofInt = function(v) {
	return v;
};
dat__$Data_Entities_$factory_$Impl_$.toInt = function(this1) {
	return this1;
};
var dat__$Data_EntitiesKind_$Impl_$ = {};
dat__$Data_EntitiesKind_$Impl_$.__name__ = ["dat","_Data","EntitiesKind_Impl_"];
dat__$Data_EntitiesKind_$Impl_$.toString = function(this1) {
	return this1;
};
var dat__$Data_Entities_$Impl_$ = {};
dat__$Data_Entities_$Impl_$.__name__ = ["dat","_Data","Entities_Impl_"];
dat__$Data_Entities_$Impl_$.__properties__ = {get_factory:"get_factory",get_description:"get_description",get_id:"get_id"};
dat__$Data_Entities_$Impl_$.get_id = function(this1) {
	return this1.id;
};
dat__$Data_Entities_$Impl_$.get_description = function(this1) {
	return this1.description;
};
dat__$Data_Entities_$Impl_$.get_factory = function(this1) {
	return this1.factory;
};
var dat__$Data_StatesKind_$Impl_$ = {};
dat__$Data_StatesKind_$Impl_$.__name__ = ["dat","_Data","StatesKind_Impl_"];
dat__$Data_StatesKind_$Impl_$.toString = function(this1) {
	return this1;
};
var dat__$Data_States_$Impl_$ = {};
dat__$Data_States_$Impl_$.__name__ = ["dat","_Data","States_Impl_"];
dat__$Data_States_$Impl_$.__properties__ = {get_value:"get_value",get_id:"get_id"};
dat__$Data_States_$Impl_$.get_id = function(this1) {
	return this1.id;
};
dat__$Data_States_$Impl_$.get_value = function(this1) {
	return dat_StateTypeBuilder.build(this1.value);
};
var dat__$Data_Switches_$trigger_$Impl_$ = {};
dat__$Data_Switches_$trigger_$Impl_$.__name__ = ["dat","_Data","Switches_trigger_Impl_"];
dat__$Data_Switches_$trigger_$Impl_$.ofInt = function(v) {
	return v;
};
dat__$Data_Switches_$trigger_$Impl_$.toInt = function(this1) {
	return this1;
};
var dat__$Data_Switches_$Impl_$ = {};
dat__$Data_Switches_$Impl_$.__name__ = ["dat","_Data","Switches_Impl_"];
dat__$Data_Switches_$Impl_$.__properties__ = {get_index:"get_index",get_stateId:"get_stateId",get_state:"get_state",get_frequency:"get_frequency",get_trigger:"get_trigger",get_entityId:"get_entityId",get_entity:"get_entity"};
dat__$Data_Switches_$Impl_$.get_entity = function(this1) {
	if(this1.entity == null) {
		return null;
	} else {
		return dat_Data.entities.resolve(this1.entity);
	}
};
dat__$Data_Switches_$Impl_$.get_entityId = function(this1) {
	return this1.entity;
};
dat__$Data_Switches_$Impl_$.get_trigger = function(this1) {
	return this1.trigger;
};
dat__$Data_Switches_$Impl_$.get_frequency = function(this1) {
	return this1.frequency;
};
dat__$Data_Switches_$Impl_$.get_state = function(this1) {
	if(this1.state == null) {
		return null;
	} else {
		return dat_Data.states.resolve(this1.state);
	}
};
dat__$Data_Switches_$Impl_$.get_stateId = function(this1) {
	return this1.state;
};
dat__$Data_Switches_$Impl_$.get_index = function(this1) {
	return this1.index;
};
var dat__$Data_Doors_$Impl_$ = {};
dat__$Data_Doors_$Impl_$.__name__ = ["dat","_Data","Doors_Impl_"];
dat__$Data_Doors_$Impl_$.__properties__ = {get_stateId:"get_stateId",get_state:"get_state",get_health:"get_health",get_entityId:"get_entityId",get_entity:"get_entity"};
dat__$Data_Doors_$Impl_$.get_entity = function(this1) {
	if(this1.entity == null) {
		return null;
	} else {
		return dat_Data.entities.resolve(this1.entity);
	}
};
dat__$Data_Doors_$Impl_$.get_entityId = function(this1) {
	return this1.entity;
};
dat__$Data_Doors_$Impl_$.get_health = function(this1) {
	return this1.health;
};
dat__$Data_Doors_$Impl_$.get_state = function(this1) {
	if(this1.state == null) {
		return null;
	} else {
		return dat_Data.states.resolve(this1.state);
	}
};
dat__$Data_Doors_$Impl_$.get_stateId = function(this1) {
	return this1.state;
};
var dat_StateType = { __ename__ : true, __constructs__ : ["On","Off","True","False"] };
dat_StateType.On = ["On",0];
dat_StateType.On.toString = $estr;
dat_StateType.On.__enum__ = dat_StateType;
dat_StateType.Off = ["Off",1];
dat_StateType.Off.toString = $estr;
dat_StateType.Off.__enum__ = dat_StateType;
dat_StateType.True = ["True",2];
dat_StateType.True.toString = $estr;
dat_StateType.True.__enum__ = dat_StateType;
dat_StateType.False = ["False",3];
dat_StateType.False.toString = $estr;
dat_StateType.False.__enum__ = dat_StateType;
var dat_StateTypeBuilder = function() { };
dat_StateTypeBuilder.__name__ = ["dat","StateTypeBuilder"];
dat_StateTypeBuilder.build = function(v) {
	var _g = v[0];
	switch(_g) {
	case 0:
		return dat_StateType.On;
	case 1:
		return dat_StateType.Off;
	case 2:
		return dat_StateType.True;
	case 3:
		return dat_StateType.False;
	default:
		throw new js__$Boot_HaxeError("Invalid value " + Std.string(v));
	}
};
var dat_Data = function() { };
dat_Data.__name__ = ["dat","Data"];
dat_Data.load = function(content) {
	var root = cdb_Parser.parse(content);
	dat_Data.entities = new cdb_IndexId(root,"entities");
	dat_Data.states = new cdb_IndexId(root,"states");
	dat_Data.switches = new cdb_Index(root,"switches");
	dat_Data.doors = new cdb_Index(root,"doors");
};
var exile_ExileFilters = function() { };
exile_ExileFilters.__name__ = ["exile","ExileFilters"];
var glaze_eco_core_IComponent = function() { };
glaze_eco_core_IComponent.__name__ = ["glaze","eco","core","IComponent"];
var exile_components_Bee = function() {
};
exile_components_Bee.__name__ = ["exile","components","Bee"];
exile_components_Bee.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Bee.prototype = {
	__class__: exile_components_Bee
};
var exile_components_BeeHive = function(maxBees) {
	this.group = new glaze_util_EntityGroup(maxBees);
};
exile_components_BeeHive.__name__ = ["exile","components","BeeHive"];
exile_components_BeeHive.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_BeeHive.prototype = {
	__class__: exile_components_BeeHive
};
var exile_components_Bird = function(nest) {
	this.nest = nest;
	this.ai = new glaze_ai_fsm_LightStackStateMachine();
	this.delay = new glaze_util_IntervalDelay(1000);
	this.chaseCheck = new glaze_util_IntervalDelay(500);
};
exile_components_Bird.__name__ = ["exile","components","Bird"];
exile_components_Bird.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Bird.prototype = {
	__class__: exile_components_Bird
};
var exile_components_BirdNest = function(maxBirds) {
	this.radius = 100;
	this.triggered = false;
	this.group = new glaze_util_EntityGroup(maxBirds);
	this.intervalDelay = new glaze_util_IntervalDelay(1000);
};
exile_components_BirdNest.__name__ = ["exile","components","BirdNest"];
exile_components_BirdNest.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_BirdNest.prototype = {
	__class__: exile_components_BirdNest
};
var exile_components_Chicken = function() {
};
exile_components_Chicken.__name__ = ["exile","components","Chicken"];
exile_components_Chicken.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Chicken.prototype = {
	__class__: exile_components_Chicken
};
var exile_components_Door = function(type,open,triggerEvent) {
	this.type = type;
	this.open = open;
	this.triggerEvent = triggerEvent;
};
exile_components_Door.__name__ = ["exile","components","Door"];
exile_components_Door.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Door.prototype = {
	__class__: exile_components_Door
};
var exile_components_Grenade = function() {
	this.pause = -1;
	this.fuse = 1000;
	this.state = new glaze_ai_fsm_LightStackStateMachine();
};
exile_components_Grenade.__name__ = ["exile","components","Grenade"];
exile_components_Grenade.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Grenade.prototype = {
	__class__: exile_components_Grenade
};
var exile_components_GunTurret = function() {
	this.intervalDelay = new glaze_util_IntervalDelay(1000);
};
exile_components_GunTurret.__name__ = ["exile","components","GunTurret"];
exile_components_GunTurret.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_GunTurret.prototype = {
	__class__: exile_components_GunTurret
};
var exile_components_Maggot = function() {
	this.sleep = .0;
};
exile_components_Maggot.__name__ = ["exile","components","Maggot"];
exile_components_Maggot.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Maggot.prototype = {
	__class__: exile_components_Maggot
};
var exile_components_Player = function() {
};
exile_components_Player.__name__ = ["exile","components","Player"];
exile_components_Player.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Player.prototype = {
	__class__: exile_components_Player
};
var exile_components_Projectile = function(type) {
	this.type = type;
};
exile_components_Projectile.__name__ = ["exile","components","Projectile"];
exile_components_Projectile.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Projectile.prototype = {
	__class__: exile_components_Projectile
};
var exile_components_Rabbit = function() {
	this.sleep = .0;
};
exile_components_Rabbit.__name__ = ["exile","components","Rabbit"];
exile_components_Rabbit.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Rabbit.prototype = {
	__class__: exile_components_Rabbit
};
var exile_components_Teleporter = function(teleportPosition) {
	this.teleportPosition = teleportPosition;
};
exile_components_Teleporter.__name__ = ["exile","components","Teleporter"];
exile_components_Teleporter.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_Teleporter.prototype = {
	__class__: exile_components_Teleporter
};
var exile_components_WaterHolder = function(volume) {
	this.volume = volume;
};
exile_components_WaterHolder.__name__ = ["exile","components","WaterHolder"];
exile_components_WaterHolder.__interfaces__ = [glaze_eco_core_IComponent];
exile_components_WaterHolder.prototype = {
	__class__: exile_components_WaterHolder
};
var exile_entities_creatures_BeeFactory = function() {
};
exile_entities_creatures_BeeFactory.__name__ = ["exile","entities","creatures","BeeFactory"];
exile_entities_creatures_BeeFactory.create = function(engine,position) {
	var beeBody = new glaze_physics_Body(new glaze_physics_Material(0.1,0.3,0));
	beeBody.setMass(0.1);
	beeBody.setBounces(0);
	beeBody.globalForceFactor = 0.0;
	beeBody.maxScalarVelocity = 200;
	var bee = new exile_components_Bee();
	var bee1 = new glaze_engine_components_Extents(1.5,1.5);
	var bee2 = new glaze_engine_components_Display("insects");
	var bee3 = new glaze_physics_components_PhysicsBody(beeBody,true);
	var bee4 = new glaze_engine_components_Moveable();
	var bee5 = new glaze_physics_components_PhysicsCollision(false,null,[]);
	var bee6 = new glaze_animation_components_SpriteAnimation("insects",["firefly"],"firefly");
	var bee7 = new glaze_ai_steering_behaviors_Wander(80,40,143.5);
	var _this = position.coords;
	var bee8 = engine.createEntity([position,bee,bee1,bee2,bee3,bee4,bee5,bee6,new glaze_ai_steering_components_Steering([bee7,new glaze_ai_steering_behaviors_Seek(new glaze_geom_Vector2(_this.x,_this.y),32)],glaze_ai_steering_SteeringAgentParameters.HEAVY_STEERING_PARAMS),new glaze_engine_components_Age(10000,exile_entities_creatures_BeeFactory.onDestroy),new glaze_engine_components_Health(10,10,0,exile_entities_creatures_BeeFactory.onDestroy),new glaze_engine_components_Active()],"bee");
	return bee8;
};
exile_entities_creatures_BeeFactory.onInitalize = function(entity) {
	haxe_Log.trace("INIT THE BEE " + entity.name,{ fileName : "BeeFactory.hx", lineNumber : 68, className : "exile.entities.creatures.BeeFactory", methodName : "onInitalize"});
};
exile_entities_creatures_BeeFactory.onDestroy = function(entity) {
	haxe_Log.trace("DESTROY THE BEE " + entity.name,{ fileName : "BeeFactory.hx", lineNumber : 73, className : "exile.entities.creatures.BeeFactory", methodName : "onDestroy"});
	entity.addComponent(new glaze_engine_components_ParticleEmitters([new glaze_particle_emitter_Explosion(1,200)]));
	entity.addComponent(new glaze_engine_components_Destroy(0));
};
exile_entities_creatures_BeeFactory.prototype = {
	__class__: exile_entities_creatures_BeeFactory
};
var exile_entities_creatures_BirdFactory = function() {
};
exile_entities_creatures_BirdFactory.__name__ = ["exile","entities","creatures","BirdFactory"];
exile_entities_creatures_BirdFactory.create = function(engine,position,follow,nest) {
	var birdBody = new glaze_physics_Body(new glaze_physics_Material());
	birdBody.setMass(1);
	birdBody.setBounces(0);
	birdBody.globalForceFactor = 0.0;
	birdBody.maxScalarVelocity = 200;
	var map = engine.config.map;
	var bird = engine.createEntity([position,new exile_components_Bird(nest),new glaze_engine_components_Extents(4,4),new glaze_engine_components_Display("bird"),new glaze_physics_components_PhysicsBody(birdBody,false),new glaze_engine_components_Moveable(),new glaze_physics_components_PhysicsCollision(false,null,[]),new glaze_animation_components_SpriteAnimation("bird",["fly"],"fly"),nest.map["Personality"].clone(),new glaze_ai_steering_components_Steering([new glaze_ai_steering_behaviors_Wander(55,80,0.3),new glaze_ai_steering_behaviors_Arrival(follow.coords,256),new glaze_ai_steering_behaviors_WallAvoidance(map,60),new glaze_ai_steering_behaviors_Seperation(nest.map["BirdNest"].group.members,20)]),new glaze_engine_components_Age(15000,glaze_util_EntityUtils.standardDestroy),new glaze_engine_components_Health(10,10,0,glaze_util_EntityUtils.standardDestroy),new glaze_engine_components_Active()],"bird");
	return bird;
};
exile_entities_creatures_BirdFactory.prototype = {
	__class__: exile_entities_creatures_BirdFactory
};
var glaze_engine_components_Destroy = function(count) {
	this.count = count;
};
glaze_engine_components_Destroy.__name__ = ["glaze","engine","components","Destroy"];
glaze_engine_components_Destroy.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Destroy.prototype = {
	__class__: glaze_engine_components_Destroy
};
var glaze_engine_core_EngineLifecycle = function() {
};
glaze_engine_core_EngineLifecycle.__name__ = ["glaze","engine","core","EngineLifecycle"];
glaze_engine_core_EngineLifecycle.onInitalize = function(entity) {
};
glaze_engine_core_EngineLifecycle.onRunning = function(entity) {
};
glaze_engine_core_EngineLifecycle.onDestroy = function(entity) {
	entity.addComponent(new glaze_engine_components_Destroy(1));
};
glaze_engine_core_EngineLifecycle.onCleanup = function(entity) {
};
glaze_engine_core_EngineLifecycle.CreateLifeCylce = function(_onInitalize,_onRunning,_onDestroy,_onCleanup) {
	var _g = new haxe_ds_StringMap();
	var value = _onInitalize != null ? _onInitalize : glaze_engine_core_EngineLifecycle.onInitalize;
	if(__map_reserved["initalize"] != null) {
		_g.setReserved("initalize",value);
	} else {
		_g.h["initalize"] = value;
	}
	var value1 = _onRunning != null ? _onRunning : glaze_engine_core_EngineLifecycle.onRunning;
	if(__map_reserved["running"] != null) {
		_g.setReserved("running",value1);
	} else {
		_g.h["running"] = value1;
	}
	var value2 = _onDestroy != null ? _onDestroy : glaze_engine_core_EngineLifecycle.onDestroy;
	if(__map_reserved["destroy"] != null) {
		_g.setReserved("destroy",value2);
	} else {
		_g.h["destroy"] = value2;
	}
	var value3 = _onCleanup != null ? _onCleanup : glaze_engine_core_EngineLifecycle.onCleanup;
	if(__map_reserved["cleanup"] != null) {
		_g.setReserved("cleanup",value3);
	} else {
		_g.h["cleanup"] = value3;
	}
	return _g;
};
glaze_engine_core_EngineLifecycle.prototype = {
	__class__: glaze_engine_core_EngineLifecycle
};
var glaze_particle_emitter_IParticleEmitter = function() { };
glaze_particle_emitter_IParticleEmitter.__name__ = ["glaze","particle","emitter","IParticleEmitter"];
glaze_particle_emitter_IParticleEmitter.prototype = {
	__class__: glaze_particle_emitter_IParticleEmitter
};
var glaze_particle_emitter_Explosion = function(mass,power) {
	this.mass = mass;
	this.power = power;
};
glaze_particle_emitter_Explosion.__name__ = ["glaze","particle","emitter","Explosion"];
glaze_particle_emitter_Explosion.__interfaces__ = [glaze_particle_emitter_IParticleEmitter];
glaze_particle_emitter_Explosion.prototype = {
	update: function(time,entity,engine,spriteEngine) {
		var position = entity.map["Position"].coords;
		var _g1 = 0;
		var _g = this.mass;
		while(_g1 < _g) {
			var i = _g1++;
			var max = Math.PI * 2;
			var angle = Math.random() * max;
			var max1 = this.power * 2;
			var p = Math.random() * max1;
			var vx = Math.cos(angle) * p;
			var vy = Math.sin(angle) * p;
			engine.EmitParticle(position.x,position.y,vx,vy,0,1,Math.floor(Math.random() * 150 + 50),0.99,false,true,null,4,255,255,0,0);
		}
	}
	,__class__: glaze_particle_emitter_Explosion
};
var glaze_engine_components_ParticleEmitters = function(emitters) {
	this.emitters = emitters;
};
glaze_engine_components_ParticleEmitters.__name__ = ["glaze","engine","components","ParticleEmitters"];
glaze_engine_components_ParticleEmitters.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_ParticleEmitters.prototype = {
	__class__: glaze_engine_components_ParticleEmitters
};
var exile_entities_creatures_ChickenFactory = function() {
};
exile_entities_creatures_ChickenFactory.__name__ = ["exile","entities","creatures","ChickenFactory"];
exile_entities_creatures_ChickenFactory.create = function(engine,position) {
	var filter = new glaze_physics_collision_Filter();
	var chickenBody = new glaze_physics_Body(glaze_physics_Material.NORMAL);
	chickenBody.setBounces(3);
	chickenBody.maxScalarVelocity = 1000;
	var chicken = engine.createEntity([position,new exile_components_Chicken(),new glaze_engine_components_Extents(12,12),new glaze_engine_components_Display("chicken"),new glaze_physics_components_PhysicsCollision(false,filter,[]),new glaze_physics_components_PhysicsBody(chickenBody,true),new glaze_engine_components_Moveable(),new glaze_engine_components_Holdable(),new glaze_animation_components_SpriteAnimation("chicken",["walk"],"walk"),new glaze_engine_components_Health(10,10,0,exile_entities_creatures_ChickenFactory.onDestroy),new glaze_engine_components_Active()],"chicken");
	return chicken;
};
exile_entities_creatures_ChickenFactory.onDestroy = function(entity) {
	haxe_Log.trace("DESTROY THE CHICKEN " + entity.name,{ fileName : "ChickenFactory.hx", lineNumber : 70, className : "exile.entities.creatures.ChickenFactory", methodName : "onDestroy"});
	entity.addComponent(new glaze_engine_components_ParticleEmitters([new glaze_particle_emitter_Explosion(1,200)]));
	entity.addComponent(new glaze_engine_components_Destroy(2));
};
exile_entities_creatures_ChickenFactory.prototype = {
	__class__: exile_entities_creatures_ChickenFactory
};
var exile_entities_creatures_RabbitFactory = function() {
};
exile_entities_creatures_RabbitFactory.__name__ = ["exile","entities","creatures","RabbitFactory"];
exile_entities_creatures_RabbitFactory.create = function(engine,position) {
	var v_y;
	var v_x = .0;
	v_y = .0;
	var rabbitBody = new glaze_physics_Body(glaze_physics_Material.NORMAL);
	rabbitBody.setBounces(3);
	rabbitBody.maxScalarVelocity = 1000;
	rabbitBody.globalForceFactor = 1;
	var rabbit = engine.createEntity([position,new exile_components_Rabbit(),new glaze_engine_components_Extents(12,16),new glaze_engine_components_Display("rabbit"),new glaze_physics_components_PhysicsCollision(false,new glaze_physics_collision_Filter(),[]),new glaze_physics_components_PhysicsBody(rabbitBody,true),new glaze_engine_components_Moveable(),new glaze_engine_components_Holdable(),new glaze_animation_components_SpriteAnimation("rabbit",["idle","blink","jump","eat","listen"],"jump"),new glaze_engine_components_Health(10,10,0,null),new glaze_engine_components_Active()],"rabbit");
	return rabbit;
};
exile_entities_creatures_RabbitFactory.prototype = {
	__class__: exile_entities_creatures_RabbitFactory
};
var exile_entities_items_DoorFactory = function() {
};
exile_entities_items_DoorFactory.__name__ = ["exile","entities","items","DoorFactory"];
exile_entities_items_DoorFactory.create = function(components) {
	var extents = components[2];
	extents.halfWidths.y /= 2;
	return components.concat([new glaze_engine_components_TileDisplay("doorClosed"),new glaze_physics_components_PhysicsCollision(false,null,[]),new glaze_engine_components_Fixed(),new exile_components_Door("door",false,""),new glaze_engine_components_State(["closed","open"],0,["doorA"]),new glaze_engine_components_ECState(exile_entities_items_DoorFactory.states,"open",["open","close"]),new glaze_engine_components_Active()]);
};
exile_entities_items_DoorFactory.prototype = {
	__class__: exile_entities_items_DoorFactory
};
var exile_entities_projectile_PlasmaProjectileFactory = function() {
};
exile_entities_projectile_PlasmaProjectileFactory.__name__ = ["exile","entities","projectile","PlasmaProjectileFactory"];
exile_entities_projectile_PlasmaProjectileFactory.create = function(engine,position,filter,targetPosition) {
	var bulletBody = new glaze_physics_Body(glaze_physics_Material.LIGHTMETAL);
	bulletBody.setMass(0.3);
	bulletBody.setBounces(0);
	bulletBody.globalForceFactor = 0.1;
	bulletBody.isBullet = true;
	var bullet = engine.createEntity([position,new glaze_engine_components_Extents(3,3),new glaze_engine_components_Display("projectiles","plasma"),new glaze_physics_components_PhysicsBody(bulletBody,false),new glaze_engine_components_Moveable(),new glaze_physics_components_PhysicsCollision(false,filter,[]),new glaze_engine_components_ParticleEmitters([new glaze_particle_emitter_FireballEmitter(0,10)]),new glaze_engine_components_CollisionCounter(1,exile_entities_projectile_PlasmaProjectileFactory.onDestroy),new glaze_engine_components_Health(10,10,0,exile_entities_projectile_PlasmaProjectileFactory.onDestroy),new glaze_engine_components_Age(1000,exile_entities_projectile_PlasmaProjectileFactory.onDestroy),new glaze_engine_components_Active()],"StandardBullet");
	glaze_util_Ballistics.calcProjectileVelocity(bulletBody,targetPosition,600);
	return bullet;
};
exile_entities_projectile_PlasmaProjectileFactory.onDestroy = function(entity) {
	if(entity.map["Destroy"] != null) {
		return;
	}
	entity.addComponent(new glaze_engine_components_Destroy(1));
	entity.map["ParticleEmitters"].emitters.push(new glaze_particle_emitter_Explosion(10,50));
	glaze_util_CombatUtils.explode(entity.map["Position"].coords,64,10000,entity);
};
exile_entities_projectile_PlasmaProjectileFactory.prototype = {
	__class__: exile_entities_projectile_PlasmaProjectileFactory
};
var glaze_util_CombatUtils = function() {
};
glaze_util_CombatUtils.__name__ = ["glaze","util","CombatUtils"];
glaze_util_CombatUtils.setBroadphase = function(bf) {
	glaze_util_CombatUtils.broadphase = bf;
	glaze_util_CombatUtils.bfAreaQuery = new glaze_util_BroadphaseAreaQuery(bf);
	glaze_util_CombatUtils.ray = new glaze_physics_collision_Ray();
};
glaze_util_CombatUtils.canSee = function(start,end,range) {
	var dX = start.x - end.x;
	var dY = start.y - end.y;
	if(dX * dX + dY * dY >= range * range) {
		return false;
	}
	glaze_util_CombatUtils.ray.initalize(start,end,0,null);
	glaze_util_CombatUtils.broadphase.CastRay(glaze_util_CombatUtils.ray,null,false,false);
	return !glaze_util_CombatUtils.ray.hit;
};
glaze_util_CombatUtils.searchSortAndFilter = function(position,radius,referenceEntity,filterOptions) {
	glaze_util_CombatUtils.referenceEntity = referenceEntity;
	glaze_util_CombatUtils.bfAreaQuery.query(position,radius,referenceEntity,true);
	glaze_util_CombatUtils.bfAreaQuery.entityCollection.entities.sort(glaze_ds_EntityCollectionItem.SortClosestFirst);
	glaze_util_CombatUtils.bfAreaQuery.entityCollection.filter(glaze_util_CombatUtils.FilterItems);
	if(filterOptions == glaze_util_EntityFilterOptions.ENEMY) {
		glaze_util_CombatUtils.bfAreaQuery.entityCollection.filter(glaze_util_CombatUtils.FilterEnemyFactions);
	} else if(filterOptions == glaze_util_EntityFilterOptions.FRIENDLY) {
		glaze_util_CombatUtils.bfAreaQuery.entityCollection.filter(glaze_util_CombatUtils.FilterFriendlyFactions);
	}
	return glaze_util_CombatUtils.bfAreaQuery.entityCollection;
};
glaze_util_CombatUtils.FilterItems = function(eci) {
	var _this = eci.entity;
	if(eci.entity.map["Fixed"] != null) {
		var _this1 = eci.entity;
		return eci.entity.map["Destroy"] == null;
	} else {
		return true;
	}
};
glaze_util_CombatUtils.FilterEnemyFactions = function(eci) {
	var _this = eci.entity;
	var faction = eci.entity.map["Personality"];
	if(faction == null) {
		return false;
	}
	var _this1 = glaze_util_CombatUtils.referenceEntity;
	var refFaction = glaze_util_CombatUtils.referenceEntity.map["Personality"];
	if(refFaction == null) {
		return false;
	}
	return refFaction.faction.compareTo(faction.faction).status < 0;
};
glaze_util_CombatUtils.FilterFriendlyFactions = function(eci) {
	var _this = eci.entity;
	var faction = eci.entity.map["Personality"];
	if(faction == null) {
		return false;
	}
	var _this1 = glaze_util_CombatUtils.referenceEntity;
	var refFaction = glaze_util_CombatUtils.referenceEntity.map["Personality"];
	if(refFaction == null) {
		return false;
	}
	return refFaction.faction.compareTo(faction.faction).status > 0;
};
glaze_util_CombatUtils.explode = function(position,radius,power,sourceEntity) {
	glaze_util_CombatUtils.bfAreaQuery.query(position,radius,sourceEntity,true);
	var item = glaze_util_CombatUtils.bfAreaQuery.entityCollection.entities.head;
	while(item != null) {
		var _this = item.entity;
		if(item.entity.map["Destroy"] == null) {
			var _this1 = item.entity;
			var health = item.entity.map["Health"];
			var _this2 = item.entity;
			var body = item.entity.map["PhysicsBody"];
			if(health != null || body != null) {
				var effect = radius / Math.sqrt(item.distance) * power;
				if(health != null) {
					health.applyDamage(effect);
				}
				var _this3 = item.entity;
				var personality = item.entity.map["Personality"];
				if(personality != null) {
					personality.applyDamage(sourceEntity,"explosion",effect);
				}
				if(body != null) {
					var delta_y;
					var delta_x;
					var _this4 = body.body.position;
					delta_x = _this4.x;
					delta_y = _this4.y;
					delta_x -= position.x;
					delta_y -= position.y;
					var t = Math.sqrt(delta_x * delta_x + delta_y * delta_y) + 1e-08;
					delta_x /= t;
					delta_y /= t;
					delta_x *= effect;
					delta_y *= effect;
					var _this5 = body.body;
					var _this6 = _this5.forces;
					var s = _this5.invMass;
					_this6.x += delta_x * s;
					_this6.y += delta_y * s;
					_this5.canSleep = false;
					_this5.motion = 10;
					_this5.bounceCount = 0;
				}
			}
		}
		item = item.next;
	}
};
glaze_util_CombatUtils.prototype = {
	__class__: glaze_util_CombatUtils
};
var glaze_geom_Vector2 = function(x,y) {
	if(y == null) {
		y = .0;
	}
	if(x == null) {
		x = .0;
	}
	this.x = x;
	this.y = y;
};
glaze_geom_Vector2.__name__ = ["glaze","geom","Vector2"];
glaze_geom_Vector2.prototype = {
	setTo: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,copy: function(v) {
		this.x = v.x;
		this.y = v.y;
	}
	,clone: function() {
		return new glaze_geom_Vector2(this.x,this.y);
	}
	,normalize: function() {
		var t = Math.sqrt(this.x * this.x + this.y * this.y) + 1e-08;
		this.x /= t;
		this.y /= t;
		return t;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,lengthSqrd: function() {
		return this.x * this.x + this.y * this.y;
	}
	,clampScalar: function(max) {
		var l = Math.sqrt(this.x * this.x + this.y * this.y);
		if(l > max) {
			var s = max / l;
			this.x *= s;
			this.y *= s;
		}
	}
	,clampVector: function(v) {
		this.x = Math.min(Math.max(this.x,-v.x),v.x);
		this.y = Math.min(Math.max(this.y,-v.y),v.y);
	}
	,plusEquals: function(v) {
		this.x += v.x;
		this.y += v.y;
	}
	,minusEquals: function(v) {
		this.x -= v.x;
		this.y -= v.y;
	}
	,multEquals: function(s) {
		this.x *= s;
		this.y *= s;
	}
	,plusMultEquals: function(v,s) {
		this.x += v.x * s;
		this.y += v.y * s;
	}
	,minusMultEquals: function(v,s) {
		this.x -= v.x * s;
		this.y -= v.y * s;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y;
	}
	,cross: function(v) {
		return this.x * v.y - this.y * v.x;
	}
	,leftHandNormal: function() {
		return new glaze_geom_Vector2(this.y,-this.x);
	}
	,leftHandNormalEquals: function() {
		var t = this.x;
		this.x = this.y;
		this.y = -t;
	}
	,rightHandNormal: function() {
		return new glaze_geom_Vector2(-this.y,this.x);
	}
	,rightHandNormalEquals: function() {
		var t = this.x;
		this.x = -this.y;
		this.y = t;
	}
	,reflectEquals: function(normal) {
		var d = this.x * normal.x + this.y * normal.y;
		this.x -= 2 * d * normal.x;
		this.y -= 2 * d * normal.y;
	}
	,interpolate: function(v1,v2,t) {
		this.x = v1.x;
		this.y = v1.y;
		var s = 1 - t;
		this.x *= s;
		this.y *= s;
		this.x += v2.x * t;
		this.y += v2.y * t;
	}
	,setAngle: function(angle) {
		var len = Math.sqrt(this.x * this.x + this.y * this.y);
		this.x = Math.cos(angle) * len;
		this.y = Math.sin(angle) * len;
	}
	,rotateEquals: function(angle) {
		var a = angle * (Math.PI / 180);
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this.x = cos * this.x - sin * this.y;
		this.y = cos * this.y + sin * this.x;
	}
	,setUnitRotation: function(angle) {
		var a = angle * (Math.PI / 180);
		this.x = Math.cos(a);
		this.y = Math.sin(a);
	}
	,heading: function() {
		return Math.atan2(this.y,this.x);
	}
	,distSqrd: function(v) {
		var dX = this.x - v.x;
		var dY = this.y - v.y;
		return dX * dX + dY * dY;
	}
	,__class__: glaze_geom_Vector2
};
var exile_entities_projectile_StandardBulletFactory = function() {
};
exile_entities_projectile_StandardBulletFactory.__name__ = ["exile","entities","projectile","StandardBulletFactory"];
exile_entities_projectile_StandardBulletFactory.create = function(engine,position,filter,targetPosition) {
	var bulletBody = new glaze_physics_Body(glaze_physics_Material.LIGHTMETAL);
	bulletBody.setMass(24);
	bulletBody.setBounces(3);
	bulletBody.globalForceFactor = 1;
	bulletBody.isBullet = true;
	bulletBody.maxScalarVelocity = 10000;
	filter.categoryBits |= 8;
	filter.maskBits |= 16;
	var bullet = engine.createEntity([position,new glaze_engine_components_Extents(2,2),new glaze_engine_components_Display("projectiles","standard"),new glaze_physics_components_PhysicsBody(bulletBody,true),new glaze_engine_components_Moveable(),new glaze_physics_components_PhysicsCollision(false,filter,[]),new glaze_engine_components_ParticleEmitters([new glaze_particle_emitter_InterpolatedEmitter(0,10)]),new glaze_engine_components_CollisionCounter(3,exile_entities_projectile_StandardBulletFactory.onDestroy),new glaze_engine_components_Health(10,10,0,exile_entities_projectile_StandardBulletFactory.onDestroy),new glaze_engine_components_Age(1000,exile_entities_projectile_StandardBulletFactory.onDestroy),new glaze_engine_components_Active()],"StandardBullet");
	glaze_util_Ballistics.calcProjectileVelocity(bulletBody,targetPosition,2500);
	return bullet;
};
exile_entities_projectile_StandardBulletFactory.onDestroy = function(entity) {
	if(entity.map["Destroy"] != null) {
		return;
	}
	entity.addComponent(new glaze_engine_components_Destroy(1));
	entity.map["ParticleEmitters"].emitters.push(new glaze_particle_emitter_Explosion(10,50));
	glaze_util_CombatUtils.explode(entity.map["Position"].coords,64,10000,entity);
};
exile_entities_projectile_StandardBulletFactory.prototype = {
	__class__: exile_entities_projectile_StandardBulletFactory
};
var exile_entities_weapon_HandGrenadeFactory = function() { };
exile_entities_weapon_HandGrenadeFactory.__name__ = ["exile","entities","weapon","HandGrenadeFactory"];
exile_entities_weapon_HandGrenadeFactory.create = function(engine,x,y) {
	var body = new glaze_physics_Body(new glaze_physics_Material());
	body.maxScalarVelocity = 200;
	var grenade = engine.createEntity([new glaze_engine_components_Position(x,y),new glaze_engine_components_Display("grenade","off"),new glaze_engine_components_Extents(8,8),new glaze_physics_components_PhysicsCollision(false,new glaze_physics_collision_Filter(),[]),new glaze_engine_components_Moveable(),new glaze_physics_components_PhysicsBody(body,false),new glaze_engine_components_Holdable(),new glaze_engine_components_Storeable(),new exile_components_Grenade(),new glaze_engine_components_Health(100,100,0,null),new glaze_engine_components_State(["off","on"],0,[]),new glaze_engine_components_Active()],"grenade" + exile_entities_weapon_HandGrenadeFactory.count++);
	return grenade;
};
var exile_factory_TmxCastleFactory = function(engine,tmxMap) {
	this.engine = engine;
	this.tmxMap = tmxMap;
	this.factories = new haxe_ds_StringMap();
};
exile_factory_TmxCastleFactory.__name__ = ["exile","factory","TmxCastleFactory"];
exile_factory_TmxCastleFactory.createPositionFromTMX = function(tmxObject) {
	return new glaze_engine_components_Position(exile_factory_TmxCastleFactory.SCALE(tmxObject.x + tmxObject.width / 2),exile_factory_TmxCastleFactory.SCALE(tmxObject.y + tmxObject.height / 2));
};
exile_factory_TmxCastleFactory.createExtentsFromTMX = function(tmxObject) {
	return new glaze_engine_components_Extents(exile_factory_TmxCastleFactory.SCALE(tmxObject.width / 2),exile_factory_TmxCastleFactory.SCALE(tmxObject.height / 2));
};
exile_factory_TmxCastleFactory.SCALE = function(v) {
	return v * 2;
};
exile_factory_TmxCastleFactory.prototype = {
	parse: function(groupName) {
		var objs = this.tmxMap.getObjectGroup(groupName);
		var _g = 0;
		var _g1 = objs.objects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			haxe_Log.trace(obj.type,{ fileName : "TmxCastleFactory.hx", lineNumber : 34, className : "exile.factory.TmxCastleFactory", methodName : "parse"});
			var components = [];
			components.push(new glaze_engine_components_TMX(obj.combined));
			components.push(exile_factory_TmxCastleFactory.createPositionFromTMX(obj));
			components.push(exile_factory_TmxCastleFactory.createExtentsFromTMX(obj));
			var key = obj.type;
			var _this = this.factories;
			var factory = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(factory != null) {
				components = factory.create(components);
				debugger;
				this.engine.createEntity(components,obj.name);
			}
		}
	}
	,registerFactory: function(factory) {
		var key = factory.id;
		var _this = this.factories;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,factory);
		} else {
			_this.h[key] = factory;
		}
	}
	,__class__: exile_factory_TmxCastleFactory
};
var glaze_eco_core_System = function(componentSignature) {
	this.registeredComponents = componentSignature;
	this.enabled = true;
	this.hasUpdate = true;
};
glaze_eco_core_System.__name__ = ["glaze","eco","core","System"];
glaze_eco_core_System.prototype = {
	onAdded: function(engine) {
		this.engine = engine;
	}
	,onRemoved: function() {
	}
	,entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
	}
	,canUpdate: function() {
		return this.enabled == this.hasUpdate == true;
	}
	,__class__: glaze_eco_core_System
};
var exile_systems_BeeHiveSystem = function() {
	glaze_eco_core_System.call(this,[exile_components_BeeHive,glaze_engine_components_Viewable,glaze_engine_components_Active]);
};
exile_systems_BeeHiveSystem.__name__ = ["exile","systems","BeeHiveSystem"];
exile_systems_BeeHiveSystem.__super__ = glaze_eco_core_System;
exile_systems_BeeHiveSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
		var beehive = entity.map["BeeHive"];
		var _g = 0;
		var _g1 = beehive.group.members;
		while(_g < _g1.length) {
			var bee = _g1[_g];
			++_g;
			bee.destroy();
		}
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var beehive = entity.map["BeeHive"];
			if(beehive.group.hasCapacity()) {
				if(Math.random() < 0.01) {
					var newBee = exile_entities_creatures_BeeFactory.create(this.engine,entity.map["Position"].clone());
					newBee.parent = entity;
					beehive.group.addMember(newBee);
				}
			}
		}
	}
	,__class__: exile_systems_BeeHiveSystem
});
var exile_systems_BirdNestSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,exile_components_BirdNest,glaze_engine_components_Viewable,glaze_engine_components_Active]);
};
exile_systems_BirdNestSystem.__name__ = ["exile","systems","BirdNestSystem"];
exile_systems_BirdNestSystem.__super__ = glaze_eco_core_System;
exile_systems_BirdNestSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var nest = entity.map["BirdNest"];
		var position = entity.map["Position"];
		nest.trigger = this.engine.createEntity([position,new glaze_engine_components_Extents(nest.radius / 2,nest.radius / 2),new glaze_physics_components_PhysicsCollision(true,null,[$bind(this,this.triggerCallback)]),new glaze_engine_components_Fixed(),new glaze_engine_components_Active()],"trigger");
		entity.addChildEntity(nest.trigger);
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var nest = entity.map["BirdNest"];
			if(nest.intervalDelay.tick(delta)) {
				var target = this.evaluateTargets(entity);
				if(target != null) {
					this.releaseBird(entity,target);
				}
			}
			if(nest.triggered) {
				nest.triggered = false;
			}
		}
	}
	,triggerCallback: function(a,b,contact) {
		var _this = a.entity.parent;
		a.entity.parent.map["BirdNest"].triggered = true;
	}
	,evaluateTargets: function(entity) {
		var entities = glaze_util_CombatUtils.searchSortAndFilter(entity.map["Position"].coords,200,entity,glaze_util_EntityFilterOptions.ALL).entities;
		var target = entities.head;
		while(target != null) {
			if(target != null) {
				return target.entity;
			}
			target = target.next;
		}
		return null;
	}
	,releaseBird: function(entity,target) {
		var nest = entity.map["BirdNest"];
		if(nest.group.hasCapacity()) {
			var bird = exile_entities_creatures_BirdFactory.create(this.engine,entity.map["Position"].clone(),entity.map["Position"],entity);
			nest.group.addMember(bird);
		}
	}
	,targetBird: function() {
	}
	,untargetBird: function() {
	}
	,returnBird: function() {
	}
	,__class__: exile_systems_BirdNestSystem
});
var exile_systems_BirdSystem = function(broadphase) {
	glaze_eco_core_System.call(this,[exile_components_Bird,glaze_physics_components_PhysicsCollision,glaze_engine_components_Health,glaze_ai_steering_components_Steering]);
	this.broadphase = broadphase;
	this.bfAreaQuery = new glaze_util_BroadphaseAreaQuery(broadphase);
};
exile_systems_BirdSystem.__name__ = ["exile","systems","BirdSystem"];
exile_systems_BirdSystem.create = function(engine,position,follow,nest) {
	var birdBody = new glaze_physics_Body(new glaze_physics_Material());
	birdBody.setMass(1);
	birdBody.setBounces(0);
	birdBody.globalForceFactor = 0.0;
	birdBody.maxScalarVelocity = 200;
	var map = engine.config.map;
	var bird = engine.createEntity([position,new exile_components_Bird(nest),new glaze_engine_components_Extents(4,4),new glaze_engine_components_Display("bird"),new glaze_physics_components_PhysicsBody(birdBody,false),new glaze_engine_components_Moveable(),new glaze_physics_components_PhysicsCollision(false,null,[]),new glaze_animation_components_SpriteAnimation("bird",["fly"],"fly"),new glaze_ai_steering_components_Steering([new glaze_ai_steering_behaviors_Wander(55,80,0.3),new glaze_ai_steering_behaviors_Arrival(follow.coords,256),new glaze_ai_steering_behaviors_WallAvoidance(map,60)]),new glaze_engine_components_Age(10000,glaze_util_EntityUtils.standardDestroy),new glaze_engine_components_Health(10,10,0,glaze_util_EntityUtils.standardDestroy),new glaze_engine_components_Active()],"bird");
	return bird;
};
exile_systems_BirdSystem.destroy = function(entity) {
	haxe_Log.trace("bang",{ fileName : "BirdSystem.hx", lineNumber : 168, className : "exile.systems.BirdSystem", methodName : "destroy"});
};
exile_systems_BirdSystem.__super__ = glaze_eco_core_System;
exile_systems_BirdSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var bird = entity.map["Bird"];
		bird.ai.pushState($bind(this,this.baseState));
		bird.ai2 = glaze_ai_behaviortree_BehaviorTree.createScript("bird");
		bird.ctx = new glaze_ai_behaviortree_BehaviorContext(entity);
		var _this = bird.nest;
		var _this1 = bird.nest.map["Position"].coords;
		bird.ctx.data["home"] = new glaze_geom_Vector2(_this1.x,_this1.y);
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var bird = entity.map["Bird"];
			bird.ctx.delta = delta;
			bird.ai2.tick(bird.ctx);
		}
	}
	,baseState: function(entity,fsm,delta) {
		var bird = entity.map["Bird"];
		if(bird.delay.tick(delta)) {
			fsm.pushState($bind(this,this.seekState));
		}
	}
	,seekState: function(entity,fsm,delta) {
		var entities = glaze_util_CombatUtils.searchSortAndFilter(entity.map["Position"].coords,300,entity,glaze_util_EntityFilterOptions.ALL).entities;
		if(entities.head != null) {
			var bird = entity.map["Bird"];
			bird.target = entities.head.entity;
			var steering = entity.map["Steering"];
			var arrival = steering.getBehaviour(glaze_ai_steering_behaviors_Arrival);
			var _this = bird.target;
			arrival.target = bird.target.map["Position"].coords;
			arrival.arrivalZone = 1;
			var wander = steering.getBehaviour(glaze_ai_steering_behaviors_Wander);
			wander.active = false;
			fsm.popState();
			fsm.pushState($bind(this,this.chaseState));
			return;
		}
		fsm.popState();
	}
	,chaseState: function(entity,fsm,delta) {
		var bird = entity.map["Bird"];
		if(bird.chaseCheck.tick(delta)) {
			return;
		}
		var _this = bird.target;
		if(glaze_util_CombatUtils.canSee(entity.map["Position"].coords,bird.target.map["Position"].coords,300)) {
			return;
		}
		var bird1 = entity.map["Bird"];
		bird1.target = null;
		var steering = entity.map["Steering"];
		var wander = steering.getBehaviour(glaze_ai_steering_behaviors_Wander);
		wander.active = true;
		var arrival = steering.getBehaviour(glaze_ai_steering_behaviors_Arrival);
		var _this1 = bird1.nest;
		arrival.target = bird1.nest.map["Position"].coords;
		arrival.arrivalZone = 128;
		fsm.popState();
	}
	,__class__: exile_systems_BirdSystem
});
var exile_systems_ChickenSystem = function(particleEngine) {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,exile_components_Chicken,glaze_physics_components_PhysicsBody]);
	this.particleEngine = particleEngine;
};
exile_systems_ChickenSystem.__name__ = ["exile","systems","ChickenSystem"];
exile_systems_ChickenSystem.__super__ = glaze_eco_core_System;
exile_systems_ChickenSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var dist = 1000000;
			var body = entity.map["PhysicsBody"].body;
			var dir = 0;
			if(this.scaredOfPosition != null) {
				var _this = body.position;
				var v = this.scaredOfPosition.coords;
				var dX = _this.x - v.x;
				var dY = _this.y - v.y;
				dist = dX * dX + dY * dY;
				if(body.position.x - this.scaredOfPosition.coords.x < 0) {
					dir = -1;
				} else {
					dir = 1;
				}
			}
			if(dist < 4096) {
				if(Math.random() < 0.1) {
					var f_y;
					var f_x = dir * 5000;
					f_y = -8000;
					var _this1 = body.forces;
					var s = body.invMass;
					_this1.x += f_x * s;
					_this1.y += f_y * s;
					body.canSleep = false;
					body.motion = 10;
					body.bounceCount = 0;
					this.particleEngine.EmitParticle(body.position.x,body.position.y,dir * -10,-100,0,5,800,1,false,true,null,4,255,255,255,255);
				}
			} else if(Math.random() < 0.005) {
				var dir1 = Math.random() < 0.5 ? 1 : -1;
				entity.map["Position"].direction.x = -dir1;
				var f_y1;
				var f_x1 = dir1 * 5000;
				f_y1 = -8000;
				var _this2 = body.forces;
				var s1 = body.invMass;
				_this2.x += f_x1 * s1;
				_this2.y += f_y1 * s1;
				body.canSleep = false;
				body.motion = 10;
				body.bounceCount = 0;
				this.particleEngine.EmitParticle(body.position.x,body.position.y,dir1 * -20,-100,0,5,800,1,false,true,null,4,255,255,255,255);
			}
		}
	}
	,__class__: exile_systems_ChickenSystem
});
var exile_systems_DoorSystem = function() {
	glaze_eco_core_System.call(this,[exile_components_Door,glaze_physics_components_PhysicsCollision,glaze_engine_components_State,glaze_engine_components_TileDisplay]);
	this.hasUpdate = false;
	this.scp = new glaze_util_StateChangeProxy();
	this.scp.registerStateHandler("open",$bind(this,this.openDoor2));
	this.scp.registerStateHandler("closed",$bind(this,this.closeDoor2));
};
exile_systems_DoorSystem.__name__ = ["exile","systems","DoorSystem"];
exile_systems_DoorSystem.__super__ = glaze_eco_core_System;
exile_systems_DoorSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var state = entity.map["State"];
		this.scp.registerState(state);
	}
	,entityRemoved: function(entity) {
		var state = entity.map["State"];
		this.scp.unregisterState(state);
	}
	,update: function(timestamp,delta) {
	}
	,openDoor2: function(state) {
		var _this = state.owner;
		var pc = state.owner.map["PhysicsCollision"];
		pc.proxy.responseBias.x = 0;
		pc.proxy.isActive = false;
		var _this1 = state.owner;
		var display = state.owner.map["TileDisplay"];
		display.set_tileFrameId("doorOpen");
	}
	,closeDoor2: function(state) {
		var _this = state.owner;
		var pc = state.owner.map["PhysicsCollision"];
		pc.proxy.responseBias.x = 1;
		pc.proxy.isActive = true;
		var _this1 = state.owner;
		var display = state.owner.map["TileDisplay"];
		display.set_tileFrameId("doorClosed");
	}
	,__class__: exile_systems_DoorSystem
});
var exile_systems_GrenadeSystem = function(broadphase) {
	glaze_eco_core_System.call(this,[exile_components_Grenade,glaze_physics_components_PhysicsCollision,glaze_engine_components_Health,glaze_engine_components_State,glaze_engine_components_Display,glaze_engine_components_Active]);
	this.broadphase = broadphase;
	this.bfAreaQuery = new glaze_util_BroadphaseAreaQuery(broadphase);
	this.scp = new glaze_util_StateChangeProxy();
	this.scp.registerStateHandler("on",$bind(this,this.on));
	this.scp.registerStateHandler("off",$bind(this,this.off));
};
exile_systems_GrenadeSystem.__name__ = ["exile","systems","GrenadeSystem"];
exile_systems_GrenadeSystem.__super__ = glaze_eco_core_System;
exile_systems_GrenadeSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var state = entity.map["State"];
		this.scp.registerState(state);
	}
	,entityRemoved: function(entity) {
		var state = entity.map["State"];
		this.scp.unregisterState(state);
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var grenade = entity.map["Grenade"];
			if(grenade.pause > 0) {
				grenade.pause -= 1;
				if(grenade.pause == 0) {
					this.destroy(entity);
				}
				continue;
			}
			var health = entity.map["Health"];
			if(health.currentHealth <= 0) {
				grenade.pause = 4;
				continue;
			}
			var state = entity.map["State"];
			if(state.getState() == "on") {
				var age = entity.map["Age"];
				var swapInterval = age.age > 1000 ? 50 : 150;
				if((age.age / swapInterval | 0) % 2 == 0) {
					entity.map["Display"].setFrameId("on");
				} else {
					entity.map["Display"].setFrameId("off");
				}
				if(age.age > age.ttl) {
					grenade.pause = 4;
					continue;
				}
			}
		}
	}
	,destroy: function(entity) {
		entity.addComponent(new glaze_engine_components_ParticleEmitters([new glaze_particle_emitter_Explosion(30,100)]));
		entity.addComponent(new glaze_engine_components_Destroy(1));
		glaze_util_CombatUtils.explode(entity.map["Position"].coords,64,100,entity);
	}
	,on: function(state) {
		haxe_Log.trace("active",{ fileName : "GrenadeSystem.hx", lineNumber : 89, className : "exile.systems.GrenadeSystem", methodName : "on"});
		state.owner.addComponent(new glaze_engine_components_Age(2000,null));
	}
	,off: function(state) {
		haxe_Log.trace("inactive",{ fileName : "GrenadeSystem.hx", lineNumber : 94, className : "exile.systems.GrenadeSystem", methodName : "off"});
		var _this = state.owner;
		state.owner.removeComponent(state.owner.map["Age"]);
	}
	,activeState: function(entity,fsm,delta) {
		var grenade = entity.map["Grenade"];
		grenade.fuse -= delta;
	}
	,__class__: exile_systems_GrenadeSystem
});
var exile_systems_GunTurretSystem = function() {
	glaze_eco_core_System.call(this,[exile_components_GunTurret,glaze_engine_components_Position]);
};
exile_systems_GunTurretSystem.__name__ = ["exile","systems","GunTurretSystem"];
exile_systems_GunTurretSystem.__super__ = glaze_eco_core_System;
exile_systems_GunTurretSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var turret = entity.map["GunTurret"];
			var position = entity.map["Position"];
			if(turret.intervalDelay.tick(delta)) {
				var entities = glaze_util_CombatUtils.searchSortAndFilter(position.coords,400,entity,glaze_util_EntityFilterOptions.ENEMY).entities;
				if(entities.head != null) {
					this.fireBulletAtEntity(position,entities.head.entity);
				}
			}
		}
	}
	,fireBulletAtEntity: function(position,target) {
		var _this = position.coords;
		var tmp = new glaze_geom_Vector2(_this.x,_this.y);
		var _this1 = target.map["Position"].coords;
		this.fireBullet(tmp,new glaze_geom_Vector2(_this1.x,_this1.y));
	}
	,fireBullet: function(pos,target) {
		var filter = new glaze_physics_collision_Filter();
		filter.groupIndex = -3;
		var bullet = exile_entities_projectile_StandardBulletFactory.create(this.engine,new glaze_engine_components_Position(pos.x,pos.y),filter,target);
	}
	,__class__: exile_systems_GunTurretSystem
});
var exile_systems_MaggotSystem = function(broadphase,particleEngine) {
	glaze_eco_core_System.call(this,[exile_components_Maggot,glaze_physics_components_PhysicsBody,glaze_animation_components_SpriteAnimation]);
	this.broadphase = broadphase;
	this.particleEngine = particleEngine;
	this.bfAreaQuery = new glaze_util_BroadphaseAreaQuery(broadphase);
};
exile_systems_MaggotSystem.__name__ = ["exile","systems","MaggotSystem"];
exile_systems_MaggotSystem.__super__ = glaze_eco_core_System;
exile_systems_MaggotSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var maggot = entity.map["Maggot"];
			maggot.sleep -= delta;
			if(Math.random() < 0.02) {
				entity.map["SpriteAnimation"].animationController.play("jump");
				var body = entity.map["PhysicsBody"].body;
				var dir = Math.random() < 0.5 ? 1 : -1;
				var f_y;
				var f_x = dir * 5;
				f_y = -10;
				var _this = body.forces;
				var s = body.invMass;
				_this.x += f_x * s;
				_this.y += f_y * s;
				body.canSleep = false;
				body.motion = 10;
				body.bounceCount = 0;
			} else if(Math.random() < 0.01) {
				entity.map["SpriteAnimation"].animationController.play("blink");
			} else if(maggot.sleep < 0 && Math.random() < 0.02) {
				maggot.sleep = 2000;
				var body1 = entity.map["PhysicsBody"].body;
				this.bfAreaQuery.query(body1.position,64,entity,true);
				if(this.bfAreaQuery.entityCollection.entities.head != null) {
					var _this1 = this.bfAreaQuery.entityCollection.entities.head.entity;
					glaze_util_Ballistics.calcProjectileVelocity(body1,this.bfAreaQuery.entityCollection.entities.head.entity.map["Position"].coords,300);
				}
			}
		}
	}
	,__class__: exile_systems_MaggotSystem
});
var exile_systems_PlayerSystem = function(input,particleEngine,spriteParticleEngine) {
	this.currentWeapon = 0;
	glaze_eco_core_System.call(this,[exile_components_Player,glaze_physics_components_PhysicsCollision,glaze_physics_components_PhysicsBody,glaze_animation_components_SpriteAnimation,glaze_engine_components_Extents]);
	this.input = input;
	this.particleEngine = particleEngine;
};
exile_systems_PlayerSystem.__name__ = ["exile","systems","PlayerSystem"];
exile_systems_PlayerSystem.__super__ = glaze_eco_core_System;
exile_systems_PlayerSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		this.player = entity;
		this.position = entity.map["Position"];
		this.physicsBody = entity.map["PhysicsBody"];
		this.physicsBody.body.usesStairs = true;
		this.characterController = new exile_util_CharacterController2(this.input,this.physicsBody.body);
		this.playerLight = this.engine.createEntity([this.position,new glaze_lighting_components_Light(256,1,1,0,255,255,255),new glaze_engine_components_Viewable(),new glaze_engine_components_Moveable(),new glaze_engine_components_Active()],"player light");
		this.holder = new glaze_engine_components_Holder();
		this.inventory = new glaze_engine_components_Inventory(4);
		this.playerHolder = this.engine.createEntity([this.position,entity.map["Extents"],this.holder,new glaze_physics_components_PhysicsCollision(true,new glaze_physics_collision_Filter(1,0,-1),[]),new glaze_engine_components_Moveable(),new glaze_engine_components_Active(),this.inventory],"playerHolder");
		this.player.addChildEntity(this.playerHolder);
		this.player.addChildEntity(this.playerLight);
		this.playerFilter = entity.map["PhysicsCollision"].proxy.filter;
		this.animation = entity.map["SpriteAnimation"];
	}
	,entityRemoved: function(entity) {
		debugger;
	}
	,update: function(timestamp,delta) {
		this.characterController.update();
		if(this.physicsBody.body.onGround && Math.abs(this.physicsBody.body.velocity.x) > 10) {
			this.animation.animationController.play("runright");
		} else if(!this.physicsBody.body.onGround) {
			this.animation.animationController.play("fly");
		} else {
			this.animation.animationController.play("idle");
		}
		if(this.characterController.left > 0) {
			this.position.direction.x = -1;
		}
		if(this.characterController.right > 0) {
			this.position.direction.x = 1;
		}
		this.physicsBody.body.collideOneWay = this.characterController.down <= 0;
		var _this = this.input;
		var fire = _this.keyMap[32] == _this.frameRef - 1;
		var _this1 = this.input;
		var search = _this1.keyMap[71] == _this1.frameRef - 1;
		var hold = this.input.keyMap[72] > 0;
		var ray = this.input.keyMap[82] > 0;
		var _this2 = this.input;
		if(_this2.keyMap[84] == _this2.frameRef - 1) {
			var _this3 = this.playerLight;
			var lightActive = this.playerLight.map["Viewable"];
			if(lightActive != null) {
				this.playerLight.removeComponent(lightActive);
			} else {
				this.playerLight.addComponent(new glaze_engine_components_Viewable());
			}
		}
		if(this.input.keyMap[85] > 0) {
			exile_entities_creatures_BeeFactory.create(this.engine,this.position.clone());
		}
		var _this4 = this.input;
		this.holder.activate = _this4.keyMap[72] == _this4.frameRef - 1;
		var _this5 = this.input;
		if(_this5.keyMap[74] == _this5.frameRef - 1) {
			var item = this.holder.drop();
		} else {
			var _this6 = this.input;
			if(_this6.keyMap[75] == _this6.frameRef - 1) {
				var item1 = this.holder.drop();
				if(item1 != null) {
					glaze_util_Ballistics.calcProjectileVelocity(item1.map["PhysicsBody"].body,this.input.ViewCorrectedMousePosition(),700);
				}
			}
		}
		var _this7 = this.input;
		if(_this7.keyMap[81] == _this7.frameRef - 1) {
			if(this.holder.heldItem != null) {
				var _this8 = this.holder.heldItem;
				var state = this.holder.heldItem.map["State"];
				if(state != null) {
					state.incrementState();
				}
			}
		}
		var _this9 = this.input;
		if(_this9.keyMap[90] == _this9.frameRef - 1) {
			this.inventory.store();
		}
		var _this10 = this.input;
		if(_this10.keyMap[88] == _this10.frameRef - 1) {
			this.inventory.retrieve();
		}
		if(fire) {
			if(this.currentWeapon == 0) {
				exile_entities_projectile_StandardBulletFactory.create(this.engine,this.position.clone(),this.playerFilter.clone(),this.input.ViewCorrectedMousePosition());
			}
			if(this.currentWeapon == 1) {
				exile_entities_projectile_PlasmaProjectileFactory.create(this.engine,this.position.clone(),this.playerFilter.clone(),this.input.ViewCorrectedMousePosition());
			}
		}
		if(this.input.keyMap[69] > 0) {
			var vel_y;
			var vel_x;
			var _this11 = this.input.ViewCorrectedMousePosition();
			vel_x = _this11.x;
			vel_y = _this11.y;
			var v = this.position.coords;
			vel_x -= v.x;
			vel_y -= v.y;
			var t = Math.sqrt(vel_x * vel_x + vel_y * vel_y) + 1e-08;
			vel_x /= t;
			vel_y /= t;
			vel_x *= 2000;
			vel_y *= 2000;
			this.particleEngine.EmitParticle(this.position.coords.x,this.position.coords.y,vel_x,vel_y,0,0,200,1,false,true,null,4,255,255,255,255);
		}
		if(this.characterController.burn > 0) {
			var ttl = 280;
			var offsetx = this.position.coords.x - 8 * this.position.direction.x;
			var velocity = 200 + Math.floor(Math.random() * 300 + -150);
			var count = Math.floor((this.characterController.burn + 500) / 1000);
			if(count > 0) {
				this.particleEngine.EmitParticle(offsetx,this.position.coords.y + 6,Math.random() * 20 + -10,velocity,0,0,40,0.9,false,false,null,4,255,255,0,0);
			}
			var _g1 = 0;
			var _g = count;
			while(_g1 < _g) {
				var i = _g1++;
				this.particleEngine.EmitParticle(offsetx,this.position.coords.y + 6,Math.random() * 100 + -50,velocity,0,0,ttl,0.9,true,true,null,4,255,255,255,255);
			}
		}
		var _this12 = this.input;
		if(_this12.keyMap[49] == _this12.frameRef - 1) {
			this.currentWeapon = 0;
		}
		var _this13 = this.input;
		if(_this13.keyMap[50] == _this13.frameRef - 1) {
			this.currentWeapon = 1;
		}
	}
	,callback: function(a,b,contact) {
	}
	,initPlayer: function() {
	}
	,__class__: exile_systems_PlayerSystem
});
var exile_systems_RabbitSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,exile_components_Rabbit,glaze_physics_components_PhysicsBody,glaze_animation_components_SpriteAnimation]);
};
exile_systems_RabbitSystem.__name__ = ["exile","systems","RabbitSystem"];
exile_systems_RabbitSystem.__super__ = glaze_eco_core_System;
exile_systems_RabbitSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var dist = 1000000;
			var body = entity.map["PhysicsBody"].body;
			var dir = 0;
			var rabbit = entity.map["Rabbit"];
			rabbit.sleep -= delta;
			if(this.scaredOfPosition != null) {
				var _this = body.position;
				var v = this.scaredOfPosition.coords;
				var dX = _this.x - v.x;
				var dY = _this.y - v.y;
				dist = dX * dX + dY * dY;
				if(body.position.x - this.scaredOfPosition.coords.x < 0) {
					dir = -1;
				} else {
					dir = 1;
				}
			}
			if(dist < 4096) {
				if(Math.random() < 0.1) {
					var f_y;
					var f_x = dir * 5000;
					f_y = -8000;
					var _this1 = body.forces;
					var s = body.invMass;
					_this1.x += f_x * s;
					_this1.y += f_y * s;
					body.canSleep = false;
					body.motion = 10;
					body.bounceCount = 0;
					entity.map["Position"].direction.x = dir;
					entity.map["SpriteAnimation"].animationController.play("jump");
				}
			} else if(rabbit.sleep < 0) {
				if(Math.random() < 0.01) {
					rabbit.sleep += 2000;
					var dir1 = Math.random() < 0.5 ? 1 : -1;
					entity.map["Position"].direction.x = dir1;
					var f_y1;
					var f_x1 = dir1 * 5000;
					f_y1 = -8000;
					var _this2 = body.forces;
					var s1 = body.invMass;
					_this2.x += f_x1 * s1;
					_this2.y += f_y1 * s1;
					body.canSleep = false;
					body.motion = 10;
					body.bounceCount = 0;
					entity.map["SpriteAnimation"].animationController.play("jump");
				} else if(Math.random() < 0.005) {
					rabbit.sleep += 1500;
					entity.map["SpriteAnimation"].animationController.play("listen");
				} else if(Math.random() < 0.005) {
					rabbit.sleep += 2000;
					entity.map["SpriteAnimation"].animationController.play("eat");
				}
			}
		}
	}
	,__class__: exile_systems_RabbitSystem
});
var exile_systems_TeleporterSystem = function() {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsCollision,exile_components_Teleporter,glaze_engine_components_State]);
	this.hasUpdate = false;
};
exile_systems_TeleporterSystem.__name__ = ["exile","systems","TeleporterSystem"];
exile_systems_TeleporterSystem.__super__ = glaze_eco_core_System;
exile_systems_TeleporterSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var collision = entity.map["PhysicsCollision"];
		collision.proxy.contactCallbacks.push($bind(this,this.onCollision));
		var state = entity.map["State"];
		state.onChanged.add($bind(this,this.setTeleporterState));
		this.setTeleporterState(state);
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
	}
	,setTeleporterState: function(state) {
		var _this = state.owner;
		var collision = state.owner.map["PhysicsCollision"];
		if(state.getState() == "on") {
			collision.proxy.isActive = true;
		} else {
			collision.proxy.isActive = false;
		}
	}
	,onCollision: function(a,b,c) {
		if(Math.random() < 0.1) {
			var _this = b.body.position;
			var _this1 = a.entity;
			var v = a.entity.map["Teleporter"].teleportPosition;
			_this.x = v.x;
			_this.y = v.y;
		}
	}
	,__class__: exile_systems_TeleporterSystem
});
var exile_systems_WaterHolderSystem = function() {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsCollision,glaze_physics_components_PhysicsBody,exile_components_WaterHolder]);
	this.hasUpdate = false;
};
exile_systems_WaterHolderSystem.__name__ = ["exile","systems","WaterHolderSystem"];
exile_systems_WaterHolderSystem.__super__ = glaze_eco_core_System;
exile_systems_WaterHolderSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var collision = entity.map["PhysicsCollision"];
		collision.proxy.contactCallbacks.push($bind(this,this.onCollision));
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
	}
	,onCollision: function(a,b,c) {
		var delta_y;
		var delta_x;
		var _this = a.body.velocity;
		delta_x = _this.x;
		delta_y = _this.y;
		var v = a.body.previousVelocity;
		delta_x -= v.x;
		delta_y -= v.y;
		if(Math.sqrt(delta_x * delta_x + delta_y * delta_y) > 70) {
			haxe_Log.trace(Math.sqrt(delta_x * delta_x + delta_y * delta_y),{ fileName : "WaterHolderSystem.hx", lineNumber : 37, className : "exile.systems.WaterHolderSystem", methodName : "onCollision"});
			haxe_Log.trace("spilllll",{ fileName : "WaterHolderSystem.hx", lineNumber : 39, className : "exile.systems.WaterHolderSystem", methodName : "onCollision"});
		}
	}
	,__class__: exile_systems_WaterHolderSystem
});
var exile_util_CharacterController2 = function(input,body) {
	this.burn = 0;
	this.originalFriction = 0;
	this.isWalking = false;
	this.jumping = false;
	this.jumpUnit = new glaze_geom_Vector2();
	this.controlForce = new glaze_geom_Vector2();
	this.input = input;
	this.body = body;
	this.originalFriction = body.material.friction;
	var _this = body.maxVelocity;
	this.originalVelocityClamp = new glaze_geom_Vector2(_this.x,_this.y);
};
exile_util_CharacterController2.__name__ = ["exile","util","CharacterController2"];
exile_util_CharacterController2.prototype = {
	update: function() {
		var _this = this.controlForce;
		_this.x = .0;
		_this.y = .0;
		var _this1 = this.input;
		var duration = _this1.keyMap[65];
		this.left = duration > 0 ? _this1.frameRef - duration : -1;
		var _this2 = this.input;
		var duration1 = _this2.keyMap[68];
		this.right = duration1 > 0 ? _this2.frameRef - duration1 : -1;
		var _this3 = this.input;
		var up = _this3.keyMap[87] == _this3.frameRef - 1;
		var _this4 = this.input;
		var duration2 = _this4.keyMap[87];
		var upDuration = duration2 > 0 ? _this4.frameRef - duration2 : -1;
		var _this5 = this.input;
		var duration3 = _this5.keyMap[83];
		this.down = duration3 > 0 ? _this5.frameRef - duration3 : -1;
		var _this6 = this.input;
		var duration4 = _this6.keyMap[16];
		this.boost = duration4 > 0 ? _this6.frameRef - duration4 : -1;
		if(!this.jumping && this.body.onGround && up) {
			this.jumping = true;
			this.controlForce.y -= 18000. / 5;
		}
		if(this.jumping && this.input.keyMap[87] == 0 || this.body.contactNormal.y > 0) {
			this.jumping = false;
		}
		if(this.body.onGround && !this.body.onGroundPrev) {
			this.burn = 0;
		}
		if(this.body.onGround) {
			if(this.left > 0) {
				this.controlForce.x -= 1200.;
			}
			if(this.right > 0) {
				this.controlForce.x += 1200.;
			}
			if(up) {
				this.controlForce.y -= 18000.;
			}
		} else {
			if(this.left > 0) {
				this.controlForce.x -= 600;
			}
			if(this.right > 0) {
				this.controlForce.x += 600;
			}
			var d = 10;
			if(up) {
				this.burn = 3000.;
			}
			if(upDuration > 0) {
				this.burn += 600;
			}
		}
		if(this.boost > 0) {
			this.burn = Math.min(this.burn,3000. * 1.4);
		} else {
			this.burn = Math.min(this.burn,3000.);
		}
		this.controlForce.y -= this.burn;
		this.burn *= 0.95;
		this.isWalking = this.body.onGround && (this.left > 0 || this.right > 0);
		var tmp = this.isWalking;
		var _this7 = this.body;
		var f = this.controlForce;
		var _this8 = _this7.forces;
		var s = _this7.invMass;
		_this8.x += f.x * s;
		_this8.y += f.y * s;
		_this7.canSleep = false;
		_this7.motion = 10;
		_this7.bounceCount = 0;
	}
	,__class__: exile_util_CharacterController2
};
var glaze_EngineConstants = function() { };
glaze_EngineConstants.__name__ = ["glaze","EngineConstants"];
var glaze_ai_behaviortree_Behavior = function() {
	this.debugLevel = 0;
	this.status = glaze_ai_behaviortree_BehaviorStatus.Invalid;
};
glaze_ai_behaviortree_Behavior.__name__ = ["glaze","ai","behaviortree","Behavior"];
glaze_ai_behaviortree_Behavior.prototype = {
	initialize: function(context) {
	}
	,terminate: function(status) {
	}
	,update: function(context) {
		return this.status;
	}
	,get_terminated: function() {
		if(this.status != glaze_ai_behaviortree_BehaviorStatus.Success) {
			return this.status == glaze_ai_behaviortree_BehaviorStatus.Failure;
		} else {
			return true;
		}
	}
	,get_running: function() {
		return this.status == glaze_ai_behaviortree_BehaviorStatus.Running;
	}
	,reset: function() {
		this.status = glaze_ai_behaviortree_BehaviorStatus.Invalid;
	}
	,abort: function() {
		this.terminate(glaze_ai_behaviortree_BehaviorStatus.Aborted);
		this.status = glaze_ai_behaviortree_BehaviorStatus.Aborted;
	}
	,tick: function(context) {
		if(this.debugLevel > 0 && this.description != null) {
			haxe_Log.trace("BT Log:" + this.description,{ fileName : "Behavior.hx", lineNumber : 81, className : "glaze.ai.behaviortree.Behavior", methodName : "tick"});
		}
		if(this.status != glaze_ai_behaviortree_BehaviorStatus.Running) {
			this.initialize(context);
		}
		this.status = this.update(context);
		if(this.status != glaze_ai_behaviortree_BehaviorStatus.Running) {
			this.terminate(this.status);
		}
		return this.status;
	}
	,addChild: function(child) {
		child.owner = this;
	}
	,removeChild: function(child) {
		child.owner = null;
	}
	,__class__: glaze_ai_behaviortree_Behavior
	,__properties__: {get_running:"get_running",get_terminated:"get_terminated"}
};
var glaze_ai_behaviortree_BehaviorContext = function(entity) {
	this.entity = entity;
	this.timestamp = 0;
	this.delta = 0;
	var this1 = { };
	this.data = this1;
};
glaze_ai_behaviortree_BehaviorContext.__name__ = ["glaze","ai","behaviortree","BehaviorContext"];
glaze_ai_behaviortree_BehaviorContext.prototype = {
	__class__: glaze_ai_behaviortree_BehaviorContext
};
var glaze_ai_behaviortree_BehaviorStatus = { __ename__ : true, __constructs__ : ["Invalid","Success","Running","Failure","Aborted"] };
glaze_ai_behaviortree_BehaviorStatus.Invalid = ["Invalid",0];
glaze_ai_behaviortree_BehaviorStatus.Invalid.toString = $estr;
glaze_ai_behaviortree_BehaviorStatus.Invalid.__enum__ = glaze_ai_behaviortree_BehaviorStatus;
glaze_ai_behaviortree_BehaviorStatus.Success = ["Success",1];
glaze_ai_behaviortree_BehaviorStatus.Success.toString = $estr;
glaze_ai_behaviortree_BehaviorStatus.Success.__enum__ = glaze_ai_behaviortree_BehaviorStatus;
glaze_ai_behaviortree_BehaviorStatus.Running = ["Running",2];
glaze_ai_behaviortree_BehaviorStatus.Running.toString = $estr;
glaze_ai_behaviortree_BehaviorStatus.Running.__enum__ = glaze_ai_behaviortree_BehaviorStatus;
glaze_ai_behaviortree_BehaviorStatus.Failure = ["Failure",3];
glaze_ai_behaviortree_BehaviorStatus.Failure.toString = $estr;
glaze_ai_behaviortree_BehaviorStatus.Failure.__enum__ = glaze_ai_behaviortree_BehaviorStatus;
glaze_ai_behaviortree_BehaviorStatus.Aborted = ["Aborted",4];
glaze_ai_behaviortree_BehaviorStatus.Aborted.toString = $estr;
glaze_ai_behaviortree_BehaviorStatus.Aborted.__enum__ = glaze_ai_behaviortree_BehaviorStatus;
var glaze_ai_behaviortree_Composite = function() {
	glaze_ai_behaviortree_Behavior.call(this);
	this.children = [];
};
glaze_ai_behaviortree_Composite.__name__ = ["glaze","ai","behaviortree","Composite"];
glaze_ai_behaviortree_Composite.__super__ = glaze_ai_behaviortree_Behavior;
glaze_ai_behaviortree_Composite.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	addChild: function(child) {
		glaze_ai_behaviortree_Behavior.prototype.addChild.call(this,child);
		this.children.push(child);
	}
	,removeChild: function(child) {
		glaze_ai_behaviortree_Behavior.prototype.removeChild.call(this,child);
		HxOverrides.remove(this.children,child);
	}
	,removeAll: function() {
		while(this.children.length > 0) this.children.pop();
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.reset();
		}
	}
	,__class__: glaze_ai_behaviortree_Composite
});
var glaze_ai_behaviortree_branch_Parallel = function(success,failure) {
	glaze_ai_behaviortree_Composite.call(this);
	this._successPolicy = success;
	this._failurePolicy = failure;
};
glaze_ai_behaviortree_branch_Parallel.__name__ = ["glaze","ai","behaviortree","branch","Parallel"];
glaze_ai_behaviortree_branch_Parallel.__super__ = glaze_ai_behaviortree_Composite;
glaze_ai_behaviortree_branch_Parallel.prototype = $extend(glaze_ai_behaviortree_Composite.prototype,{
	initialize: function(context) {
	}
	,update: function(context) {
		var successCount = 0;
		var failureCount = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!(child.status == glaze_ai_behaviortree_BehaviorStatus.Success || child.status == glaze_ai_behaviortree_BehaviorStatus.Failure)) {
				child.tick(context);
			}
			var _g2 = child.status;
			switch(_g2[1]) {
			case 1:
				++successCount;
				if(this._successPolicy == glaze_ai_behaviortree_branch_Policy.RequireOne) {
					return glaze_ai_behaviortree_BehaviorStatus.Success;
				}
				break;
			case 3:
				++failureCount;
				if(this._failurePolicy == glaze_ai_behaviortree_branch_Policy.RequireOne) {
					return glaze_ai_behaviortree_BehaviorStatus.Failure;
				}
				break;
			default:
			}
		}
		if(this._failurePolicy == glaze_ai_behaviortree_branch_Policy.RequireAll && failureCount == this.children.length) {
			return glaze_ai_behaviortree_BehaviorStatus.Failure;
		}
		if(this._successPolicy == glaze_ai_behaviortree_branch_Policy.RequireAll && successCount == this.children.length) {
			return glaze_ai_behaviortree_BehaviorStatus.Success;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Running;
	}
	,terminate: function(status) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.status == glaze_ai_behaviortree_BehaviorStatus.Running) {
				child.abort();
			}
			child.reset();
		}
	}
	,__class__: glaze_ai_behaviortree_branch_Parallel
});
var glaze_ai_behaviortree_branch_Monitor = function() {
	glaze_ai_behaviortree_branch_Parallel.call(this,glaze_ai_behaviortree_branch_Policy.RequireAll,glaze_ai_behaviortree_branch_Policy.RequireAll);
};
glaze_ai_behaviortree_branch_Monitor.__name__ = ["glaze","ai","behaviortree","branch","Monitor"];
glaze_ai_behaviortree_branch_Monitor.__super__ = glaze_ai_behaviortree_branch_Parallel;
glaze_ai_behaviortree_branch_Monitor.prototype = $extend(glaze_ai_behaviortree_branch_Parallel.prototype,{
	__class__: glaze_ai_behaviortree_branch_Monitor
});
var glaze_ai_behaviortree_branch_Selector = function() {
	glaze_ai_behaviortree_Composite.call(this);
};
glaze_ai_behaviortree_branch_Selector.__name__ = ["glaze","ai","behaviortree","branch","Selector"];
glaze_ai_behaviortree_branch_Selector.__super__ = glaze_ai_behaviortree_Composite;
glaze_ai_behaviortree_branch_Selector.prototype = $extend(glaze_ai_behaviortree_Composite.prototype,{
	initialize: function(context) {
		this._current = HxOverrides.iter(this.children);
		this._currentBehavior = this._current.next();
	}
	,update: function(context) {
		while(this._currentBehavior != null) {
			var status = this._currentBehavior.tick(context);
			if(status != glaze_ai_behaviortree_BehaviorStatus.Failure) {
				return status;
			}
			if(this._current.hasNext()) {
				this._currentBehavior = this._current.next();
			} else {
				break;
			}
		}
		return glaze_ai_behaviortree_BehaviorStatus.Failure;
	}
	,__class__: glaze_ai_behaviortree_branch_Selector
});
var glaze_ai_behaviortree_branch_Sequence = function() {
	glaze_ai_behaviortree_Composite.call(this);
};
glaze_ai_behaviortree_branch_Sequence.__name__ = ["glaze","ai","behaviortree","branch","Sequence"];
glaze_ai_behaviortree_branch_Sequence.__super__ = glaze_ai_behaviortree_Composite;
glaze_ai_behaviortree_branch_Sequence.prototype = $extend(glaze_ai_behaviortree_Composite.prototype,{
	initialize: function(context) {
		this._current = HxOverrides.iter(this.children);
		this._currentBehavior = this._current.next();
	}
	,update: function(context) {
		while(this._currentBehavior != null) {
			var status = this._currentBehavior.tick(context);
			if(status != glaze_ai_behaviortree_BehaviorStatus.Success) {
				return status;
			}
			if(this._current.hasNext()) {
				this._currentBehavior = this._current.next();
			} else {
				break;
			}
		}
		return glaze_ai_behaviortree_BehaviorStatus.Success;
	}
	,__class__: glaze_ai_behaviortree_branch_Sequence
});
var glaze_ai_behaviortree_Decorator = function() {
	glaze_ai_behaviortree_Behavior.call(this);
	this.addChild(this.child);
};
glaze_ai_behaviortree_Decorator.__name__ = ["glaze","ai","behaviortree","Decorator"];
glaze_ai_behaviortree_Decorator.__super__ = glaze_ai_behaviortree_Behavior;
glaze_ai_behaviortree_Decorator.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	addChild: function(child) {
		this.child = child;
	}
	,__class__: glaze_ai_behaviortree_Decorator
});
var glaze_ai_behaviortree_decorator_Invert = function() {
	glaze_ai_behaviortree_Decorator.call(this);
};
glaze_ai_behaviortree_decorator_Invert.__name__ = ["glaze","ai","behaviortree","decorator","Invert"];
glaze_ai_behaviortree_decorator_Invert.__super__ = glaze_ai_behaviortree_Decorator;
glaze_ai_behaviortree_decorator_Invert.prototype = $extend(glaze_ai_behaviortree_Decorator.prototype,{
	update: function(context) {
		var _g = this.child.tick(context);
		switch(_g[1]) {
		case 2:
			return glaze_ai_behaviortree_BehaviorStatus.Running;
		case 3:
			return glaze_ai_behaviortree_BehaviorStatus.Success;
		default:
			return glaze_ai_behaviortree_BehaviorStatus.Success;
		}
	}
	,__class__: glaze_ai_behaviortree_decorator_Invert
});
var glaze_ai_behaviortree_decorator_Repeat = function(count) {
	if(count == null) {
		count = 0;
	}
	this._counter = 0;
	this.count = 0;
	glaze_ai_behaviortree_Decorator.call(this);
	this.count = count;
};
glaze_ai_behaviortree_decorator_Repeat.__name__ = ["glaze","ai","behaviortree","decorator","Repeat"];
glaze_ai_behaviortree_decorator_Repeat.__super__ = glaze_ai_behaviortree_Decorator;
glaze_ai_behaviortree_decorator_Repeat.prototype = $extend(glaze_ai_behaviortree_Decorator.prototype,{
	initialize: function(context) {
		this._counter = 0;
	}
	,update: function(context) {
		try {
			while(true) {
				var _g = this.child.tick(context);
				switch(_g[1]) {
				case 2:
					throw "__break__";
					break;
				case 3:
					return glaze_ai_behaviortree_BehaviorStatus.Failure;
				default:
					if(++this._counter == this.count) {
						return glaze_ai_behaviortree_BehaviorStatus.Success;
					}
				}
				this.child.reset();
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return glaze_ai_behaviortree_BehaviorStatus.Invalid;
	}
	,__class__: glaze_ai_behaviortree_decorator_Repeat
});
var glaze_ai_behaviortree_decorator_RepeatUntilSuccess = function() {
	glaze_ai_behaviortree_Decorator.call(this);
};
glaze_ai_behaviortree_decorator_RepeatUntilSuccess.__name__ = ["glaze","ai","behaviortree","decorator","RepeatUntilSuccess"];
glaze_ai_behaviortree_decorator_RepeatUntilSuccess.__super__ = glaze_ai_behaviortree_Decorator;
glaze_ai_behaviortree_decorator_RepeatUntilSuccess.prototype = $extend(glaze_ai_behaviortree_Decorator.prototype,{
	update: function(context) {
		if(this.child.tick(context) == glaze_ai_behaviortree_BehaviorStatus.Success) {
			return glaze_ai_behaviortree_BehaviorStatus.Success;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Running;
	}
	,__class__: glaze_ai_behaviortree_decorator_RepeatUntilSuccess
});
var glaze_ai_behaviortree_decorator_RepeatUntilFail = function() {
	glaze_ai_behaviortree_Decorator.call(this);
};
glaze_ai_behaviortree_decorator_RepeatUntilFail.__name__ = ["glaze","ai","behaviortree","decorator","RepeatUntilFail"];
glaze_ai_behaviortree_decorator_RepeatUntilFail.__super__ = glaze_ai_behaviortree_Decorator;
glaze_ai_behaviortree_decorator_RepeatUntilFail.prototype = $extend(glaze_ai_behaviortree_Decorator.prototype,{
	update: function(context) {
		if(this.child.tick(context) == glaze_ai_behaviortree_BehaviorStatus.Failure) {
			return glaze_ai_behaviortree_BehaviorStatus.Failure;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Running;
	}
	,__class__: glaze_ai_behaviortree_decorator_RepeatUntilFail
});
var glaze_ai_behaviortree_leaf_CopyContextData = function(source,target) {
	glaze_ai_behaviortree_Behavior.call(this);
	this.source = source;
	this.target = target;
};
glaze_ai_behaviortree_leaf_CopyContextData.__name__ = ["glaze","ai","behaviortree","leaf","CopyContextData"];
glaze_ai_behaviortree_leaf_CopyContextData.__super__ = glaze_ai_behaviortree_Behavior;
glaze_ai_behaviortree_leaf_CopyContextData.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	update: function(context) {
		var sourceData = Reflect.field(context.data,this.source);
		context.data[this.target] = sourceData;
		return glaze_ai_behaviortree_BehaviorStatus.Success;
	}
	,__class__: glaze_ai_behaviortree_leaf_CopyContextData
});
var glaze_ai_behaviortree_leaf_Failure = function(count) {
	if(count == null) {
		count = 0;
	}
	glaze_ai_behaviortree_Behavior.call(this);
	this.count = count;
	this.counter = count;
};
glaze_ai_behaviortree_leaf_Failure.__name__ = ["glaze","ai","behaviortree","leaf","Failure"];
glaze_ai_behaviortree_leaf_Failure.__super__ = glaze_ai_behaviortree_Behavior;
glaze_ai_behaviortree_leaf_Failure.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
		haxe_Log.trace("Failure initialized",{ fileName : "Failure.hx", lineNumber : 23, className : "glaze.ai.behaviortree.leaf.Failure", methodName : "initialize"});
	}
	,update: function(context) {
		haxe_Log.trace("Running Failure Task " + this.counter,{ fileName : "Failure.hx", lineNumber : 29, className : "glaze.ai.behaviortree.leaf.Failure", methodName : "update"});
		this.counter--;
		if(this.counter > 0) {
			haxe_Log.trace("..failing",{ fileName : "Failure.hx", lineNumber : 32, className : "glaze.ai.behaviortree.leaf.Failure", methodName : "update"});
			return glaze_ai_behaviortree_BehaviorStatus.Failure;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Success;
	}
	,terminate: function(status) {
		haxe_Log.trace("Failure terminated",{ fileName : "Failure.hx", lineNumber : 39, className : "glaze.ai.behaviortree.leaf.Failure", methodName : "terminate"});
	}
	,__class__: glaze_ai_behaviortree_leaf_Failure
});
var glaze_ai_behaviortree_leaf_FunctionExecutorAction = function(fn) {
	glaze_ai_behaviortree_Behavior.call(this);
	this.fn = fn;
};
glaze_ai_behaviortree_leaf_FunctionExecutorAction.__name__ = ["glaze","ai","behaviortree","leaf","FunctionExecutorAction"];
glaze_ai_behaviortree_leaf_FunctionExecutorAction.__super__ = glaze_ai_behaviortree_Behavior;
glaze_ai_behaviortree_leaf_FunctionExecutorAction.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	update: function(context) {
		return this.fn(context);
	}
	,__class__: glaze_ai_behaviortree_leaf_FunctionExecutorAction
});
var glaze_ai_behaviortree_leaf_Logger = function(msg) {
	glaze_ai_behaviortree_Behavior.call(this);
	this.msg = msg;
};
glaze_ai_behaviortree_leaf_Logger.__name__ = ["glaze","ai","behaviortree","leaf","Logger"];
glaze_ai_behaviortree_leaf_Logger.__super__ = glaze_ai_behaviortree_Behavior;
glaze_ai_behaviortree_leaf_Logger.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
		haxe_Log.trace("init!",{ fileName : "Logger.hx", lineNumber : 21, className : "glaze.ai.behaviortree.leaf.Logger", methodName : "initialize"});
	}
	,update: function(context) {
		haxe_Log.trace(this.msg,{ fileName : "Logger.hx", lineNumber : 26, className : "glaze.ai.behaviortree.leaf.Logger", methodName : "update"});
		return glaze_ai_behaviortree_BehaviorStatus.Success;
	}
	,__class__: glaze_ai_behaviortree_leaf_Logger
});
var glaze_ai_behaviortree_leaf_SetContextData = function() {
	glaze_ai_behaviortree_Behavior.call(this);
};
glaze_ai_behaviortree_leaf_SetContextData.__name__ = ["glaze","ai","behaviortree","leaf","SetContextData"];
glaze_ai_behaviortree_leaf_SetContextData.__super__ = glaze_ai_behaviortree_Behavior;
glaze_ai_behaviortree_leaf_SetContextData.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
	}
	,update: function(context) {
		return glaze_ai_behaviortree_BehaviorStatus.Success;
	}
	,__class__: glaze_ai_behaviortree_leaf_SetContextData
});
var glaze_ai_behaviortree_leaf_Success = function(count) {
	if(count == null) {
		count = 0;
	}
	glaze_ai_behaviortree_Behavior.call(this);
	this.count = count;
};
glaze_ai_behaviortree_leaf_Success.__name__ = ["glaze","ai","behaviortree","leaf","Success"];
glaze_ai_behaviortree_leaf_Success.__super__ = glaze_ai_behaviortree_Behavior;
glaze_ai_behaviortree_leaf_Success.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
		this.counter = this.count;
	}
	,update: function(context) {
		haxe_Log.trace("Running Success Task " + this.counter,{ fileName : "Success.hx", lineNumber : 28, className : "glaze.ai.behaviortree.leaf.Success", methodName : "update"});
		this.counter--;
		if(this.counter < 0) {
			haxe_Log.trace("...done",{ fileName : "Success.hx", lineNumber : 31, className : "glaze.ai.behaviortree.leaf.Success", methodName : "update"});
			return glaze_ai_behaviortree_BehaviorStatus.Success;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Running;
	}
	,terminate: function(status) {
		haxe_Log.trace("terminated",{ fileName : "Success.hx", lineNumber : 38, className : "glaze.ai.behaviortree.leaf.Success", methodName : "terminate"});
	}
	,__class__: glaze_ai_behaviortree_leaf_Success
});
var glaze_engine_actions_Delay = function(delay,random) {
	if(random == null) {
		random = 0.0;
	}
	glaze_ai_behaviortree_Behavior.call(this);
	this.delay = delay;
	if(random != 0) {
		var min = -random;
		this.delay += Math.random() * (random - min) + min;
	}
};
glaze_engine_actions_Delay.__name__ = ["glaze","engine","actions","Delay"];
glaze_engine_actions_Delay.__super__ = glaze_ai_behaviortree_Behavior;
glaze_engine_actions_Delay.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
		this.elapsed = 0;
	}
	,update: function(context) {
		this.elapsed += context.delta;
		if(this.elapsed > this.delay) {
			return glaze_ai_behaviortree_BehaviorStatus.Success;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Running;
	}
	,__class__: glaze_engine_actions_Delay
});
var glaze_engine_actions_CanSee = function(range) {
	if(range == null) {
		range = 300;
	}
	glaze_ai_behaviortree_Behavior.call(this);
	this.range = range;
};
glaze_engine_actions_CanSee.__name__ = ["glaze","engine","actions","CanSee"];
glaze_engine_actions_CanSee.__super__ = glaze_ai_behaviortree_Behavior;
glaze_engine_actions_CanSee.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
	}
	,update: function(context) {
		var target = Reflect.field(context.data,"target");
		if(target == null) {
			return glaze_ai_behaviortree_BehaviorStatus.Failure;
		}
		var _this = context.entity;
		if(glaze_util_CombatUtils.canSee(context.entity.map["Position"].coords,target,this.range)) {
			return glaze_ai_behaviortree_BehaviorStatus.Success;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Failure;
	}
	,__class__: glaze_engine_actions_CanSee
});
var glaze_engine_actions_FindTarget = function() {
	glaze_ai_behaviortree_Behavior.call(this);
};
glaze_engine_actions_FindTarget.__name__ = ["glaze","engine","actions","FindTarget"];
glaze_engine_actions_FindTarget.__super__ = glaze_ai_behaviortree_Behavior;
glaze_engine_actions_FindTarget.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
	}
	,update: function(context) {
		var _this = context.entity;
		var position = context.entity.map["Position"].coords;
		var entities = glaze_util_CombatUtils.searchSortAndFilter(position,300,context.entity,glaze_util_EntityFilterOptions.ENEMY).entities;
		if(entities.head != null) {
			context.data["targetEntity"] = entities.head.entity;
			var _this1 = entities.head.entity;
			context.data["target"] = entities.head.entity.map["Position"].coords;
			return glaze_ai_behaviortree_BehaviorStatus.Success;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Failure;
	}
	,__class__: glaze_engine_actions_FindTarget
});
var glaze_engine_actions_WanderToTarget = function(arrivalZone) {
	if(arrivalZone == null) {
		arrivalZone = 128;
	}
	glaze_ai_behaviortree_Behavior.call(this);
	this.arrivalZone = arrivalZone;
};
glaze_engine_actions_WanderToTarget.__name__ = ["glaze","engine","actions","WanderToTarget"];
glaze_engine_actions_WanderToTarget.__super__ = glaze_ai_behaviortree_Behavior;
glaze_engine_actions_WanderToTarget.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
	}
	,update: function(context) {
		var target = Reflect.field(context.data,"target");
		if(target == null) {
			return glaze_ai_behaviortree_BehaviorStatus.Failure;
		}
		var _this = context.entity;
		var steering = context.entity.map["Steering"];
		var wander = steering.getBehaviour(glaze_ai_steering_behaviors_Wander);
		wander.active = true;
		var arrival = steering.getBehaviour(glaze_ai_steering_behaviors_Arrival);
		arrival.target = target;
		arrival.arrivalZone = this.arrivalZone;
		return glaze_ai_behaviortree_BehaviorStatus.Success;
	}
	,__class__: glaze_engine_actions_WanderToTarget
});
var glaze_engine_actions_SeekTarget = function() {
	glaze_ai_behaviortree_Behavior.call(this);
};
glaze_engine_actions_SeekTarget.__name__ = ["glaze","engine","actions","SeekTarget"];
glaze_engine_actions_SeekTarget.__super__ = glaze_ai_behaviortree_Behavior;
glaze_engine_actions_SeekTarget.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
	}
	,update: function(context) {
		var target = Reflect.field(context.data,"target");
		if(target == null) {
			return glaze_ai_behaviortree_BehaviorStatus.Failure;
		}
		var _this = context.entity;
		var steering = context.entity.map["Steering"];
		var wander = steering.getBehaviour(glaze_ai_steering_behaviors_Wander);
		var arrival = steering.getBehaviour(glaze_ai_steering_behaviors_Arrival);
		arrival.target = target;
		arrival.arrivalZone = 1;
		return glaze_ai_behaviortree_BehaviorStatus.Success;
	}
	,__class__: glaze_engine_actions_SeekTarget
});
var glaze_engine_actions_InRangeTarget = function() {
	glaze_ai_behaviortree_Behavior.call(this);
};
glaze_engine_actions_InRangeTarget.__name__ = ["glaze","engine","actions","InRangeTarget"];
glaze_engine_actions_InRangeTarget.__super__ = glaze_ai_behaviortree_Behavior;
glaze_engine_actions_InRangeTarget.prototype = $extend(glaze_ai_behaviortree_Behavior.prototype,{
	initialize: function(context) {
	}
	,update: function(context) {
		var targetEntity = Reflect.field(context.data,"targetEntity");
		if(targetEntity == null) {
			return glaze_ai_behaviortree_BehaviorStatus.Failure;
		}
		var targetHull = targetEntity.map["PhysicsCollision"];
		var _this = context.entity;
		var entityHull = context.entity.map["PhysicsCollision"];
		var _this1 = targetHull.proxy.aabb;
		var aabb = entityHull.proxy.aabb;
		if(!(Math.abs(_this1.position.x - aabb.position.x) > _this1.extents.x + aabb.extents.x ? false : Math.abs(_this1.position.y - aabb.position.y) > _this1.extents.y + aabb.extents.y ? false : true)) {
			return glaze_ai_behaviortree_BehaviorStatus.Failure;
		}
		return glaze_ai_behaviortree_BehaviorStatus.Success;
	}
	,__class__: glaze_engine_actions_InRangeTarget
});
var glaze_ai_behaviortree_BehaviorTree = function() { };
glaze_ai_behaviortree_BehaviorTree.__name__ = ["glaze","ai","behaviortree","BehaviorTree"];
glaze_ai_behaviortree_BehaviorTree.initialize = function() {
	var _g = 0;
	var _g1 = glaze_ai_behaviortree_BehaviorTree.defaultBehaviours;
	while(_g < _g1.length) {
		var behaviour = _g1[_g];
		++_g;
		glaze_ai_behaviortree_BehaviorTree.registerBehaviour(behaviour);
	}
	var _g2 = 0;
	var _g11 = glaze_ai_behaviortree_BehaviorTree.extendedBehaviours;
	while(_g2 < _g11.length) {
		var behaviour1 = _g11[_g2];
		++_g2;
		glaze_ai_behaviortree_BehaviorTree.registerBehaviour(behaviour1);
	}
};
glaze_ai_behaviortree_BehaviorTree.registerBehaviour = function(behaviour) {
	var registeredName = Type.getClassName(behaviour).split(".").pop().toLowerCase();
	var _this = glaze_ai_behaviortree_BehaviorTree.behaviours;
	if(__map_reserved[registeredName] != null) {
		_this.setReserved(registeredName,behaviour);
	} else {
		_this.h[registeredName] = behaviour;
	}
};
glaze_ai_behaviortree_BehaviorTree.registerScript = function(name,script) {
	var this1 = glaze_ai_behaviortree_BehaviorTree.scripts;
	var value = JSON.parse(script);
	var _this = this1;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,value);
	} else {
		_this.h[name] = value;
	}
};
glaze_ai_behaviortree_BehaviorTree.createScript = function(name) {
	var _this = glaze_ai_behaviortree_BehaviorTree.scripts;
	var script = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(script != null) {
		return glaze_ai_behaviortree_BehaviorTree.behaviourFromDef(script.tree,script.debug);
	}
	return null;
};
glaze_ai_behaviortree_BehaviorTree.behaviourFromDef = function(data,globalDebug) {
	var this1 = glaze_ai_behaviortree_BehaviorTree.behaviours;
	var key = data.type.toLowerCase();
	var _this = this1;
	var classType = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	var instance = Type.createInstance(classType,data.params == null ? [] : data.params);
	instance.description = data.description;
	instance.debugLevel = data.debug != null ? data.debug : 0;
	if(globalDebug > 0 && globalDebug > instance.debugLevel) {
		instance.debugLevel = globalDebug;
	}
	if(data.children != null) {
		var _g = 0;
		var _g1 = data.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			instance.addChild(glaze_ai_behaviortree_BehaviorTree.behaviourFromDef(child,globalDebug));
		}
	}
	return instance;
};
var glaze_ai_behaviortree_branch_Policy = { __ename__ : true, __constructs__ : ["RequireOne","RequireAll"] };
glaze_ai_behaviortree_branch_Policy.RequireOne = ["RequireOne",0];
glaze_ai_behaviortree_branch_Policy.RequireOne.toString = $estr;
glaze_ai_behaviortree_branch_Policy.RequireOne.__enum__ = glaze_ai_behaviortree_branch_Policy;
glaze_ai_behaviortree_branch_Policy.RequireAll = ["RequireAll",1];
glaze_ai_behaviortree_branch_Policy.RequireAll.toString = $estr;
glaze_ai_behaviortree_branch_Policy.RequireAll.__enum__ = glaze_ai_behaviortree_branch_Policy;
var glaze_ai_faction_Faction = function(id,type,defaultRelationshipStatus) {
	if(defaultRelationshipStatus == null) {
		defaultRelationshipStatus = 0;
	}
	this.id = id;
	this.type = type;
	this.relationships = new haxe_ds_StringMap();
	this.defaultRelationship = new glaze_ai_faction_FactionRelationship(null,defaultRelationshipStatus);
};
glaze_ai_faction_Faction.__name__ = ["glaze","ai","faction","Faction"];
glaze_ai_faction_Faction.prototype = {
	addRelation: function(relation) {
		var _this = this.relationships;
		var key = relation.relation.id;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,relation);
		} else {
			_this.h[key] = relation;
		}
	}
	,compareTo: function(other) {
		var _this = this.relationships;
		var key = other.id;
		var result = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(result == null) {
			return this.defaultRelationship;
		} else {
			return result;
		}
	}
	,__class__: glaze_ai_faction_Faction
};
var glaze_ai_faction_FactionRelationship = function(relation,status) {
	this.status = 0;
	this.relation = relation;
	this.status = status;
};
glaze_ai_faction_FactionRelationship.__name__ = ["glaze","ai","faction","FactionRelationship"];
glaze_ai_faction_FactionRelationship.prototype = {
	__class__: glaze_ai_faction_FactionRelationship
};
var glaze_ai_faction_components_Personality = function(faction) {
	this.faction = faction;
};
glaze_ai_faction_components_Personality.__name__ = ["glaze","ai","faction","components","Personality"];
glaze_ai_faction_components_Personality.__interfaces__ = [glaze_eco_core_IComponent];
glaze_ai_faction_components_Personality.prototype = {
	applyDamage: function(sourceEntity,damageType,damageAmount) {
		haxe_Log.trace("Damage from " + sourceEntity.name,{ fileName : "Personality.hx", lineNumber : 11, className : "glaze.ai.faction.components.Personality", methodName : "applyDamage"});
	}
	,clone: function() {
		return new glaze_ai_faction_components_Personality(this.faction);
	}
	,__class__: glaze_ai_faction_components_Personality
};
var glaze_ai_fsm_DefaultStateMachine = function(owner) {
	this.owner = owner;
};
glaze_ai_fsm_DefaultStateMachine.__name__ = ["glaze","ai","fsm","DefaultStateMachine"];
glaze_ai_fsm_DefaultStateMachine.prototype = {
	changeState: function(newState) {
		if(newState == this.currentState) {
			return;
		}
		this.previousState = this.currentState;
		if(this.currentState != null) {
			this.currentState.exit(this.owner);
		}
		this.currentState = newState;
		if(this.currentState != null) {
			this.currentState.enter(this.owner);
		}
	}
	,update: function() {
		if(this.globalState != null) {
			this.globalState.update(this.owner);
		}
		if(this.currentState != null) {
			this.currentState.update(this.owner);
		}
	}
	,__class__: glaze_ai_fsm_DefaultStateMachine
};
var glaze_ai_fsm_IState = function() { };
glaze_ai_fsm_IState.__name__ = ["glaze","ai","fsm","IState"];
glaze_ai_fsm_IState.prototype = {
	__class__: glaze_ai_fsm_IState
};
var glaze_ai_fsm_TestState = function() {
};
glaze_ai_fsm_TestState.__name__ = ["glaze","ai","fsm","TestState"];
glaze_ai_fsm_TestState.__interfaces__ = [glaze_ai_fsm_IState];
glaze_ai_fsm_TestState.prototype = {
	enter: function(entity) {
	}
	,update: function(entity) {
	}
	,exit: function(entity) {
	}
	,message: function(entity,message) {
	}
	,__class__: glaze_ai_fsm_TestState
};
var glaze_ai_fsm_LightStackStateMachine = function() {
	this.stack = [];
};
glaze_ai_fsm_LightStackStateMachine.__name__ = ["glaze","ai","fsm","LightStackStateMachine"];
glaze_ai_fsm_LightStackStateMachine.prototype = {
	update: function(target,delta) {
		var currentState = this.getCurrentState();
		if(currentState != null) {
			currentState(target,this,delta);
		}
	}
	,popState: function() {
		var state = this.stack.pop();
		return state;
	}
	,popAllStates: function() {
		while(this.stack.length > 0) this.popState();
	}
	,pushState: function(state) {
		this.stack.push(state);
	}
	,setState: function(state) {
		this.popState();
		this.pushState(state);
	}
	,resetState: function(state) {
		this.popAllStates();
		this.pushState(state);
	}
	,getCurrentState: function() {
		if(this.stack.length > 0) {
			return this.stack[this.stack.length - 1];
		} else {
			return null;
		}
	}
	,__class__: glaze_ai_fsm_LightStackStateMachine
};
var glaze_ai_fsm_LightStateMachine = function(states,initialState) {
	this.states = states;
	this.currentState = initialState;
	this.previousState = initialState;
};
glaze_ai_fsm_LightStateMachine.__name__ = ["glaze","ai","fsm","LightStateMachine"];
glaze_ai_fsm_LightStateMachine.prototype = {
	changeState: function(owner,newState) {
		if(newState == this.currentState) {
			return this.currentState;
		}
		var _this = this.states;
		if(!(__map_reserved[newState] != null ? _this.existsReserved(newState) : _this.h.hasOwnProperty(newState))) {
			return this.currentState;
		}
		this.previousState = this.currentState;
		this.currentState = newState;
		var _this1 = this.states;
		(__map_reserved[newState] != null ? _this1.getReserved(newState) : _this1.h[newState])(owner);
		return this.currentState;
	}
	,updateState: function(owner) {
		var key = this.currentState;
		var _this = this.states;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = this.currentState;
			var _this1 = this.states;
			(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1])(owner);
		}
	}
	,__class__: glaze_ai_fsm_LightStateMachine
};
var glaze_ai_steering_SteeringAgentParameters = function(maxAcceleration,maxSteeringForcePerStep) {
	this.maxAcceleration = maxAcceleration;
	this.maxSteeringForcePerStep = maxSteeringForcePerStep;
};
glaze_ai_steering_SteeringAgentParameters.__name__ = ["glaze","ai","steering","SteeringAgentParameters"];
glaze_ai_steering_SteeringAgentParameters.prototype = {
	__class__: glaze_ai_steering_SteeringAgentParameters
};
var glaze_ai_steering_SteeringBehavior = function(agentParameters,calculationMethod) {
	if(calculationMethod == null) {
		calculationMethod = 0;
	}
	this.agentParameters = agentParameters;
	this.calculateMethod = calculationMethod;
	this.force = new glaze_geom_Vector2();
	this.behaviorForce = new glaze_geom_Vector2();
	this.behaviors = [];
};
glaze_ai_steering_SteeringBehavior.__name__ = ["glaze","ai","steering","SteeringBehavior"];
glaze_ai_steering_SteeringBehavior.prototype = {
	addBehavior: function(behavior) {
		this.behaviors.push(behavior);
		behavior.steering = this;
		this.hasChanged = true;
	}
	,removeBehaviour: function(behavior) {
		HxOverrides.remove(this.behaviors,behavior);
	}
	,calculate: function(agent) {
		if(this.hasChanged) {
			this.sort();
			this.hasChanged = false;
		}
		this.force.x = 0;
		this.force.y = 0;
		var _g = this.calculateMethod;
		switch(_g) {
		case 0:
			this.runningSum(agent);
			break;
		case 1:
			this.prioritizedDithering();
			break;
		case 2:
			this.wtrsWithPriorization();
			break;
		}
		var f = this.force;
		var _this = agent.forces;
		var s = agent.mass;
		_this.x += f.x * s;
		_this.y += f.y * s;
		agent.canSleep = false;
		agent.motion = 10;
		agent.bounceCount = 0;
		return this.force;
	}
	,prioritizedDithering: function() {
	}
	,wtrsWithPriorization: function() {
	}
	,runningSum: function(agent) {
		var _g = 0;
		var _g1 = this.behaviors;
		while(_g < _g1.length) {
			var behavior = _g1[_g];
			++_g;
			behavior.calculate(agent,this.agentParameters,this.behaviorForce);
			var _this = this.behaviorForce;
			var s = behavior.weight;
			_this.x *= s;
			_this.y *= s;
			var _this1 = this.force;
			var v = this.behaviorForce;
			_this1.x += v.x;
			_this1.y += v.y;
		}
		var _this2 = this.force;
		var max = this.agentParameters.maxAcceleration;
		var l = Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y);
		if(l > max) {
			var s1 = max / l;
			_this2.x *= s1;
			_this2.y *= s1;
		}
	}
	,accumulateForce: function(a_runningTotal,a_forceToAdd) {
		return false;
	}
	,sort: function() {
		this.behaviors.sort($bind(this,this.behaviorsCompare));
	}
	,behaviorsCompare: function(a,b) {
		if(a.priority < b.priority) {
			return -1;
		}
		if(a.priority == b.priority) {
			return 0;
		}
		return 1;
	}
	,__class__: glaze_ai_steering_SteeringBehavior
};
var glaze_ai_steering_SteeringSettings = function() { };
glaze_ai_steering_SteeringSettings.__name__ = ["glaze","ai","steering","SteeringSettings"];
var glaze_ai_steering_behaviors_Behavior = function(weight,priority,probability,active) {
	if(active == null) {
		active = true;
	}
	if(probability == null) {
		probability = 1;
	}
	if(priority == null) {
		priority = 1;
	}
	if(weight == null) {
		weight = 1.0;
	}
	this.weight = weight;
	this.priority = priority;
	this.probability = probability;
	this.active = active;
};
glaze_ai_steering_behaviors_Behavior.__name__ = ["glaze","ai","steering","behaviors","Behavior"];
glaze_ai_steering_behaviors_Behavior.prototype = {
	calculate: function(agent,params,result) {
	}
	,__class__: glaze_ai_steering_behaviors_Behavior
};
var glaze_ai_steering_behaviors_Arrival = function(target,arrivalZone,seekDist) {
	if(seekDist == null) {
		seekDist = 0;
	}
	if(arrivalZone == null) {
		arrivalZone = 0;
	}
	glaze_ai_steering_behaviors_Behavior.call(this,1,70);
	this.target = target;
	this.arrivalZone = arrivalZone;
	this.seekDist = seekDist;
};
glaze_ai_steering_behaviors_Arrival.__name__ = ["glaze","ai","steering","behaviors","Arrival"];
glaze_ai_steering_behaviors_Arrival.calc = function(agent,params,result,target,arrivalZone,seekDist) {
	if(seekDist == null) {
		seekDist = 0;
	}
	if(arrivalZone == null) {
		arrivalZone = 0;
	}
	var dX = target.x - agent.position.x + 0.000001;
	var dY = target.y - agent.position.y + 0.000001;
	var d = dX * dX + dY * dY;
	if(seekDist > 0 && d < seekDist * seekDist) {
		return false;
	}
	var t = Math.sqrt(d);
	var scale = 1.0;
	if(t < arrivalZone) {
		scale = t / arrivalZone;
	}
	result.x = dX / t;
	result.x *= params.maxSteeringForcePerStep;
	result.x -= agent.velocity.x * 0.06;
	result.x *= scale;
	result.y = dY / t;
	result.y *= params.maxSteeringForcePerStep;
	result.y -= agent.velocity.y * 0.06;
	result.x *= scale;
	return true;
};
glaze_ai_steering_behaviors_Arrival.__super__ = glaze_ai_steering_behaviors_Behavior;
glaze_ai_steering_behaviors_Arrival.prototype = $extend(glaze_ai_steering_behaviors_Behavior.prototype,{
	calculate: function(agent,params,result) {
		var target = this.target;
		var arrivalZone = this.arrivalZone;
		var seekDist = this.seekDist;
		var dX = target.x - agent.position.x + 0.000001;
		var dY = target.y - agent.position.y + 0.000001;
		var d = dX * dX + dY * dY;
		if(!(seekDist > 0 && d < seekDist * seekDist)) {
			var t = Math.sqrt(d);
			var scale = 1.0;
			if(t < arrivalZone) {
				scale = t / arrivalZone;
			}
			result.x = dX / t;
			result.x *= params.maxSteeringForcePerStep;
			result.x -= agent.velocity.x * 0.06;
			result.x *= scale;
			result.y = dY / t;
			result.y *= params.maxSteeringForcePerStep;
			result.y -= agent.velocity.y * 0.06;
			result.x *= scale;
		}
	}
	,__class__: glaze_ai_steering_behaviors_Arrival
});
var glaze_ai_steering_behaviors_Feeler = function(angle,length) {
	this.angle = angle;
	this.length = length;
	this.base = new glaze_geom_Vector2();
	this.tip = new glaze_geom_Vector2();
	this.closestIP = new glaze_geom_Vector2();
	this.ip = new glaze_geom_Vector2();
	this.normal = new glaze_geom_Vector2();
};
glaze_ai_steering_behaviors_Feeler.__name__ = ["glaze","ai","steering","behaviors","Feeler"];
glaze_ai_steering_behaviors_Feeler.prototype = {
	Reset: function(unitDirection,position) {
		this.distToClosestIP = Infinity;
		var _this = this.tip;
		_this.x = unitDirection.x;
		_this.y = unitDirection.y;
		var _this1 = this.base;
		_this1.x = position.x;
		_this1.y = position.y;
		if(this.angle != 0) {
			var a = Math.atan2(unitDirection.y,unitDirection.x);
			a += this.angle;
			this.tip.x = Math.cos(a);
			this.tip.y = Math.sin(a);
		}
		var _this2 = this.tip;
		var s = this.length;
		_this2.x *= s;
		_this2.y *= s;
		var _this3 = this.tip;
		var v = this.base;
		_this3.x += v.x;
		_this3.y += v.y;
	}
	,TestSegment: function(a,b,normal) {
		var distToThisIP = glaze_util_Geometry.lineIntersection(this.base,this.tip,a,b,this.ip);
		if(distToThisIP > 0 && distToThisIP < this.distToClosestIP) {
			this.distToClosestIP = distToThisIP;
			var _this = this.closestIP;
			var v = this.ip;
			_this.x = v.x;
			_this.y = v.y;
			var _this1 = this.normal;
			_this1.x = normal.x;
			_this1.y = normal.y;
		}
	}
	,CalculateForce: function(force) {
		if(this.distToClosestIP != Infinity) {
			var sf_y;
			var sf_x;
			var _this = this.tip;
			sf_x = _this.x;
			sf_y = _this.y;
			var v = this.closestIP;
			sf_x -= v.x;
			sf_y -= v.y;
			var _this1 = this.normal;
			var s = Math.sqrt(sf_x * sf_x + sf_y * sf_y);
			_this1.x *= s;
			_this1.y *= s;
			var v1 = this.normal;
			force.x += v1.x;
			force.y += v1.y;
		}
	}
	,__class__: glaze_ai_steering_behaviors_Feeler
};
var glaze_ai_steering_behaviors_Seek = function(target,seekDist) {
	if(seekDist == null) {
		seekDist = 0;
	}
	glaze_ai_steering_behaviors_Behavior.call(this,1,70);
	this.target = target;
	this.seekDist = seekDist;
};
glaze_ai_steering_behaviors_Seek.__name__ = ["glaze","ai","steering","behaviors","Seek"];
glaze_ai_steering_behaviors_Seek.calc = function(agent,params,result,target,seekDist) {
	if(seekDist == null) {
		seekDist = 0;
	}
	var dX = target.x - agent.position.x + 0.000001;
	var dY = target.y - agent.position.y + 0.000001;
	var d = dX * dX + dY * dY;
	if(seekDist > 0 && d < seekDist * seekDist) {
		return false;
	}
	var t = Math.sqrt(d);
	result.x = dX / t;
	result.x *= params.maxSteeringForcePerStep;
	result.x -= agent.velocity.x * 0.06;
	result.y = dY / t;
	result.y *= params.maxSteeringForcePerStep;
	result.y -= agent.velocity.y * 0.06;
	return true;
};
glaze_ai_steering_behaviors_Seek.__super__ = glaze_ai_steering_behaviors_Behavior;
glaze_ai_steering_behaviors_Seek.prototype = $extend(glaze_ai_steering_behaviors_Behavior.prototype,{
	calculate: function(agent,params,result) {
		var target = this.target;
		var seekDist = this.seekDist;
		var dX = target.x - agent.position.x + 0.000001;
		var dY = target.y - agent.position.y + 0.000001;
		var d = dX * dX + dY * dY;
		if(!(seekDist > 0 && d < seekDist * seekDist)) {
			var t = Math.sqrt(d);
			result.x = dX / t;
			result.x *= params.maxSteeringForcePerStep;
			result.x -= agent.velocity.x * 0.06;
			result.y = dY / t;
			result.y *= params.maxSteeringForcePerStep;
			result.y -= agent.velocity.y * 0.06;
		}
	}
	,__class__: glaze_ai_steering_behaviors_Seek
});
var glaze_ai_steering_behaviors_Seperation = function(group,seperationDistance) {
	if(seperationDistance == null) {
		seperationDistance = 10;
	}
	glaze_ai_steering_behaviors_Behavior.call(this,1,140);
	this.group = group;
	this.seperationDistance = seperationDistance;
};
glaze_ai_steering_behaviors_Seperation.__name__ = ["glaze","ai","steering","behaviors","Seperation"];
glaze_ai_steering_behaviors_Seperation.__super__ = glaze_ai_steering_behaviors_Behavior;
glaze_ai_steering_behaviors_Seperation.prototype = $extend(glaze_ai_steering_behaviors_Behavior.prototype,{
	calculate: function(agent,params,result) {
		var count = 0;
		var _g = 0;
		var _g1 = this.group;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var body = entity.map["PhysicsBody"].body;
			if(body != this.agent) {
				var _this = body.position;
				var v = agent.position;
				var dX = _this.x - v.x;
				var dY = _this.y - v.y;
				if(dX * dX + dY * dY < this.seperationDistance * this.seperationDistance) {
					var v1 = body.position;
					result.x += v1.x;
					result.y += v1.y;
					var v2 = agent.position;
					result.x -= v2.x;
					result.y -= v2.y;
					++count;
				}
			}
		}
		if(count > 0) {
			var s = -1 / count;
			result.x *= s;
			result.y *= s;
		}
		var t = Math.sqrt(result.x * result.x + result.y * result.y) + 1e-08;
		result.x /= t;
		result.y /= t;
		var s1 = this.seperationDistance;
		result.x *= s1;
		result.y *= s1;
	}
	,__class__: glaze_ai_steering_behaviors_Seperation
});
var glaze_ai_steering_behaviors_WallAvoidance = function(map,feelerLength) {
	this.closestDist = Infinity;
	this.closestFeeler = null;
	this.searchAABB = new glaze_geom_AABB2();
	this.left = new glaze_geom_Vector2(-1,0);
	this.bottom = new glaze_geom_Vector2(0,1);
	this.right = new glaze_geom_Vector2(1,0);
	this.top = new glaze_geom_Vector2(0,-1);
	this.pB = new glaze_geom_Vector2();
	this.pA = new glaze_geom_Vector2();
	glaze_ai_steering_behaviors_Behavior.call(this,10,10);
	this.map = map;
	this.feelerLength = feelerLength;
	this.ptv1 = new glaze_geom_Vector2();
	this.ptv2 = new glaze_geom_Vector2();
	this.feelers = [];
	this.feelers.push(new glaze_ai_steering_behaviors_Feeler(0,feelerLength));
	this.feelers.push(new glaze_ai_steering_behaviors_Feeler(-0.698131700797731791,feelerLength * 0.5));
	this.feelers.push(new glaze_ai_steering_behaviors_Feeler(0.698131700797731791,feelerLength * 0.5));
	this.lastPos = new glaze_geom_Vector2();
};
glaze_ai_steering_behaviors_WallAvoidance.__name__ = ["glaze","ai","steering","behaviors","WallAvoidance"];
glaze_ai_steering_behaviors_WallAvoidance.__super__ = glaze_ai_steering_behaviors_Behavior;
glaze_ai_steering_behaviors_WallAvoidance.prototype = $extend(glaze_ai_steering_behaviors_Behavior.prototype,{
	checkAABB: function(aabb) {
		var _g = 0;
		var _g1 = this.feelers;
		while(_g < _g1.length) {
			var feeler = _g1[_g];
			++_g;
			var _this = this.pA;
			_this.x = aabb.position.x - aabb.extents.x;
			_this.y = aabb.position.y - aabb.extents.y;
			var _this1 = this.pB;
			_this1.x = aabb.position.x + aabb.extents.x;
			_this1.y = aabb.position.y - aabb.extents.y;
			feeler.TestSegment(this.pA,this.pB,this.top);
			var _this2 = this.pA;
			_this2.x = aabb.position.x + aabb.extents.x;
			_this2.y = aabb.position.y + aabb.extents.y;
			feeler.TestSegment(this.pB,this.pA,this.right);
			var _this3 = this.pB;
			_this3.x = aabb.position.x - aabb.extents.x;
			_this3.y = aabb.position.y + aabb.extents.y;
			feeler.TestSegment(this.pA,this.pB,this.bottom);
			var _this4 = this.pA;
			_this4.x = aabb.position.x - aabb.extents.x;
			_this4.y = aabb.position.y - aabb.extents.y;
			feeler.TestSegment(this.pB,this.pA,this.left);
			if(feeler.distToClosestIP < this.closestDist) {
				this.closestDist = feeler.distToClosestIP;
				this.closestFeeler = feeler;
			}
		}
	}
	,calculate: function(agent,params,result) {
		var _this = this.lastPos;
		var v = agent.position;
		var dX = _this.x - v.x;
		var dY = _this.y - v.y;
		if(dX * dX + dY * dY < 1) {
			return;
		}
		var _this1 = this.lastPos;
		var v1 = agent.position;
		_this1.x = v1.x;
		_this1.y = v1.y;
		var _this2 = agent.velocity;
		var unit = new glaze_geom_Vector2(_this2.x,_this2.y);
		var t = Math.sqrt(unit.x * unit.x + unit.y * unit.y) + 1e-08;
		unit.x /= t;
		unit.y /= t;
		var _g = 0;
		var _g1 = this.feelers;
		while(_g < _g1.length) {
			var feeler = _g1[_g];
			++_g;
			feeler.Reset(unit,agent.position);
		}
		this.closestFeeler = null;
		this.closestDist = Infinity;
		var _this3 = this.searchAABB;
		_this3.t = _this3.l = Infinity;
		_this3.r = _this3.b = -Infinity;
		var _this4 = this.searchAABB;
		var x = agent.position.x;
		var y = agent.position.y;
		if(x < _this4.l) {
			_this4.l = x;
		}
		if(x > _this4.r) {
			_this4.r = x;
		}
		if(y < _this4.t) {
			_this4.t = y;
		}
		if(y > _this4.b) {
			_this4.b = y;
		}
		var _this5 = this.searchAABB;
		var x1 = this.feelers[0].tip.x;
		var y1 = this.feelers[0].tip.y;
		if(x1 < _this5.l) {
			_this5.l = x1;
		}
		if(x1 > _this5.r) {
			_this5.r = x1;
		}
		if(y1 < _this5.t) {
			_this5.t = y1;
		}
		if(y1 > _this5.b) {
			_this5.b = y1;
		}
		var _this6 = this.searchAABB;
		var x2 = this.feelers[1].tip.x;
		var y2 = this.feelers[1].tip.y;
		if(x2 < _this6.l) {
			_this6.l = x2;
		}
		if(x2 > _this6.r) {
			_this6.r = x2;
		}
		if(y2 < _this6.t) {
			_this6.t = y2;
		}
		if(y2 > _this6.b) {
			_this6.b = y2;
		}
		var _this7 = this.searchAABB;
		var x3 = this.feelers[2].tip.x;
		var y3 = this.feelers[2].tip.y;
		if(x3 < _this7.l) {
			_this7.l = x3;
		}
		if(x3 > _this7.r) {
			_this7.r = x3;
		}
		if(y3 < _this7.t) {
			_this7.t = y3;
		}
		if(y3 > _this7.b) {
			_this7.b = y3;
		}
		this.map.iterateCells(this.searchAABB,$bind(this,this.checkAABB));
		if(this.closestFeeler != null) {
			this.closestFeeler.CalculateForce(result);
		}
	}
	,__class__: glaze_ai_steering_behaviors_WallAvoidance
});
var glaze_ai_steering_behaviors_Wander = function(circleRadius,circleDistance,wanderChange) {
	if(wanderChange == null) {
		wanderChange = 4;
	}
	if(circleDistance == null) {
		circleDistance = 1;
	}
	if(circleRadius == null) {
		circleRadius = 8;
	}
	this.displacement = new glaze_geom_Vector2();
	this.circleCenter = new glaze_geom_Vector2();
	glaze_ai_steering_behaviors_Behavior.call(this,1,140);
	this.circleRadius = circleRadius;
	this.circleDistance = circleDistance;
	var max = Math.PI * 2;
	this.wanderAngle = Math.random() * max;
	this.wanderChange = wanderChange;
};
glaze_ai_steering_behaviors_Wander.__name__ = ["glaze","ai","steering","behaviors","Wander"];
glaze_ai_steering_behaviors_Wander.__super__ = glaze_ai_steering_behaviors_Behavior;
glaze_ai_steering_behaviors_Wander.prototype = $extend(glaze_ai_steering_behaviors_Behavior.prototype,{
	calculate: function(agent,params,result) {
		var min = -this.wanderChange;
		var max = this.wanderChange;
		this.wanderAngle += Math.random() * (max - min) + min;
		var _this = this.circleCenter;
		var v = agent.velocity;
		_this.x = v.x;
		_this.y = v.y;
		var _this1 = this.circleCenter;
		var t = Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y) + 1e-08;
		_this1.x /= t;
		_this1.y /= t;
		var _this2 = this.circleCenter;
		var s = this.circleDistance;
		_this2.x *= s;
		_this2.y *= s;
		var _this3 = this.circleCenter;
		var v1 = agent.position;
		_this3.x += v1.x;
		_this3.y += v1.y;
		var h = Math.atan2(agent.velocity.y,agent.velocity.x);
		h += Math.PI / 2;
		var _this4 = this.displacement;
		var y = this.circleRadius * Math.sin(this.wanderAngle + h);
		_this4.x = this.circleRadius * Math.cos(this.wanderAngle + h);
		_this4.y = y;
		var _this5 = this.circleCenter;
		var v2 = this.displacement;
		_this5.x += v2.x;
		_this5.y += v2.y;
		var target = this.circleCenter;
		var dX = target.x - agent.position.x + 0.000001;
		var dY = target.y - agent.position.y + 0.000001;
		var d = dX * dX + dY * dY;
		var t1 = Math.sqrt(d);
		result.x = dX / t1;
		result.x *= params.maxSteeringForcePerStep;
		result.x -= agent.velocity.x * 0.06;
		result.y = dY / t1;
		result.y *= params.maxSteeringForcePerStep;
		result.y -= agent.velocity.y * 0.06;
	}
	,__class__: glaze_ai_steering_behaviors_Wander
});
var glaze_ai_steering_components_Steering = function(behaviors,params,calculationMethod) {
	if(calculationMethod == null) {
		calculationMethod = 0;
	}
	this.behaviors = behaviors;
	this.steeringParameters = params == null ? glaze_ai_steering_SteeringAgentParameters.DEFAULT_STEERING_PARAMS : params;
	this.hasChanged = true;
};
glaze_ai_steering_components_Steering.__name__ = ["glaze","ai","steering","components","Steering"];
glaze_ai_steering_components_Steering.__interfaces__ = [glaze_eco_core_IComponent];
glaze_ai_steering_components_Steering.prototype = {
	addBehavior: function(behavior) {
		this.behaviors.push(behavior);
		this.hasChanged = true;
	}
	,removeBehaviour: function(behavior) {
		HxOverrides.remove(this.behaviors,behavior);
		this.hasChanged = true;
	}
	,getBehaviour: function(type) {
		var _g = 0;
		var _g1 = this.behaviors;
		while(_g < _g1.length) {
			var behavior = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(behavior,type)) {
				return behavior;
			}
		}
		return null;
	}
	,__class__: glaze_ai_steering_components_Steering
};
var glaze_ai_steering_systems_SteeringSystem = function() {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsBody,glaze_ai_steering_components_Steering]);
	this.behaviorForce = new glaze_geom_Vector2();
	this.totalForce = new glaze_geom_Vector2();
};
glaze_ai_steering_systems_SteeringSystem.__name__ = ["glaze","ai","steering","systems","SteeringSystem"];
glaze_ai_steering_systems_SteeringSystem.__super__ = glaze_eco_core_System;
glaze_ai_steering_systems_SteeringSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var body = entity.map["PhysicsBody"].body;
			var steering = entity.map["Steering"];
			if(steering.hasChanged) {
				steering.behaviors.sort($bind(this,this.behaviorsCompare));
				steering.hasChanged = false;
			}
			this.runningSum(steering,body);
			var f = this.totalForce;
			var _this = body.forces;
			var s = body.mass;
			_this.x += f.x * s;
			_this.y += f.y * s;
			body.canSleep = false;
			body.motion = 10;
			body.bounceCount = 0;
		}
	}
	,runningSum: function(steering,agent) {
		var _this = this.totalForce;
		_this.x = 0;
		_this.y = 0;
		var _g = 0;
		var _g1 = steering.behaviors;
		while(_g < _g1.length) {
			var behavior = _g1[_g];
			++_g;
			if(!behavior.active) {
				continue;
			}
			var _this1 = this.behaviorForce;
			_this1.x = 0;
			_this1.y = 0;
			behavior.calculate(agent,steering.steeringParameters,this.behaviorForce);
			var _this2 = this.behaviorForce;
			var s = behavior.weight;
			_this2.x *= s;
			_this2.y *= s;
			var _this3 = this.totalForce;
			var v = this.behaviorForce;
			_this3.x += v.x;
			_this3.y += v.y;
		}
		var _this4 = this.totalForce;
		var max = steering.steeringParameters.maxAcceleration;
		var l = Math.sqrt(_this4.x * _this4.x + _this4.y * _this4.y);
		if(l > max) {
			var s1 = max / l;
			_this4.x *= s1;
			_this4.y *= s1;
		}
	}
	,behaviorsCompare: function(a,b) {
		if(a.priority < b.priority) {
			return -1;
		}
		if(a.priority == b.priority) {
			return 0;
		}
		return 1;
	}
	,__class__: glaze_ai_steering_systems_SteeringSystem
});
var glaze_animation_components_SpriteAnimation = function(frameListId,animations,initialAnimation) {
	this.frameListId = frameListId;
	this.animations = animations;
	this.initialAnimation = initialAnimation;
};
glaze_animation_components_SpriteAnimation.__name__ = ["glaze","animation","components","SpriteAnimation"];
glaze_animation_components_SpriteAnimation.__interfaces__ = [glaze_eco_core_IComponent];
glaze_animation_components_SpriteAnimation.prototype = {
	__class__: glaze_animation_components_SpriteAnimation
};
var glaze_animation_systems_AnimationSystem = function(frameListManager) {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_engine_components_Display,glaze_animation_components_SpriteAnimation]);
	this.frameListManager = frameListManager;
};
glaze_animation_systems_AnimationSystem.__name__ = ["glaze","animation","systems","AnimationSystem"];
glaze_animation_systems_AnimationSystem.__super__ = glaze_eco_core_System;
glaze_animation_systems_AnimationSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var animation = entity.map["SpriteAnimation"];
		var frameList = this.frameListManager.getFrameList(animation.frameListId);
		animation.animationController = new glaze_render_animation_AnimationController(frameList);
		var _g = 0;
		var _g1 = animation.animations;
		while(_g < _g1.length) {
			var sequence = _g1[_g];
			++_g;
			animation.animationController.addAnimation(frameList.getAnimation(sequence).clone(animation.animationController));
		}
		animation.animationController.play(animation.initialAnimation);
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var position = entity.map["Position"];
			var display = entity.map["Display"];
			var animationController = entity.map["SpriteAnimation"].animationController;
			animationController.update(1 / delta);
			var frame = animationController.getFrame();
			frame.updateSprite(display.displayObject,position.direction.x,position.direction.y);
		}
	}
	,__class__: glaze_animation_systems_AnimationSystem
});
var glaze_core_DigitalInput = function() {
	this.keyMap = [];
	var _g = 0;
	while(_g < 255) {
		var i = _g++;
		this.keyMap[i] = 0;
	}
	this.mousePosition = new glaze_geom_Vector2();
	this.mousePreviousPosition = new glaze_geom_Vector2();
	this.mouseOffset = new glaze_geom_Vector2();
	this.frameRef = 2;
};
glaze_core_DigitalInput.__name__ = ["glaze","core","DigitalInput"];
glaze_core_DigitalInput.prototype = {
	InputTarget: function(target,inputCorrection) {
		this.target = target;
		target.addEventListener("keydown",$bind(this,this.KeyDown),false);
		target.addEventListener("keyup",$bind(this,this.KeyUp),false);
		target.addEventListener("mousedown",$bind(this,this.MouseDown),false);
		target.addEventListener("mouseup",$bind(this,this.MouseUp),false);
		target.addEventListener("mousemove",$bind(this,this.MouseMove),false);
		this.inputCorrection = inputCorrection;
	}
	,ViewCorrectedMousePosition: function() {
		var _this = this.mousePosition;
		var pos = new glaze_geom_Vector2(_this.x,_this.y);
		var v = this.mouseOffset;
		pos.x += v.x;
		pos.y += v.y;
		return pos;
	}
	,Update: function(x,y) {
		this.mouseOffset.x = x;
		this.mouseOffset.y = y;
		this.frameRef++;
	}
	,KeyDown: function(event) {
		if(this.keyMap[event.keyCode] == 0) {
			this.keyMap[event.keyCode] = this.frameRef;
		}
		event.preventDefault();
	}
	,KeyUp: function(event) {
		this.keyMap[event.keyCode] = 0;
		event.preventDefault();
	}
	,MouseDown: function(event) {
		this.keyMap[200] = this.frameRef;
		event.preventDefault();
	}
	,MouseUp: function(event) {
		this.keyMap[200] = 0;
		event.preventDefault();
	}
	,MouseMove: function(event) {
		this.mousePreviousPosition.x = this.mousePosition.x;
		this.mousePreviousPosition.y = this.mousePosition.y;
		this.mousePosition.x = event.clientX - this.inputCorrection.x;
		this.mousePosition.y = event.clientY - this.inputCorrection.y;
		event.preventDefault();
	}
	,Pressed: function(keyCode) {
		return this.keyMap[keyCode] > 0;
	}
	,JustPressed: function(keyCode) {
		return this.keyMap[keyCode] == this.frameRef - 1;
	}
	,PressedDuration: function(keyCode) {
		var duration = this.keyMap[keyCode];
		if(duration > 0) {
			return this.frameRef - duration;
		} else {
			return -1;
		}
	}
	,Released: function(keyCode) {
		return this.keyMap[keyCode] == 0;
	}
	,__class__: glaze_core_DigitalInput
};
var glaze_core_GameLoop = function() {
	this.isRunning = false;
	this.rafUpdate = $bind(this,this.update);
};
glaze_core_GameLoop.__name__ = ["glaze","core","GameLoop"];
glaze_core_GameLoop.prototype = {
	update: function(timestamp) {
		this.delta = this.prevAnimationTime == 0 ? 16.6666666766666687 : timestamp - this.prevAnimationTime;
		this.prevAnimationTime = timestamp;
		if(this.updateFunc != null) {
			this.updateFunc(16.6666666766666687,Math.floor(timestamp));
		}
		this.rafID = window.requestAnimationFrame(this.rafUpdate);
		return false;
	}
	,start: function() {
		if(this.isRunning == true) {
			return;
		}
		this.isRunning = true;
		this.prevAnimationTime = 0;
		this.rafID = window.requestAnimationFrame(this.rafUpdate);
	}
	,stop: function() {
		if(this.isRunning == false) {
			return;
		}
		this.isRunning = false;
		window.cancelAnimationFrame(this.rafID);
	}
	,__class__: glaze_core_GameLoop
};
var glaze_debug_DebugEngine = function() { };
glaze_debug_DebugEngine.__name__ = ["glaze","debug","DebugEngine"];
glaze_debug_DebugEngine.GetAllEntities = function() {
	var result = "<table width='100%'>";
	result += "<col style='width:10%'>";
	result += "<col style='width:10%'>";
	result += "<col style='width:60%'>";
	result += "<col style='width:20%'>";
	var _g = 0;
	var _g1 = glaze_debug_DebugEngine.gameEngine.engine.entities;
	while(_g < _g1.length) {
		var entity = _g1[_g];
		++_g;
		var ehtml = "<tr>";
		ehtml += "<td>" + entity.id + "</td>";
		ehtml += "<td>" + entity.referenceCount + "</td>";
		ehtml += "<td>" + entity.name + "</td>";
		ehtml += "<td><button onclick='glaze.debug.DebugEngine.DumpEntity(" + entity.id + ");'>Inspect</button></td>";
		ehtml += "</tr>";
		result += ehtml;
	}
	result += "</table>";
	return result;
};
glaze_debug_DebugEngine.GetAllSystems = function() {
	var result = "<table width='100%'>";
	result += "<col style='width:10%'>";
	result += "<col style='width:70%'>";
	result += "<col style='width:20%'>";
	var _g = 0;
	var _g1 = glaze_debug_DebugEngine.gameEngine.engine.systems;
	while(_g < _g1.length) {
		var system = _g1[_g];
		++_g;
		var name = Type.getClassName(system == null ? null : js_Boot.getClass(system));
		var ehtml = "<tr>";
		ehtml += "<td>" + name.split(".").pop() + "</td>";
		ehtml += "<td></td>";
		ehtml += "<td><button onclick='glaze.debug.DebugEngine.DumpSystem(\"" + name + "\");'>Inspect</button></td>";
		ehtml += "</tr>";
		result += ehtml;
	}
	result += "</table>";
	return result;
};
glaze_debug_DebugEngine.DumpEntity = $hx_exports["glaze"]["debug"]["DebugEngine"]["DumpEntity"] = function(id) {
	var _g = 0;
	var _g1 = glaze_debug_DebugEngine.gameEngine.engine.entities;
	while(_g < _g1.length) {
		var entity = _g1[_g];
		++_g;
		if(entity.id == id) {
			window.console.dir(entity);
			return;
		}
	}
};
glaze_debug_DebugEngine.DumpSystem = $hx_exports["glaze"]["debug"]["DebugEngine"]["DumpSystem"] = function(className) {
	debugger;
	var _this = glaze_debug_DebugEngine.gameEngine.engine.systemMap;
	var tmp = __map_reserved[className] != null ? _this.getReserved(className) : _this.h[className];
	window.console.dir(tmp);
};
glaze_debug_DebugEngine.DrawParticle = function(x,y,size,r,g,b) {
	glaze_debug_DebugEngine.particleEngine.EmitParticle(x,y,0,0,0,0,17,1,false,true,null,size,255,r,g,b);
};
var glaze_ds_Array2D = function(gridWidth,gridHeight,cellSize) {
	this.initalize(gridWidth,gridHeight,cellSize);
};
glaze_ds_Array2D.__name__ = ["glaze","ds","Array2D"];
glaze_ds_Array2D.prototype = {
	initalize: function(gridWidth,gridHeight,cellSize) {
		this.gridWidth = gridWidth;
		this.gridHeight = gridHeight;
		this.cellSize = cellSize;
		this.invCellSize = 1 / cellSize;
		this.data = [];
	}
	,get: function(x,y) {
		return this.data[y * this.gridWidth + x];
	}
	,getSafe: function(x,y) {
		if(x >= this.gridWidth || y >= this.gridHeight || x < 0 || y < 0) {
			return null;
		} else {
			return this.data[y * this.gridWidth + x];
		}
	}
	,set: function(x,y,value) {
		this.data[y * this.gridWidth + x] = value;
	}
	,Index: function(value) {
		return value * this.invCellSize | 0;
	}
	,Width: function() {
		return this.gridWidth * this.cellSize;
	}
	,Height: function() {
		return this.gridHeight * this.cellSize;
	}
	,__class__: glaze_ds_Array2D
};
var glaze_ds_Bytes2D = function(width,height,cellSize,bytesPerCell,data) {
	this.initalize(width,height,cellSize,bytesPerCell,data);
};
glaze_ds_Bytes2D.__name__ = ["glaze","ds","Bytes2D"];
glaze_ds_Bytes2D.uncompressData = function(str,compressed) {
	if(compressed == null) {
		compressed = true;
	}
	var mapbytes = haxe_crypto_Base64.decode(str);
	if(compressed) {
		mapbytes = haxe_zip_Uncompress.run(mapbytes);
	}
	return mapbytes;
};
glaze_ds_Bytes2D.prototype = {
	initalize: function(width,height,cellSize,bytesPerCell,data) {
		this.width = width;
		this.height = height;
		this.internalWidth = width * bytesPerCell;
		this.cellSize = cellSize;
		this.invCellSize = 1 / cellSize;
		this.bytesPerCell = bytesPerCell;
		if(data == null) {
			this.data = new haxe_io_Bytes(new ArrayBuffer(width * height * bytesPerCell));
		} else {
			this.data = data;
		}
		this.bytesData = this.data.b.bufferValue;
	}
	,get: function(x,y,offset) {
		return this.data.b[y * this.internalWidth + x * this.bytesPerCell + offset];
	}
	,set: function(x,y,offset,value) {
		this.data.b[y * this.internalWidth + x * this.bytesPerCell + offset] = value & 255;
	}
	,getReal: function(x,y,offset) {
		return this.data.b[(y * this.invCellSize | 0) * this.internalWidth + (x * this.invCellSize | 0) * this.bytesPerCell + offset];
	}
	,Index: function(value) {
		return value * this.invCellSize | 0;
	}
	,__class__: glaze_ds_Bytes2D
};
var glaze_ds_DLLNode = function() { };
glaze_ds_DLLNode.__name__ = ["glaze","ds","DLLNode"];
glaze_ds_DLLNode.prototype = {
	__class__: glaze_ds_DLLNode
};
var glaze_ds_DLLIterator = function(dll) {
	this.dll = dll;
	this.reset();
};
glaze_ds_DLLIterator.__name__ = ["glaze","ds","DLLIterator"];
glaze_ds_DLLIterator.prototype = {
	reset: function() {
		this.pointer = this.dll.head;
	}
	,hasNext: function() {
		return this.pointer != null;
	}
	,next: function() {
		var result = this.pointer;
		this.pointer = this.pointer.next;
		return result;
	}
	,__class__: glaze_ds_DLLIterator
};
var glaze_ds_DLL = function() {
	this.length = 0;
	this._iterator = new glaze_ds_DLLIterator(this);
};
glaze_ds_DLL.__name__ = ["glaze","ds","DLL"];
glaze_ds_DLL.prototype = {
	iterator: function() {
		this._iterator.reset();
		return this._iterator;
	}
	,insertAfter: function(node,newNode) {
		this.length++;
		newNode.prev = node;
		newNode.next = node.next;
		if(node.next == null) {
			this.tail = newNode;
		} else {
			node.next.prev = newNode;
		}
		node.next = newNode;
	}
	,insertBefore: function(node,newNode) {
		this.length++;
		newNode.prev = node.prev;
		newNode.next = node;
		if(node.prev == null) {
			this.head = newNode;
		} else {
			node.prev.next = newNode;
		}
		node.prev = newNode;
	}
	,insertBeginning: function(newNode) {
		if(this.head == null) {
			this.length++;
			this.head = newNode;
			this.tail = newNode;
			newNode.prev = null;
			newNode.next = null;
		} else {
			var node = this.head;
			this.length++;
			newNode.prev = node.prev;
			newNode.next = node;
			if(node.prev == null) {
				this.head = newNode;
			} else {
				node.prev.next = newNode;
			}
			node.prev = newNode;
		}
	}
	,insertEnd: function(newNode) {
		if(this.tail == null) {
			if(this.head == null) {
				this.length++;
				this.head = newNode;
				this.tail = newNode;
				newNode.prev = null;
				newNode.next = null;
			} else {
				var node = this.head;
				this.length++;
				newNode.prev = node.prev;
				newNode.next = node;
				if(node.prev == null) {
					this.head = newNode;
				} else {
					node.prev.next = newNode;
				}
				node.prev = newNode;
			}
		} else {
			var node1 = this.tail;
			this.length++;
			newNode.prev = node1;
			newNode.next = node1.next;
			if(node1.next == null) {
				this.tail = newNode;
			} else {
				node1.next.prev = newNode;
			}
			node1.next = newNode;
		}
	}
	,remove: function(node) {
		this.length--;
		var next = node.next;
		if(node.prev == null) {
			this.head = node.next;
		} else {
			node.prev.next = node.next;
		}
		if(node.next == null) {
			this.tail = node.prev;
		} else {
			node.next.prev = node.prev;
		}
		node.prev = node.next = null;
		return node;
	}
	,sort: function(comparitor) {
		if(this.length == 0) {
			return;
		}
		var h = this.head;
		var n = h.next;
		while(n != null) {
			var m = n.next;
			var p = n.prev;
			if(comparitor(n,p) < 0) {
				var i = p;
				while(i.prev != null) if(comparitor(n,i.prev) < 0) {
					i = i.prev;
				} else {
					break;
				}
				if(m != null) {
					p.next = m;
					m.prev = p;
				} else {
					p.next = null;
					this.tail = p;
				}
				if(i == h) {
					n.prev = null;
					n.next = i;
					i.prev = n;
					h = n;
				} else {
					n.prev = i.prev;
					i.prev.next = n;
					n.next = i;
					i.prev = n;
				}
			}
			n = m;
		}
		this.head = h;
	}
	,__class__: glaze_ds_DLL
};
var glaze_ds__$DynamicObject_DynamicObject_$Impl_$ = {};
glaze_ds__$DynamicObject_DynamicObject_$Impl_$.__name__ = ["glaze","ds","_DynamicObject","DynamicObject_Impl_"];
glaze_ds__$DynamicObject_DynamicObject_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
glaze_ds__$DynamicObject_DynamicObject_$Impl_$.set = function(this1,key,value) {
	this1[key] = value;
};
glaze_ds__$DynamicObject_DynamicObject_$Impl_$.get = function(this1,key) {
	return this1[key];
};
glaze_ds__$DynamicObject_DynamicObject_$Impl_$.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
glaze_ds__$DynamicObject_DynamicObject_$Impl_$.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
glaze_ds__$DynamicObject_DynamicObject_$Impl_$.keys = function(this1) {
	return Reflect.fields(this1);
};
var glaze_ds_EntityCollection = function() {
	this.entities = new glaze_ds_DLL();
};
glaze_ds_EntityCollection.__name__ = ["glaze","ds","EntityCollection"];
glaze_ds_EntityCollection.prototype = {
	get_length: function() {
		return this.entities.length;
	}
	,addItem: function(entity) {
		var item;
		if(glaze_ds_EntityCollection.itempool.length == 0) {
			item = new glaze_ds_EntityCollectionItem();
		} else {
			var _this = glaze_ds_EntityCollection.itempool;
			var node = glaze_ds_EntityCollection.itempool.tail;
			_this.length--;
			var next = node.next;
			if(node.prev == null) {
				_this.head = node.next;
			} else {
				node.prev.next = node.next;
			}
			if(node.next == null) {
				_this.tail = node.prev;
			} else {
				node.next.prev = node.prev;
			}
			node.prev = node.next = null;
			item = node;
		}
		item.entity = entity;
		var _this1 = this.entities;
		if(_this1.head == null) {
			_this1.length++;
			_this1.head = item;
			_this1.tail = item;
			item.prev = null;
			item.next = null;
		} else {
			var node1 = _this1.head;
			_this1.length++;
			item.prev = node1.prev;
			item.next = node1;
			if(node1.prev == null) {
				_this1.head = item;
			} else {
				node1.prev.next = item;
			}
			node1.prev = item;
		}
		return item;
	}
	,getItem: function(entity) {
		var item = this.entities.head;
		while(item != null) if(item.entity == entity) {
			return item;
		}
		return null;
	}
	,removeItem: function(item) {
		item.reset();
		var _this = glaze_ds_EntityCollection.itempool;
		if(_this.tail == null) {
			if(_this.head == null) {
				_this.length++;
				_this.head = item;
				_this.tail = item;
				item.prev = null;
				item.next = null;
			} else {
				var node = _this.head;
				_this.length++;
				item.prev = node.prev;
				item.next = node;
				if(node.prev == null) {
					_this.head = item;
				} else {
					node.prev.next = item;
				}
				node.prev = item;
			}
		} else {
			var node1 = _this.tail;
			_this.length++;
			item.prev = node1;
			item.next = node1.next;
			if(node1.next == null) {
				_this.tail = item;
			} else {
				node1.next.prev = item;
			}
			node1.next = item;
		}
	}
	,filter: function(filterFunc) {
		var eci = this.entities.head;
		while(eci != null) if(filterFunc(eci) == false) {
			var next = eci.next;
			var _this = this.entities;
			_this.length--;
			var next1 = eci.next;
			if(eci.prev == null) {
				_this.head = eci.next;
			} else {
				eci.prev.next = eci.next;
			}
			if(eci.next == null) {
				_this.tail = eci.prev;
			} else {
				eci.next.prev = eci.prev;
			}
			eci.prev = eci.next = null;
			eci = next;
		} else {
			eci = eci.next;
		}
	}
	,clear: function() {
		while(this.entities.length > 0) {
			var _this = this.entities;
			var node = this.entities.tail;
			_this.length--;
			var next = node.next;
			if(node.prev == null) {
				_this.head = node.next;
			} else {
				node.prev.next = node.next;
			}
			if(node.next == null) {
				_this.tail = node.prev;
			} else {
				node.next.prev = node.prev;
			}
			node.prev = node.next = null;
			var item = node;
			item.reset();
			var _this1 = glaze_ds_EntityCollection.itempool;
			if(_this1.tail == null) {
				if(_this1.head == null) {
					_this1.length++;
					_this1.head = item;
					_this1.tail = item;
					item.prev = null;
					item.next = null;
				} else {
					var node1 = _this1.head;
					_this1.length++;
					item.prev = node1.prev;
					item.next = node1;
					if(node1.prev == null) {
						_this1.head = item;
					} else {
						node1.prev.next = item;
					}
					node1.prev = item;
				}
			} else {
				var node2 = _this1.tail;
				_this1.length++;
				item.prev = node2;
				item.next = node2.next;
				if(node2.next == null) {
					_this1.tail = item;
				} else {
					node2.next.prev = item;
				}
				node2.next = item;
			}
		}
	}
	,__class__: glaze_ds_EntityCollection
	,__properties__: {get_length:"get_length"}
};
var glaze_ds_EntityCollectionItem = function() {
};
glaze_ds_EntityCollectionItem.__name__ = ["glaze","ds","EntityCollectionItem"];
glaze_ds_EntityCollectionItem.__interfaces__ = [glaze_ds_DLLNode];
glaze_ds_EntityCollectionItem.SortClosestFirst = function(a,b) {
	return a.distance - b.distance;
};
glaze_ds_EntityCollectionItem.prototype = {
	reset: function() {
	}
	,__class__: glaze_ds_EntityCollectionItem
};
var glaze_ds_Queue = function(length) {
	this.length = length;
	this.data = [];
};
glaze_ds_Queue.__name__ = ["glaze","ds","Queue"];
glaze_ds_Queue.prototype = {
	enqueue: function(item) {
		if(this.isFull()) {
			return false;
		}
		this.data.push(item);
		return true;
	}
	,dequeue: function() {
		return this.data.shift();
	}
	,isFull: function() {
		return this.data.length == this.length;
	}
	,__class__: glaze_ds_Queue
};
var glaze_ds_TypedArray2D = function(width,height,buffer) {
	this.w = width;
	this.h = height;
	if(buffer == null) {
		this.buffer = new ArrayBuffer(this.w * this.h * 4);
	} else {
		this.buffer = buffer;
	}
	this.data32 = new Uint32Array(this.buffer);
	this.data8 = new Uint8Array(this.buffer);
};
glaze_ds_TypedArray2D.__name__ = ["glaze","ds","TypedArray2D"];
glaze_ds_TypedArray2D.prototype = {
	get: function(x,y) {
		return this.data32[y * this.w + x];
	}
	,set: function(x,y,v) {
		this.data32[y * this.w + x] = v;
	}
	,getIndex: function(x,y) {
		return y * this.w + x;
	}
	,__class__: glaze_ds_TypedArray2D
};
var glaze_eco_core_Engine = function() {
	this.entities = [];
	this.entityMap = new haxe_ds_StringMap();
	this.phases = [];
	this.systems = [];
	this.systemMap = new haxe_ds_StringMap();
	this.componentAddedToEntity = new glaze_signals_Signal2();
	this.componentRemovedFromEntity = new glaze_signals_Signal2();
	this.systemAdded = new glaze_signals_Signal1();
	this.systemAdded.add($bind(this,this.onSystemAdded));
	this.viewManager = new glaze_eco_core_ViewManager(this);
	this.idCount = 0;
	this.config = { };
};
glaze_eco_core_Engine.__name__ = ["glaze","eco","core","Engine"];
glaze_eco_core_Engine.prototype = {
	createEntity: function(components,name) {
		var entity = new glaze_eco_core_Entity(this,components,name);
		entity.id = this.idCount++;
		this.entities.push(entity);
		return entity;
	}
	,createEntityReference: function(entity) {
		var _this = this.entityMap;
		var key = entity.id == null ? "null" : "" + entity.id;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,entity);
		} else {
			_this.h[key] = entity;
		}
		var f = ($_=this.entityMap,$bind($_,$_.get));
		var a1 = entity.id == null ? "null" : "" + entity.id;
		return function() {
			return f(a1);
		};
	}
	,addEntity: function(entity) {
		entity.id = this.idCount++;
		this.entities.push(entity);
	}
	,destroyEntity: function(entity) {
		HxOverrides.remove(this.entities,entity);
		this.entityMap.remove(entity.id == null ? "null" : "" + entity.id);
	}
	,createPhase: function(msPerUpdate) {
		if(msPerUpdate == null) {
			msPerUpdate = 0;
		}
		var phase = new glaze_eco_core_Phase(this,msPerUpdate);
		this.phases.push(phase);
		return phase;
	}
	,onSystemAdded: function(system) {
		this.systems.push(system);
		var _this = this.systemMap;
		var key = Type.getClassName(system == null ? null : js_Boot.getClass(system));
		if(__map_reserved[key] != null) {
			_this.setReserved(key,system);
		} else {
			_this.h[key] = system;
		}
	}
	,getSystem: function(systemClass) {
		var _this = this.systemMap;
		var key = Type.getClassName(systemClass);
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,update: function(timestamp,delta) {
		this.timestamp = timestamp;
		var _g = 0;
		var _g1 = this.phases;
		while(_g < _g1.length) {
			var phase = _g1[_g];
			++_g;
			phase.update(timestamp,delta);
		}
	}
	,__class__: glaze_eco_core_Engine
};
var glaze_eco_core_ENTITY_$LIFECYCLE = { __ename__ : true, __constructs__ : ["INVALID","RUNNING","STOPPING","STOPPED"] };
glaze_eco_core_ENTITY_$LIFECYCLE.INVALID = ["INVALID",0];
glaze_eco_core_ENTITY_$LIFECYCLE.INVALID.toString = $estr;
glaze_eco_core_ENTITY_$LIFECYCLE.INVALID.__enum__ = glaze_eco_core_ENTITY_$LIFECYCLE;
glaze_eco_core_ENTITY_$LIFECYCLE.RUNNING = ["RUNNING",1];
glaze_eco_core_ENTITY_$LIFECYCLE.RUNNING.toString = $estr;
glaze_eco_core_ENTITY_$LIFECYCLE.RUNNING.__enum__ = glaze_eco_core_ENTITY_$LIFECYCLE;
glaze_eco_core_ENTITY_$LIFECYCLE.STOPPING = ["STOPPING",2];
glaze_eco_core_ENTITY_$LIFECYCLE.STOPPING.toString = $estr;
glaze_eco_core_ENTITY_$LIFECYCLE.STOPPING.__enum__ = glaze_eco_core_ENTITY_$LIFECYCLE;
glaze_eco_core_ENTITY_$LIFECYCLE.STOPPED = ["STOPPED",3];
glaze_eco_core_ENTITY_$LIFECYCLE.STOPPED.toString = $estr;
glaze_eco_core_ENTITY_$LIFECYCLE.STOPPED.__enum__ = glaze_eco_core_ENTITY_$LIFECYCLE;
var glaze_eco_core_Entity = function(engine,components,name) {
	this.referenceCount = 0;
	this.messages = new glaze_signals_Signal3();
	this.children = [];
	this.map = { };
	this.id = 0;
	this.engine = engine;
	this.name = name;
	if(components != null) {
		this.addManyComponent(components);
	}
};
glaze_eco_core_Entity.__name__ = ["glaze","eco","core","Entity"];
glaze_eco_core_Entity.GET_NAME_FROM_COMPONENT = function(component) {
	return Reflect.field(component == null ? null : js_Boot.getClass(component),"NAME");
};
glaze_eco_core_Entity.GET_ID_FROM_COMPONENT = function(component) {
	return Reflect.field(component == null ? null : js_Boot.getClass(component),"ID");
};
glaze_eco_core_Entity.prototype = {
	addComponent: function(component) {
		var name = Reflect.field(component == null ? null : js_Boot.getClass(component),"NAME");
		if(this.map.name != null) {
			throw new js__$Boot_HaxeError("ADDING EXITING COMPONENT TYPE!");
		}
		this.map[name] = component;
		if(this.engine != null) {
			this.engine.componentAddedToEntity.dispatch(this,component);
		}
	}
	,addManyComponent: function(components) {
		var _g = 0;
		while(_g < components.length) {
			var component = components[_g];
			++_g;
			this.addComponent(component);
		}
	}
	,removeComponent: function(component) {
		var name = Reflect.field(component == null ? null : js_Boot.getClass(component),"NAME");
		if(this.map[name] != null) {
			if(this.engine != null) {
				this.engine.componentRemovedFromEntity.dispatch(this,component);
			}
			this.map[name] = null;
		}
	}
	,removeAllComponents: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.map);
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(this.engine != null) {
				this.engine.componentRemovedFromEntity.dispatch(this,Reflect.field(this.map,n));
			}
			this.map[this.name] = null;
		}
	}
	,addChildEntity: function(child) {
		child.parent = this;
		this.children.push(child);
	}
	,get: function(key) {
		return this.map[key];
	}
	,exists: function(key) {
		return this.map[key] != null;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.destroy();
		}
		this.messages.dispatch(this,"destroy",null);
		this.messages.removeAll();
		this.removeAllComponents();
		if(this.engine != null) {
			this.engine.destroyEntity(this);
		}
	}
	,isActive: function() {
		return this.engine != null;
	}
	,__class__: glaze_eco_core_Entity
};
var glaze_eco_core_Phase = function(engine,msPerUpdate,maxAccumulatedDelta) {
	if(maxAccumulatedDelta == null) {
		maxAccumulatedDelta = 0;
	}
	if(msPerUpdate == null) {
		msPerUpdate = 0;
	}
	this.systems = [];
	this.engine = engine;
	this.msPerUpdate = msPerUpdate;
	this.enabled = true;
	this.accumulator = 0;
	this.updateCount = 0;
};
glaze_eco_core_Phase.__name__ = ["glaze","eco","core","Phase"];
glaze_eco_core_Phase.prototype = {
	update: function(timestamp,delta) {
		if(!this.enabled) {
			return;
		}
		if(this.msPerUpdate != 0) {
			this.accumulator += delta;
			while(this.accumulator > this.msPerUpdate) {
				this.updateCount++;
				this.accumulator -= this.msPerUpdate;
				var _g = 0;
				var _g1 = this.systems;
				while(_g < _g1.length) {
					var system = _g1[_g];
					++_g;
					if(system.enabled == system.hasUpdate == true) {
						system.update(timestamp,this.msPerUpdate);
					}
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.systems;
			while(_g2 < _g11.length) {
				var system1 = _g11[_g2];
				++_g2;
				if(system1.enabled == system1.hasUpdate == true) {
					system1.update(timestamp,delta);
				}
			}
		}
	}
	,addSystem: function(system) {
		system.onAdded(this.engine);
		this.systems.push(system);
		this.engine.systemAdded.dispatch(system);
	}
	,addSystemAfter: function(system,after) {
		var i = this.systems.indexOf(after);
		if(i < 0) {
			return false;
		}
		system.onAdded(this.engine);
		this.systems.splice(i + 1,0,system);
		this.engine.systemAdded.dispatch(system);
		return true;
	}
	,addSystemBefore: function(system,before) {
		var i = this.systems.indexOf(before);
		if(i < 0) {
			return false;
		}
		system.onAdded(this.engine);
		this.systems.splice(i,0,system);
		this.engine.systemAdded.dispatch(system);
		return true;
	}
	,__class__: glaze_eco_core_Phase
};
var glaze_eco_core_View = function(components) {
	this.entityRemoved = new glaze_signals_Signal1();
	this.entityAdded = new glaze_signals_Signal1();
	this.registeredComponents = null;
	this.entities = [];
	this.registeredComponents = components;
};
glaze_eco_core_View.__name__ = ["glaze","eco","core","View"];
glaze_eco_core_View.prototype = {
	addEntity: function(entity) {
		this.entities.push(entity);
		entity.referenceCount++;
		this.entityAdded.dispatch(entity);
	}
	,removeEntity: function(entity) {
		if(HxOverrides.remove(this.entities,entity)) {
			entity.referenceCount--;
			this.entityRemoved.dispatch(entity);
		}
	}
	,__class__: glaze_eco_core_View
};
var glaze_eco_core_ViewManager = function(engine) {
	this.componentViewMap = new haxe_ds_StringMap();
	this.views = [];
	this.engine = engine;
	engine.componentAddedToEntity.add($bind(this,this.matchViews));
	engine.componentRemovedFromEntity.add($bind(this,this.unmatchViews));
	engine.systemAdded.add($bind(this,this.injectView));
};
glaze_eco_core_ViewManager.__name__ = ["glaze","eco","core","ViewManager"];
glaze_eco_core_ViewManager.prototype = {
	getView: function(components,forceUpdate) {
		if(forceUpdate == null) {
			forceUpdate = false;
		}
		var _g = 0;
		var _g1 = this.views;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			if(this.isComponentArrayEqual(view.registeredComponents,components)) {
				return view;
			}
		}
		var view1 = new glaze_eco_core_View(components);
		this.views.push(view1);
		var _g2 = 0;
		while(_g2 < components.length) {
			var component = components[_g2];
			++_g2;
			var name = Reflect.field(component,"NAME");
			var _this = this.componentViewMap;
			if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
				var this1 = this.componentViewMap;
				var value = [];
				var _this1 = this1;
				if(__map_reserved[name] != null) {
					_this1.setReserved(name,value);
				} else {
					_this1.h[name] = value;
				}
			}
			var _this2 = this.componentViewMap;
			(__map_reserved[name] != null ? _this2.getReserved(name) : _this2.h[name]).push(view1);
		}
		if(forceUpdate == true) {
			this.matchAllEntitiesToView(this.engine.entities,view1);
		}
		return view1;
	}
	,releaseView: function(view) {
	}
	,isComponentArrayEqual: function(a,b) {
		if(a.length != b.length) {
			return false;
		}
		var _g = 0;
		while(_g < a.length) {
			var component = a[_g];
			++_g;
			if(b.indexOf(component) < 0) {
				return false;
			}
		}
		return true;
	}
	,entityMatchesView: function(entity,viewSignature) {
		var count = viewSignature.length;
		var _g = 0;
		while(_g < viewSignature.length) {
			var componentClass = viewSignature[_g];
			++_g;
			var key = Reflect.field(componentClass,"NAME");
			if(entity.map[key] != null) {
				if(--count == 0) {
					return true;
				}
			}
		}
		return false;
	}
	,matchViews: function(entity,component) {
		var name = Reflect.field(component == null ? null : js_Boot.getClass(component),"NAME");
		var _this = this.componentViewMap;
		var views = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(views != null) {
			var _g = 0;
			while(_g < views.length) {
				var view = views[_g];
				++_g;
				if(this.entityMatchesView(entity,view.registeredComponents)) {
					view.addEntity(entity);
				}
			}
		}
	}
	,matchAllEntitiesToView: function(entities,view) {
		var _g = 0;
		while(_g < entities.length) {
			var entity = entities[_g];
			++_g;
			if(this.entityMatchesView(entity,view.registeredComponents)) {
				view.addEntity(entity);
			}
		}
	}
	,unmatchViews: function(entity,component) {
		var name = Reflect.field(component == null ? null : js_Boot.getClass(component),"NAME");
		var _this = this.componentViewMap;
		var views = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(views != null) {
			var _g = 0;
			while(_g < views.length) {
				var view = views[_g];
				++_g;
				view.removeEntity(entity);
			}
		}
	}
	,injectView: function(system) {
		var view = this.getView(system.registeredComponents);
		view.entityAdded.add($bind(system,system.entityAdded));
		view.entityRemoved.add($bind(system,system.entityRemoved));
		system.view = view;
		if(system.view.entities.length == 0) {
			this.matchAllEntitiesToView(this.engine.entities,view);
		}
	}
	,__class__: glaze_eco_core_ViewManager
};
var glaze_engine_actions_FilterSupport = function(engine) {
	this.broadphase = engine.getSystem(glaze_physics_systems_PhysicsCollisionSystem).broadphase;
	this.ray = new glaze_physics_collision_Ray();
};
glaze_engine_actions_FilterSupport.__name__ = ["glaze","engine","actions","FilterSupport"];
glaze_engine_actions_FilterSupport.prototype = {
	FilterStaticItems: function(eci) {
		var _this = eci.entity;
		return eci.entity.map["Fixed"] == null;
	}
	,FilterVisibleAgainstMap: function(eci) {
		var _this = eci.entity;
		this.ray.initalize(eci.perspective,eci.entity.map["Position"].coords,0,null);
		this.broadphase.CastRay(this.ray,null,false,false);
		return !this.ray.hit;
	}
	,__class__: glaze_engine_actions_FilterSupport
};
var glaze_engine_components_Active = function() {
};
glaze_engine_components_Active.__name__ = ["glaze","engine","components","Active"];
glaze_engine_components_Active.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Active.prototype = {
	__class__: glaze_engine_components_Active
};
var glaze_engine_components_Age = function(ttl,onExpire) {
	this.ttl = ttl;
	this.age = 0;
	this.onExpire = onExpire;
};
glaze_engine_components_Age.__name__ = ["glaze","engine","components","Age"];
glaze_engine_components_Age.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Age.prototype = {
	growOlder: function(tick) {
		this.age += tick;
		return this.age > this.ttl;
	}
	,isExpired: function() {
		return this.age > this.ttl;
	}
	,reset: function() {
		this.age = 0;
	}
	,__class__: glaze_engine_components_Age
};
var glaze_engine_components_CollidableSwitch = function(isOn,delay,triggerChannels) {
	this.isOn = isOn;
	this.delay = delay;
	this.triggerChannels = triggerChannels;
	this.lastTrigger = -this.delay;
};
glaze_engine_components_CollidableSwitch.__name__ = ["glaze","engine","components","CollidableSwitch"];
glaze_engine_components_CollidableSwitch.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_CollidableSwitch.prototype = {
	trigger: function(timestamp) {
		if(timestamp - this.lastTrigger < this.delay) {
			return false;
		}
		this.isOn = !this.isOn;
		this.lastTrigger = timestamp;
		return true;
	}
	,__class__: glaze_engine_components_CollidableSwitch
};
var glaze_engine_components_CollisionCounter = function(count,onCount,ignoreStatic) {
	if(ignoreStatic == null) {
		ignoreStatic = true;
	}
	this.count = count;
	this.onCount = onCount;
	this.ignoreStatic = ignoreStatic;
};
glaze_engine_components_CollisionCounter.__name__ = ["glaze","engine","components","CollisionCounter"];
glaze_engine_components_CollisionCounter.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_CollisionCounter.prototype = {
	__class__: glaze_engine_components_CollisionCounter
};
var glaze_engine_components_Display = function(frameListId,initialFrameId) {
	this.frameListId = frameListId;
	this.initialFrameId = initialFrameId;
};
glaze_engine_components_Display.__name__ = ["glaze","engine","components","Display"];
glaze_engine_components_Display.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Display.prototype = {
	set_frame: function(value) {
		this.frame = value;
		if(this.displayObject != null) {
			this.frame.updateSprite(this.displayObject);
		}
		return value;
	}
	,setFrameId: function(id) {
		this.set_frame(this.frameList.getFrame(id));
	}
	,__class__: glaze_engine_components_Display
	,__properties__: {set_frame:"set_frame"}
};
var glaze_engine_components_ECState = function(states,initalState,order) {
	this.state = new glaze_ai_fsm_LightStateMachine(states,initalState);
};
glaze_engine_components_ECState.__name__ = ["glaze","engine","components","ECState"];
glaze_engine_components_ECState.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_ECState.prototype = {
	__class__: glaze_engine_components_ECState
};
var glaze_engine_components_ForceData = function(direction,minForce,maxForce,minDuration,maxDuration) {
	this.direction = new glaze_geom_Vector2();
	this.direction.setUnitRotation(direction - 90);
	this.minForce = minForce;
	this.maxForce = maxForce;
	this.minDuration = minDuration;
	this.maxDuration = maxDuration;
};
glaze_engine_components_ForceData.__name__ = ["glaze","engine","components","ForceData"];
glaze_engine_components_ForceData.prototype = {
	__class__: glaze_engine_components_ForceData
};
var glaze_engine_components_EnvironmentForce = function(data) {
	this.ttl = 0;
	this.power = 0;
	this.direction = new glaze_geom_Vector2();
	this.data = data;
};
glaze_engine_components_EnvironmentForce.__name__ = ["glaze","engine","components","EnvironmentForce"];
glaze_engine_components_EnvironmentForce.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_EnvironmentForce.prototype = {
	__class__: glaze_engine_components_EnvironmentForce
};
var glaze_engine_components_Extents = function(width,height,offsetX,offsetY) {
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.halfWidths = new glaze_geom_Vector2(width,height);
	this.offset = new glaze_geom_Vector2(offsetX,offsetY);
};
glaze_engine_components_Extents.__name__ = ["glaze","engine","components","Extents"];
glaze_engine_components_Extents.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Extents.prototype = {
	__class__: glaze_engine_components_Extents
};
var glaze_engine_components_Fixed = function() {
};
glaze_engine_components_Fixed.__name__ = ["glaze","engine","components","Fixed"];
glaze_engine_components_Fixed.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Fixed.prototype = {
	__class__: glaze_engine_components_Fixed
};
var glaze_engine_components_Health = function(maxHealth,currentHealth,recoveryPerSecond,onNoHealth) {
	this.maxHealth = maxHealth;
	this.currentHealth = currentHealth;
	this.recoveryPerSecond = recoveryPerSecond;
	this.recoveryPerMs = recoveryPerSecond / 1000;
	this.onNoHealth = onNoHealth;
};
glaze_engine_components_Health.__name__ = ["glaze","engine","components","Health"];
glaze_engine_components_Health.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Health.prototype = {
	applyDamage: function(damageAmount) {
		this.currentHealth -= damageAmount;
	}
	,isDead: function() {
		return this.currentHealth <= 0;
	}
	,__class__: glaze_engine_components_Health
};
var glaze_engine_components_Held = function() {
};
glaze_engine_components_Held.__name__ = ["glaze","engine","components","Held"];
glaze_engine_components_Held.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Held.prototype = {
	__class__: glaze_engine_components_Held
};
var glaze_engine_components_Holdable = function() {
};
glaze_engine_components_Holdable.__name__ = ["glaze","engine","components","Holdable"];
glaze_engine_components_Holdable.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Holdable.prototype = {
	__class__: glaze_engine_components_Holdable
};
var glaze_engine_components_Holder = function() {
	this.heldItem = null;
	this.activate = false;
};
glaze_engine_components_Holder.__name__ = ["glaze","engine","components","Holder"];
glaze_engine_components_Holder.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Holder.prototype = {
	hold: function(item,holderEntity) {
		if(this.heldItem == null && item.map["Held"] == null) {
			var held = new glaze_engine_components_Held();
			held.holder = holderEntity;
			item.addComponent(held);
			this.heldItem = item;
		}
	}
	,drop: function() {
		if(this.heldItem != null) {
			var _heldItem = this.heldItem;
			var _this = this.heldItem;
			this.heldItem.removeComponent(this.heldItem.map["Held"]);
			this.heldItem = null;
			return _heldItem;
		}
		return null;
	}
	,__class__: glaze_engine_components_Holder
};
var glaze_engine_components_Inventory = function(slotCount) {
	this.slots = new glaze_ds_Queue(slotCount);
	this.permanentItems = new haxe_ds_StringMap();
};
glaze_engine_components_Inventory.__name__ = ["glaze","engine","components","Inventory"];
glaze_engine_components_Inventory.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Inventory.prototype = {
	store: function() {
		if(this.storeCB != null) {
			this.storeCB(this);
		}
	}
	,retrieve: function() {
		if(this.retrieveCB != null) {
			this.retrieveCB(this);
		}
	}
	,storePerm: function(type,value) {
		var _this = this.permanentItems;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var _this1 = this.permanentItems;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,0);
			} else {
				_this1.h[type] = 0;
			}
		}
		var _this2 = this.permanentItems;
		var currentValue = __map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type];
		var _this3 = this.permanentItems;
		var value1 = currentValue + value;
		if(__map_reserved[type] != null) {
			_this3.setReserved(type,value1);
		} else {
			_this3.h[type] = value1;
		}
		haxe_Log.trace("PermStored:{type}+{value}",{ fileName : "Inventory.hx", lineNumber : 40, className : "glaze.engine.components.Inventory", methodName : "storePerm"});
		debugger;
	}
	,toString: function() {
		var result = "";
		var _g = 0;
		var _g1 = this.slots.data;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			result += item.name + ":";
		}
		return result;
	}
	,__class__: glaze_engine_components_Inventory
};
var glaze_engine_components_LifeCycle = function(states) {
};
glaze_engine_components_LifeCycle.__name__ = ["glaze","engine","components","LifeCycle"];
glaze_engine_components_LifeCycle.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_LifeCycle.prototype = {
	__class__: glaze_engine_components_LifeCycle
};
var glaze_engine_components_Moveable = function() {
};
glaze_engine_components_Moveable.__name__ = ["glaze","engine","components","Moveable"];
glaze_engine_components_Moveable.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Moveable.prototype = {
	__class__: glaze_engine_components_Moveable
};
var glaze_engine_components_Position = function(x,y) {
	this.coords = new glaze_geom_Vector2(x,y);
	this.prevCoords = new glaze_geom_Vector2(x,y);
	this.direction = new glaze_geom_Vector2(1,1);
	this.updatePosition = $bind(this,this.internalSetPosition);
};
glaze_engine_components_Position.__name__ = ["glaze","engine","components","Position"];
glaze_engine_components_Position.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Position.prototype = {
	internalSetPosition: function(entity,position) {
		var _this = this.prevCoords;
		var v = this.coords;
		_this.x = v.x;
		_this.y = v.y;
		var _this1 = this.coords;
		_this1.x = position.x;
		_this1.y = position.y;
	}
	,update: function(position) {
		var _this = this.prevCoords;
		var v = this.coords;
		_this.x = v.x;
		_this.y = v.y;
		var _this1 = this.coords;
		_this1.x = position.x;
		_this1.y = position.y;
	}
	,clone: function() {
		var clone = new glaze_engine_components_Position(this.coords.x,this.coords.y);
		var _this = clone.prevCoords;
		var v = this.prevCoords;
		_this.x = v.x;
		_this.y = v.y;
		var _this1 = clone.direction;
		var v1 = this.direction;
		_this1.x = v1.x;
		_this1.y = v1.y;
		return clone;
	}
	,__class__: glaze_engine_components_Position
};
var glaze_engine_components_Script = function(behavior) {
	this.behavior = behavior;
};
glaze_engine_components_Script.__name__ = ["glaze","engine","components","Script"];
glaze_engine_components_Script.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Script.prototype = {
	__class__: glaze_engine_components_Script
};
var glaze_engine_components_State = function(states,initialStateIndex,triggerChannels) {
	this.states = states;
	this.currentState = initialStateIndex;
	this.previousState = initialStateIndex;
	this.triggerChannels = triggerChannels;
	this.onChanged = new glaze_signals_Signal1();
};
glaze_engine_components_State.__name__ = ["glaze","engine","components","State"];
glaze_engine_components_State.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_State.prototype = {
	getState: function() {
		return this.states[this.currentState];
	}
	,incrementState: function() {
		this.previousState = this.currentState;
		this.currentState += 1;
		if(this.currentState >= this.states.length) {
			this.currentState = 0;
		}
		this.onChanged.dispatch(this);
	}
	,recieveTrigger: function(data) {
		this.incrementState();
	}
	,addState: function(state) {
		this.states.push(state);
	}
	,__class__: glaze_engine_components_State
};
var glaze_engine_components_Storeable = function(type,value) {
	if(value == null) {
		value = 0;
	}
	this.permanentType = type;
	this.permanentValue = value;
};
glaze_engine_components_Storeable.__name__ = ["glaze","engine","components","Storeable"];
glaze_engine_components_Storeable.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Storeable.prototype = {
	__class__: glaze_engine_components_Storeable
};
var glaze_engine_components_TMX = function(data) {
	this.data = data;
};
glaze_engine_components_TMX.__name__ = ["glaze","engine","components","TMX"];
glaze_engine_components_TMX.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_TMX.prototype = {
	__class__: glaze_engine_components_TMX
};
var glaze_engine_components_TileDisplay = function(tileFrameId) {
	if(tileFrameId == null) {
		tileFrameId = "";
	}
	this.set_tileFrameId(tileFrameId);
};
glaze_engine_components_TileDisplay.__name__ = ["glaze","engine","components","TileDisplay"];
glaze_engine_components_TileDisplay.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_TileDisplay.prototype = {
	set_tileFrameId: function(value) {
		this.tileFrameId = value;
		if(this.onChange != null) {
			this.onChange();
		}
		return value;
	}
	,__class__: glaze_engine_components_TileDisplay
	,__properties__: {set_tileFrameId:"set_tileFrameId"}
};
var glaze_engine_components_Viewable = function() {
};
glaze_engine_components_Viewable.__name__ = ["glaze","engine","components","Viewable"];
glaze_engine_components_Viewable.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Viewable.prototype = {
	__class__: glaze_engine_components_Viewable
};
var glaze_engine_components_Water = function() {
};
glaze_engine_components_Water.__name__ = ["glaze","engine","components","Water"];
glaze_engine_components_Water.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Water.prototype = {
	__class__: glaze_engine_components_Water
};
var glaze_engine_components_Wind = function(particlePerUnitPerFrame) {
	this.particlePerUnitPerFrame = particlePerUnitPerFrame;
	this.particleCount = .0;
	this.incPerFrame = .0;
};
glaze_engine_components_Wind.__name__ = ["glaze","engine","components","Wind"];
glaze_engine_components_Wind.__interfaces__ = [glaze_eco_core_IComponent];
glaze_engine_components_Wind.prototype = {
	__class__: glaze_engine_components_Wind
};
var glaze_engine_factories_IEntityFactory = function() { };
glaze_engine_factories_IEntityFactory.__name__ = ["glaze","engine","factories","IEntityFactory"];
glaze_engine_factories_IEntityFactory.prototype = {
	__class__: glaze_engine_factories_IEntityFactory
	,__properties__: {get_mapping:"get_mapping"}
};
var glaze_engine_factories_BaseEntityFactory = function() {
};
glaze_engine_factories_BaseEntityFactory.__name__ = ["glaze","engine","factories","BaseEntityFactory"];
glaze_engine_factories_BaseEntityFactory.__interfaces__ = [glaze_engine_factories_IEntityFactory];
glaze_engine_factories_BaseEntityFactory.getCSVParams = function(csv) {
	var parsedParams = [];
	if(csv == null) {
		return parsedParams;
	}
	var params = csv.split(",");
	var _g = 0;
	while(_g < params.length) {
		var param = params[_g];
		++_g;
		var i = Std.parseInt(param);
		if(i != null) {
			parsedParams.push(i);
			continue;
		}
		var f = parseFloat(param);
		if(f != null) {
			parsedParams.push(f);
			continue;
		}
		parsedParams.push(param);
	}
	return parsedParams;
};
glaze_engine_factories_BaseEntityFactory.prototype = {
	createEntity: function(data,engine) {
	}
	,get_mapping: function() {
		return "";
	}
	,CreateEntityFromCSV: function(componentClass,csv) {
		var params = glaze_engine_factories_BaseEntityFactory.getCSVParams(csv);
		return Type.createInstance(componentClass,params);
	}
	,__class__: glaze_engine_factories_BaseEntityFactory
	,__properties__: {get_mapping:"get_mapping"}
};
var glaze_engine_factories_ComponentFactory = function() {
	this.map = new haxe_ds_StringMap();
};
glaze_engine_factories_ComponentFactory.__name__ = ["glaze","engine","factories","ComponentFactory"];
glaze_engine_factories_ComponentFactory.CSVFactory = function(cl,csv) {
	var params = csv.split(",");
	var parsedParams = [];
	var _g = 0;
	while(_g < params.length) {
		var param = params[_g];
		++_g;
		var i = Std.parseInt(param);
		if(i != null) {
			parsedParams.push(i);
			continue;
		}
		var f = parseFloat(param);
		if(f != null) {
			parsedParams.push(f);
			continue;
		}
		parsedParams.push(param);
	}
	return Type.createInstance(cl,parsedParams);
};
glaze_engine_factories_ComponentFactory.prototype = {
	registerComponent: function(registeredName,cl,factoryFunction) {
		var this1 = this.map;
		var value = new glaze_engine_factories_FactoryBinding(cl,factoryFunction);
		var _this = this1;
		if(__map_reserved[registeredName] != null) {
			_this.setReserved(registeredName,value);
		} else {
			_this.h[registeredName] = value;
		}
	}
	,createComponent: function(name,data) {
		var _this = this.map;
		var binding = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(binding == null) {
			return null;
		}
		return binding.factoryFunction(binding.cl,data);
	}
	,__class__: glaze_engine_factories_ComponentFactory
};
var glaze_engine_factories_FactoryBinding = function(cl,factoryFunction) {
	this.cl = cl;
	this.factoryFunction = factoryFunction;
};
glaze_engine_factories_FactoryBinding.__name__ = ["glaze","engine","factories","FactoryBinding"];
glaze_engine_factories_FactoryBinding.prototype = {
	__class__: glaze_engine_factories_FactoryBinding
};
var glaze_engine_factories_TMXFactory = function(engine,tmxMap) {
	this.engine = engine;
	this.tmxMap = tmxMap;
	this.map = new haxe_ds_StringMap();
};
glaze_engine_factories_TMXFactory.__name__ = ["glaze","engine","factories","TMXFactory"];
glaze_engine_factories_TMXFactory.prototype = {
	parseObjectGroup: function(groupName) {
		var objs = this.tmxMap.getObjectGroup(groupName);
		var _g = 0;
		var _g1 = objs.objects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			var key = obj.type;
			var _this = this.map;
			var factory = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(factory != null) {
				factory.createEntity(obj,this.engine);
			}
		}
	}
	,registerFactory: function(factory) {
		var factoryInstance = Type.createInstance(factory,[]);
		var this1 = this.map;
		var key = factoryInstance.get_mapping();
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,factoryInstance);
		} else {
			_this.h[key] = factoryInstance;
		}
	}
	,__class__: glaze_engine_factories_TMXFactory
};
var glaze_engine_factories_tmx_TMXEntityFactory = function() {
	glaze_engine_factories_BaseEntityFactory.call(this);
};
glaze_engine_factories_tmx_TMXEntityFactory.__name__ = ["glaze","engine","factories","tmx","TMXEntityFactory"];
glaze_engine_factories_tmx_TMXEntityFactory.getEmptyComponentArray = function() {
	return [];
};
glaze_engine_factories_tmx_TMXEntityFactory.getPosition = function(tmxObject) {
	return new glaze_engine_components_Position(glaze_engine_factories_tmx_TMXEntityFactory.SCALE(tmxObject.x + tmxObject.width / 2),glaze_engine_factories_tmx_TMXEntityFactory.SCALE(tmxObject.y + tmxObject.height / 2));
};
glaze_engine_factories_tmx_TMXEntityFactory.getExtents = function(tmxObject) {
	return new glaze_engine_components_Extents(glaze_engine_factories_tmx_TMXEntityFactory.SCALE(tmxObject.width / 2),glaze_engine_factories_tmx_TMXEntityFactory.SCALE(tmxObject.height / 2));
};
glaze_engine_factories_tmx_TMXEntityFactory.SCALE = function(v) {
	return v * 2;
};
glaze_engine_factories_tmx_TMXEntityFactory.__super__ = glaze_engine_factories_BaseEntityFactory;
glaze_engine_factories_tmx_TMXEntityFactory.prototype = $extend(glaze_engine_factories_BaseEntityFactory.prototype,{
	setTmxObject: function(data) {
		this.tmxObject = data;
	}
	,__class__: glaze_engine_factories_tmx_TMXEntityFactory
});
var glaze_engine_factories_tmx_ForceFactory = function() {
	glaze_engine_factories_tmx_TMXEntityFactory.call(this);
};
glaze_engine_factories_tmx_ForceFactory.__name__ = ["glaze","engine","factories","tmx","ForceFactory"];
glaze_engine_factories_tmx_ForceFactory.__super__ = glaze_engine_factories_tmx_TMXEntityFactory;
glaze_engine_factories_tmx_ForceFactory.prototype = $extend(glaze_engine_factories_tmx_TMXEntityFactory.prototype,{
	get_mapping: function() {
		return "Force";
	}
	,createEntity: function(data,engine) {
		this.setTmxObject(data);
		var components = glaze_engine_factories_tmx_TMXEntityFactory.getEmptyComponentArray();
		components.push(glaze_engine_factories_tmx_TMXEntityFactory.getPosition(this.tmxObject));
		components.push(glaze_engine_factories_tmx_TMXEntityFactory.getExtents(this.tmxObject));
		components.push(new glaze_physics_components_PhysicsCollision(true,null,[]));
		components.push(new glaze_engine_components_Fixed());
		components.push(new glaze_engine_components_Active());
		var forceDataArray = [];
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			var _this = this.tmxObject.combined;
			var key = "config" + i;
			var raw = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(raw != null) {
				var config = glaze_engine_factories_BaseEntityFactory.getCSVParams(raw);
				forceDataArray.push(new glaze_engine_components_ForceData(config[0],config[1] * glaze_engine_factories_tmx_ForceFactory.FORCE_SCALE,config[2] * glaze_engine_factories_tmx_ForceFactory.FORCE_SCALE,config[3],config[4]));
			}
		}
		components.push(new glaze_engine_components_EnvironmentForce(forceDataArray));
		components.push(new glaze_engine_components_Wind(0.001));
		engine.createEntity(components,this.tmxObject.name);
	}
	,__class__: glaze_engine_factories_tmx_ForceFactory
});
var glaze_engine_factories_tmx_LightFactory = function() {
	glaze_engine_factories_tmx_TMXEntityFactory.call(this);
};
glaze_engine_factories_tmx_LightFactory.__name__ = ["glaze","engine","factories","tmx","LightFactory"];
glaze_engine_factories_tmx_LightFactory.__super__ = glaze_engine_factories_tmx_TMXEntityFactory;
glaze_engine_factories_tmx_LightFactory.prototype = $extend(glaze_engine_factories_tmx_TMXEntityFactory.prototype,{
	get_mapping: function() {
		return "Light";
	}
	,createEntity: function(data,engine) {
		this.setTmxObject(data);
		var components = glaze_engine_factories_tmx_TMXEntityFactory.getEmptyComponentArray();
		components.push(glaze_engine_factories_tmx_TMXEntityFactory.getPosition(this.tmxObject));
		var _this = this.tmxObject.combined;
		var light = this.CreateEntityFromCSV(glaze_lighting_components_Light,__map_reserved["Light"] != null ? _this.getReserved("Light") : _this.h["Light"]);
		components.push(light);
		var extents = new glaze_engine_components_Extents(light.range / 1.5,light.range / 1.5);
		components.push(extents);
		components.push(new glaze_engine_components_Fixed());
		components.push(new glaze_engine_components_Active());
		engine.createEntity(components,this.tmxObject.name);
	}
	,__class__: glaze_engine_factories_tmx_LightFactory
});
var glaze_engine_factories_tmx_WaterFactory = function() {
	glaze_engine_factories_tmx_TMXEntityFactory.call(this);
};
glaze_engine_factories_tmx_WaterFactory.__name__ = ["glaze","engine","factories","tmx","WaterFactory"];
glaze_engine_factories_tmx_WaterFactory.__super__ = glaze_engine_factories_tmx_TMXEntityFactory;
glaze_engine_factories_tmx_WaterFactory.prototype = $extend(glaze_engine_factories_tmx_TMXEntityFactory.prototype,{
	get_mapping: function() {
		return "Water";
	}
	,createEntity: function(data,engine) {
		this.setTmxObject(data);
		var components = glaze_engine_factories_tmx_TMXEntityFactory.getEmptyComponentArray();
		components.push(glaze_engine_factories_tmx_TMXEntityFactory.getPosition(this.tmxObject));
		components.push(glaze_engine_factories_tmx_TMXEntityFactory.getExtents(this.tmxObject));
		components.push(new glaze_physics_components_PhysicsCollision(true,null,[]));
		components.push(new glaze_engine_components_Fixed());
		components.push(new glaze_engine_components_Active());
		var _this = this.tmxObject.combined;
		var water = this.CreateEntityFromCSV(glaze_engine_components_Water,__map_reserved["Water"] != null ? _this.getReserved("Water") : _this.h["Water"]);
		components.push(water);
		engine.createEntity(components,this.tmxObject.name);
	}
	,__class__: glaze_engine_factories_tmx_WaterFactory
});
var glaze_engine_managers_space_ISpaceManager = function() { };
glaze_engine_managers_space_ISpaceManager.__name__ = ["glaze","engine","managers","space","ISpaceManager"];
glaze_engine_managers_space_ISpaceManager.prototype = {
	__class__: glaze_engine_managers_space_ISpaceManager
};
var glaze_engine_managers_space_RegularGridSpaceManager = function(gridWidth,gridHeight,gridCellSize) {
	this.updateDistanceDelta = 10000;
	this.count = 1;
	this.grid = new glaze_ds_Array2D(gridWidth,gridHeight,gridCellSize);
	this.currentCells = [];
	var _g1 = 0;
	var _g = this.grid.gridWidth;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = this.grid.gridHeight;
		while(_g3 < _g2) {
			var x = _g3++;
			this.grid.data.push(new glaze_engine_managers_space_Cell());
		}
	}
};
glaze_engine_managers_space_RegularGridSpaceManager.__name__ = ["glaze","engine","managers","space","RegularGridSpaceManager"];
glaze_engine_managers_space_RegularGridSpaceManager.__interfaces__ = [glaze_engine_managers_space_ISpaceManager];
glaze_engine_managers_space_RegularGridSpaceManager.prototype = {
	addEntity: function(entity) {
		var proxy = new glaze_engine_managers_space_SpaceManagerProxy();
		proxy.aabb.position = entity.map["Position"].coords;
		proxy.aabb.extents = entity.map["Extents"].halfWidths;
		proxy.isStatic = true;
		proxy.entity = entity;
		this.hashProxy(proxy);
	}
	,hashProxy: function(proxy) {
		var startX = (proxy.aabb.position.x - proxy.aabb.extents.x) * this.grid.invCellSize | 0;
		var startY = (proxy.aabb.position.y - proxy.aabb.extents.y) * this.grid.invCellSize | 0;
		var endX = ((proxy.aabb.position.x + proxy.aabb.extents.x) * this.grid.invCellSize | 0) + 1;
		var endY = ((proxy.aabb.position.y + proxy.aabb.extents.y) * this.grid.invCellSize | 0) + 1;
		var _g1 = startX;
		var _g = endX;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = startY;
			var _g2 = endY;
			while(_g3 < _g2) {
				var y = _g3++;
				var _this = this.grid;
				var cell = _this.data[y * _this.gridWidth + x];
				haxe_Log.trace("added to:",{ fileName : "RegularGridSpaceManager.hx", lineNumber : 48, className : "glaze.engine.managers.space.RegularGridSpaceManager", methodName : "hashProxy", customParams : [x,y]});
				cell.proxies.push(proxy);
			}
		}
	}
	,addActiveCell: function(cell,viewAABB,callback) {
		var _g = 0;
		var _g1 = cell.proxies;
		while(_g < _g1.length) {
			var proxy = _g1[_g];
			++_g;
			if(proxy.referenceCount++ == 0) {
				callback(proxy.entity,true);
			}
		}
		cell.updateCount = this.count;
	}
	,removeActiveCell: function(cell,viewAABB,callback) {
		var _g = 0;
		var _g1 = cell.proxies;
		while(_g < _g1.length) {
			var proxy = _g1[_g];
			++_g;
			if(--proxy.referenceCount == 0) {
				callback(proxy.entity,false);
			}
		}
		cell.updateCount = 0;
	}
	,search: function(viewAABB,callback) {
		if(this.lastUpdatePosition == null) {
			var _this = viewAABB.position;
			this.lastUpdatePosition = new glaze_geom_Vector2(_this.x,_this.y);
		} else {
			var _this1 = this.lastUpdatePosition;
			var v = viewAABB.position;
			var dX = _this1.x - v.x;
			var dY = _this1.y - v.y;
			if(dX * dX + dY * dY < this.updateDistanceDelta) {
				return;
			}
			var _this2 = this.lastUpdatePosition;
			var v1 = viewAABB.position;
			_this2.x = v1.x;
			_this2.y = v1.y;
		}
		var startX = (viewAABB.position.x - viewAABB.extents.x) * this.grid.invCellSize | 0;
		var startY = (viewAABB.position.y - viewAABB.extents.y) * this.grid.invCellSize | 0;
		var endX = ((viewAABB.position.x + viewAABB.extents.x) * this.grid.invCellSize | 0) + 1;
		var endY = ((viewAABB.position.y + viewAABB.extents.y) * this.grid.invCellSize | 0) + 1;
		var _g1 = startX;
		var _g = endX;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = startY;
			var _g2 = endY;
			while(_g3 < _g2) {
				var y = _g3++;
				var _this3 = this.grid;
				var cell = _this3.data[y * _this3.gridWidth + x];
				if(cell == null) {
					continue;
				}
				if(cell.updateCount == 0) {
					this.currentCells.push(cell);
				} else {
					cell.updateCount = this.count;
				}
			}
		}
		var i = this.currentCells.length;
		while(i-- > 0) {
			var cell1 = this.currentCells[i];
			if(cell1.updateCount == 0) {
				this.addActiveCell(cell1,viewAABB,callback);
			} else if(cell1.updateCount < this.count) {
				this.removeActiveCell(cell1,viewAABB,callback);
				this.currentCells.splice(i,1);
			}
		}
		this.count++;
	}
	,__class__: glaze_engine_managers_space_RegularGridSpaceManager
};
var glaze_engine_managers_space_Cell = function() {
	this.proxies = [];
	this.updateCount = 0;
};
glaze_engine_managers_space_Cell.__name__ = ["glaze","engine","managers","space","Cell"];
glaze_engine_managers_space_Cell.prototype = {
	__class__: glaze_engine_managers_space_Cell
};
var glaze_engine_managers_space_SpaceManagerProxy = function() {
	this.referenceCount = 0;
	this.active = false;
	this.entity = null;
	this.isStatic = false;
	this.aabb = new glaze_geom_AABB();
};
glaze_engine_managers_space_SpaceManagerProxy.__name__ = ["glaze","engine","managers","space","SpaceManagerProxy"];
glaze_engine_managers_space_SpaceManagerProxy.prototype = {
	__class__: glaze_engine_managers_space_SpaceManagerProxy
};
var glaze_engine_systems_AgeSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Age,glaze_engine_components_Active]);
};
glaze_engine_systems_AgeSystem.__name__ = ["glaze","engine","systems","AgeSystem"];
glaze_engine_systems_AgeSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_AgeSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var age = entity.map["Age"];
			if(age.growOlder(delta)) {
				if(age.onExpire != null) {
					age.onExpire(entity);
				}
			}
		}
	}
	,__class__: glaze_engine_systems_AgeSystem
});
var glaze_engine_systems_BehaviourSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Script,glaze_engine_components_Active]);
};
glaze_engine_systems_BehaviourSystem.__name__ = ["glaze","engine","systems","BehaviourSystem"];
glaze_engine_systems_BehaviourSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_BehaviourSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var script = entity.map["Script"];
		script.context = new glaze_ai_behaviortree_BehaviorContext(entity);
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var script = entity.map["Script"];
			script.context.timestamp = timestamp;
			script.context.delta = delta;
			script.behavior.tick(script.context);
		}
	}
	,__class__: glaze_engine_systems_BehaviourSystem
});
var glaze_engine_systems_CollidableSwitchSystem = function(bus) {
	glaze_eco_core_System.call(this,[glaze_engine_components_CollidableSwitch,glaze_physics_components_PhysicsCollision,glaze_engine_components_TileDisplay]);
	this.bus = bus;
};
glaze_engine_systems_CollidableSwitchSystem.__name__ = ["glaze","engine","systems","CollidableSwitchSystem"];
glaze_engine_systems_CollidableSwitchSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_CollidableSwitchSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var collidableSwitch = entity.map["CollidableSwitch"];
		var collision = entity.map["PhysicsCollision"];
		var display = entity.map["TileDisplay"];
		display.set_tileFrameId(collidableSwitch.isOn ? "switchOn" : "switchOff");
		collision.proxy.contactCallbacks.push($bind(this,this.onCollision));
	}
	,entityRemoved: function(entity) {
		var collision = entity.map["PhysicsCollision"];
		HxOverrides.remove(collision.proxy.contactCallbacks,$bind(this,this.onCollision));
	}
	,update: function(timestamp,delta) {
	}
	,onCollision: function(a,b,c) {
		var _this = a.entity;
		var collidableSwitch = a.entity.map["CollidableSwitch"];
		if(collidableSwitch.trigger(this.engine.timestamp)) {
			this.bus.triggerAll(collidableSwitch.triggerChannels,null);
			var _this1 = a.entity;
			var display = a.entity.map["TileDisplay"];
			display.set_tileFrameId(collidableSwitch.isOn ? "switchOn" : "switchOff");
		}
	}
	,__class__: glaze_engine_systems_CollidableSwitchSystem
});
var glaze_engine_systems_CollisionCountSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_CollisionCounter,glaze_physics_components_PhysicsCollision,glaze_engine_components_Active]);
};
glaze_engine_systems_CollisionCountSystem.__name__ = ["glaze","engine","systems","CollisionCountSystem"];
glaze_engine_systems_CollisionCountSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_CollisionCountSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var collision = entity.map["PhysicsCollision"];
		collision.proxy.contactCallbacks.push($bind(this,this.callback));
	}
	,entityRemoved: function(entity) {
		var collision = entity.map["PhysicsCollision"];
		HxOverrides.remove(collision.proxy.contactCallbacks,$bind(this,this.callback));
	}
	,update: function(timestamp,delta) {
	}
	,callback: function(a,b,contact) {
		var _this = a.entity;
		var cc = a.entity.map["CollisionCounter"];
		var count = --cc.count;
		if(b == null) {
			if(count <= 0 && cc.onCount != null) {
				cc.onCount(a.entity);
			}
		} else {
			if(b.isSensor) {
				return;
			}
			var tmp;
			var _this1 = b.entity;
			if(b.entity.map["Moveable"] != null) {
				tmp = cc.onCount != null;
			} else {
				tmp = false;
			}
			if(tmp) {
				cc.onCount(a.entity);
			}
		}
	}
	,__class__: glaze_engine_systems_CollisionCountSystem
});
var glaze_engine_systems_DestroySystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Destroy]);
};
glaze_engine_systems_DestroySystem.__name__ = ["glaze","engine","systems","DestroySystem"];
glaze_engine_systems_DestroySystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_DestroySystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var count = this.view.entities.length;
		var next = 0;
		while(count > 0) {
			var entity = this.view.entities[next];
			var tmp = entity.map["Destroy"];
			if(tmp.count-- <= 0) {
				entity.destroy();
			} else {
				++next;
			}
			--count;
		}
	}
	,__class__: glaze_engine_systems_DestroySystem
});
var glaze_engine_systems_FixedViewManagementSystem = function(camera) {
	this.camera = camera;
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_engine_components_Extents,glaze_engine_components_Fixed]);
	this.spaceManager = new glaze_engine_managers_space_RegularGridSpaceManager(10,10,500);
	this.activeSpaceAABB = new glaze_geom_AABB();
	var _this = this.activeSpaceAABB.extents;
	_this.x = 400.;
	_this.y = 300.;
};
glaze_engine_systems_FixedViewManagementSystem.__name__ = ["glaze","engine","systems","FixedViewManagementSystem"];
glaze_engine_systems_FixedViewManagementSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_FixedViewManagementSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		this.spaceManager.addEntity(entity);
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _this = this.activeSpaceAABB.position;
		var v = this.camera.realPosition;
		_this.x = v.x;
		_this.y = v.y;
		this.spaceManager.search(this.activeSpaceAABB,$bind(this,this.setEntityStatus));
	}
	,setEntityStatus: function(entity,status) {
		if(status == true) {
			entity.addComponent(new glaze_engine_components_Viewable());
		} else {
			entity.removeComponent(entity.map["Viewable"]);
		}
	}
	,__class__: glaze_engine_systems_FixedViewManagementSystem
});
var glaze_engine_systems_HealthSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Health,glaze_engine_components_Active]);
};
glaze_engine_systems_HealthSystem.__name__ = ["glaze","engine","systems","HealthSystem"];
glaze_engine_systems_HealthSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_HealthSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var health = entity.map["Health"];
			if(health.currentHealth <= 0) {
				if(health.onNoHealth != null) {
					health.onNoHealth(entity);
				}
			} else {
				health.currentHealth = Math.min(health.maxHealth,health.currentHealth + health.recoveryPerMs * delta);
			}
		}
	}
	,__class__: glaze_engine_systems_HealthSystem
});
var glaze_engine_systems_HeldSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Holdable,glaze_engine_components_Held,glaze_physics_components_PhysicsBody,glaze_engine_components_Active]);
};
glaze_engine_systems_HeldSystem.__name__ = ["glaze","engine","systems","HeldSystem"];
glaze_engine_systems_HeldSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_HeldSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var body = entity.map["PhysicsBody"].body;
		var _this = body.velocity;
		_this.x = 0;
		_this.y = 0;
		body.skip = true;
		var holder = entity.map["Held"].holder;
		var holderPos = holder.map["Position"].coords;
		var _this1 = entity.map["Position"].coords;
		_this1.x = holderPos.x;
		_this1.y = holderPos.y;
		var _this2 = entity.map["PhysicsBody"].body.position;
		_this2.x = holderPos.x;
		_this2.y = holderPos.y;
		if(entity.map["Storeable"] == null) {
			var _this3 = holder.parent;
			var holderBody = holder.parent.map["PhysicsBody"].body;
			if(holderBody != null) {
				holderBody.setMass(holderBody.mass + body.mass);
			}
		}
	}
	,entityRemoved: function(entity) {
		var holder = entity.map["Held"].holder;
		holder.map["Holder"].drop();
		var body = entity.map["PhysicsBody"].body;
		body.skip = false;
		var _this = body.velocity;
		_this.x = 0;
		_this.y = 0;
		if(entity.map["Storeable"] == null) {
			var _this1 = holder.parent;
			var holderBody = holder.parent.map["PhysicsBody"].body;
			if(holderBody != null) {
				holderBody.setMass(holderBody.mass - body.mass);
			}
		}
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var holder = entity.map["Held"].holder;
			var holderPos = holder.map["Position"];
			var body = entity.map["PhysicsBody"].body;
			body.setStaticPosition(holderPos.coords.x + holderPos.direction.x * 4,holderPos.coords.y);
			var _this = entity.map["Position"];
			var position = body.position;
			var _this1 = _this.prevCoords;
			var v = _this.coords;
			_this1.x = v.x;
			_this1.y = v.y;
			var _this2 = _this.coords;
			_this2.x = position.x;
			_this2.y = position.y;
		}
	}
	,callback: function(a,b,contact) {
	}
	,__class__: glaze_engine_systems_HeldSystem
});
var glaze_engine_systems_HoldableSystem = function(holderFilterCategory) {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsCollision,glaze_engine_components_Extents,glaze_engine_components_Holdable]);
	this.holderFilterCategory = holderFilterCategory;
};
glaze_engine_systems_HoldableSystem.__name__ = ["glaze","engine","systems","HoldableSystem"];
glaze_engine_systems_HoldableSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_HoldableSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var physicsCollision = entity.map["PhysicsCollision"];
		physicsCollision.proxy.filter.categoryBits |= this.holderFilterCategory;
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
	}
	,__class__: glaze_engine_systems_HoldableSystem
});
var glaze_engine_systems_HolderSystem = function(holderFilterCategory) {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsCollision,glaze_engine_components_Extents,glaze_engine_components_Holder,glaze_engine_components_Active]);
	this.holderFilterCategory = holderFilterCategory;
};
glaze_engine_systems_HolderSystem.__name__ = ["glaze","engine","systems","HolderSystem"];
glaze_engine_systems_HolderSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_HolderSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var physicsCollision = entity.map["PhysicsCollision"];
		physicsCollision.proxy.contactCallbacks.push($bind(this,this.callback));
		physicsCollision.proxy.filter.maskBits |= this.holderFilterCategory;
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
	}
	,callback: function(a,b,contact) {
		var _this = a.entity;
		var holder = a.entity.map["Holder"];
		if(holder.activate == true) {
			holder.hold(b.entity,a.entity);
		}
	}
	,__class__: glaze_engine_systems_HolderSystem
});
var glaze_engine_systems_InventorySystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Inventory,glaze_engine_components_Holder]);
};
glaze_engine_systems_InventorySystem.__name__ = ["glaze","engine","systems","InventorySystem"];
glaze_engine_systems_InventorySystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_InventorySystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		entity.map["Inventory"].storeCB = $bind(this,this.store);
		entity.map["Inventory"].retrieveCB = $bind(this,this.retrieve);
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
	}
	,store: function(inventory) {
		var entity = this.findEntity(inventory);
		if(entity != null) {
			var holder = entity.map["Holder"];
			if(holder.heldItem != null) {
				var _this = holder.heldItem;
				var storeable = holder.heldItem.map["Storeable"];
				if(storeable != null) {
					if(storeable.permanentType != null) {
						var item = holder.drop();
						inventory.storePerm(storeable.permanentType,storeable.permanentValue);
						item.destroy();
					} else if(!inventory.slots.isFull()) {
						var item1 = holder.drop();
						item1.removeComponent(item1.map["Active"]);
						inventory.slots.enqueue(item1);
						haxe_Log.trace(inventory.toString(),{ fileName : "InventorySystem.hx", lineNumber : 65, className : "glaze.engine.systems.InventorySystem", methodName : "store"});
					}
				}
			}
		}
	}
	,retrieve: function(inventory) {
		var entity = this.findEntity(inventory);
		if(entity != null) {
			var holder = entity.map["Holder"];
			var nextItem = inventory.slots.dequeue();
			if(nextItem != null) {
				if(holder.heldItem != null) {
					var item = holder.drop();
					item.removeComponent(item.map["Active"]);
					inventory.slots.enqueue(item);
				}
				nextItem.addComponent(new glaze_engine_components_Active());
				holder.hold(nextItem,entity);
				haxe_Log.trace(inventory.toString(),{ fileName : "InventorySystem.hx", lineNumber : 86, className : "glaze.engine.systems.InventorySystem", methodName : "retrieve"});
			}
		}
	}
	,findEntity: function(inventory) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(entity.map["Inventory"] == inventory) {
				return entity;
			}
		}
		return null;
	}
	,__class__: glaze_engine_systems_InventorySystem
});
var glaze_engine_systems_ParticleSystem = function(particleEngine,spriteParticleEngine) {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_engine_components_ParticleEmitters,glaze_engine_components_Active]);
	this.particleEngine = particleEngine;
	this.spriteParticleEngine = spriteParticleEngine;
};
glaze_engine_systems_ParticleSystem.__name__ = ["glaze","engine","systems","ParticleSystem"];
glaze_engine_systems_ParticleSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_ParticleSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = entity.map["ParticleEmitters"].emitters;
			while(_g2 < _g3.length) {
				var emitter = _g3[_g2];
				++_g2;
				emitter.update(timestamp,entity,this.particleEngine,this.spriteParticleEngine);
			}
		}
		this.particleEngine.Update();
		this.spriteParticleEngine.Update();
	}
	,__class__: glaze_engine_systems_ParticleSystem
});
var glaze_engine_systems_RenderSystem = function(canvas,cameraRange) {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_engine_components_Display,glaze_engine_components_Active]);
	this.canvas = canvas;
	this.stage = new glaze_render_display_Stage();
	this.camera = new glaze_render_display_Camera();
	this.camera.worldExtentsAABB = cameraRange;
	this.initalizeWebGlRenderer();
};
glaze_engine_systems_RenderSystem.__name__ = ["glaze","engine","systems","RenderSystem"];
glaze_engine_systems_RenderSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_RenderSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	initalizeWebGlRenderer: function() {
		this.stage.addChild(this.camera);
		this.renderer = new glaze_render_renderers_webgl_WebGLRenderer(this.stage,this.camera,this.canvas,800,640);
		this.camera.Resize(this.renderer.width,this.renderer.height);
		this.textureManager = new glaze_render_texture_TextureManager(this.renderer.gl);
		this.frameListManager = new glaze_render_frame_FrameListManager(this.textureManager);
		this.itemContainer = new glaze_render_display_DisplayObjectContainer();
		this.itemContainer.id = "itemContainer";
		this.camera.addChild(this.itemContainer);
	}
	,entityAdded: function(entity) {
		var position = entity.map["Position"];
		var display = entity.map["Display"];
		if(display.displayObject == null) {
			display.displayObject = new glaze_render_display_Sprite();
			display.frameList = this.frameListManager.getFrameList(display.frameListId);
			if(display.initialFrameId != null) {
				display.set_frame(display.frameList.getFrame(display.initialFrameId));
			} else {
				display.set_frame(display.frameList.frames[0]);
			}
			display.displayObject.position = position.coords;
		}
		this.itemContainer.addChild(display.displayObject);
	}
	,entityRemoved: function(entity) {
		var display = entity.map["Display"];
		this.itemContainer.removeChild(display.displayObject);
	}
	,update: function(timestamp,delta) {
		this.camera.Focus(this.cameraTarget.x,this.cameraTarget.y);
		this.renderer.Render(this.camera.viewPortAABB);
	}
	,CameraTarget: function(target) {
		this.cameraTarget = target;
	}
	,updateSprite: function(s,id,tid) {
		s.id = id;
		var _this = this.textureManager.textures;
		s.texture = __map_reserved[tid] != null ? _this.getReserved(tid) : _this.h[tid];
		s.pivot.x = s.texture.frame.width * s.texture.pivot.x;
		s.pivot.y = s.texture.frame.height * s.texture.pivot.y;
	}
	,createSprite: function(id,tid) {
		var s = new glaze_render_display_Sprite();
		s.id = id;
		var _this = this.textureManager.textures;
		s.texture = __map_reserved[tid] != null ? _this.getReserved(tid) : _this.h[tid];
		s.position.x = 0;
		s.position.y = 0;
		s.pivot.x = s.texture.frame.width * s.texture.pivot.x;
		s.pivot.y = s.texture.frame.height * s.texture.pivot.y;
		return s;
	}
	,__class__: glaze_engine_systems_RenderSystem
});
var glaze_engine_systems_StateSystem = function(bus) {
	glaze_eco_core_System.call(this,[glaze_engine_components_State]);
	this.bus = bus;
};
glaze_engine_systems_StateSystem.__name__ = ["glaze","engine","systems","StateSystem"];
glaze_engine_systems_StateSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_StateSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var state = entity.map["State"];
		state.owner = entity;
		this.bus.registerAll(state.triggerChannels,$bind(state,state.recieveTrigger));
	}
	,entityRemoved: function(entity) {
		var state = entity.map["State"];
		state.owner = null;
		this.bus.unregisterAll(state.triggerChannels,$bind(state,state.recieveTrigger));
	}
	,update: function(timestamp,delta) {
	}
	,__class__: glaze_engine_systems_StateSystem
});
var glaze_engine_systems_TileRenderSystem = function(tileFramesConfig,tileMap,map) {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_engine_components_TileDisplay]);
	this.updates = [];
	this.frames = new haxe_ds_StringMap();
	this.tileMap = tileMap;
	this.map = map;
	this.parseFramesConfig(tileFramesConfig);
};
glaze_engine_systems_TileRenderSystem.__name__ = ["glaze","engine","systems","TileRenderSystem"];
glaze_engine_systems_TileRenderSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_TileRenderSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	parseFramesConfig: function(config) {
		if(typeof(config) != "string") {
			return;
		}
		var data = JSON.parse(config);
		var sheetNumber = 0;
		var config1 = Reflect.field(data,"sheets");
		var _g = 0;
		var _g1 = Reflect.fields(config1);
		while(_g < _g1.length) {
			var sheetId = _g1[_g];
			++_g;
			var sheet = Reflect.field(config1,sheetId);
			var _g2 = 0;
			var _g3 = Reflect.fields(sheet);
			while(_g2 < _g3.length) {
				var frameId = _g3[_g2];
				++_g2;
				var frameData = Reflect.field(sheet,frameId);
				frameData.push(sheetNumber);
				var _this = this.frames;
				if(__map_reserved[frameId] != null) {
					_this.setReserved(frameId,frameData);
				} else {
					_this.h[frameId] = frameData;
				}
			}
			++sheetNumber;
		}
	}
	,entityAdded: function(entity) {
		var position = entity.map["Position"];
		var tileDisplay = entity.map["TileDisplay"];
		var f = $bind(this,this.onChange);
		var a1 = entity;
		tileDisplay.onChange = function() {
			f(a1);
		};
		if(tileDisplay.tileFrameId != null) {
			this.onChange(entity);
		}
	}
	,entityRemoved: function(entity) {
	}
	,onChange: function(entity) {
		this.updates.push(entity);
	}
	,update: function(timestamp,delta) {
		while(this.updates.length > 0) {
			var entity = this.updates.pop();
			var position = entity.map["Position"];
			var tileDisplay = entity.map["TileDisplay"];
			if(tileDisplay.tileFrameId != "") {
				var _this = this.frames;
				var key = tileDisplay.tileFrameId;
				this.tileMap.updateMap(position.coords.x * this.map.data.invCellSize | 0,position.coords.y * this.map.data.invCellSize | 0,__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
			}
			haxe_Log.trace(tileDisplay,{ fileName : "TileRenderSystem.hx", lineNumber : 94, className : "glaze.engine.systems.TileRenderSystem", methodName : "update"});
		}
	}
	,__class__: glaze_engine_systems_TileRenderSystem
});
var glaze_engine_systems_WaterSystem = function(particleEngine) {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsCollision,glaze_engine_components_Extents,glaze_engine_components_Water]);
	this.particleEngine = particleEngine;
};
glaze_engine_systems_WaterSystem.__name__ = ["glaze","engine","systems","WaterSystem"];
glaze_engine_systems_WaterSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_WaterSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var cb2 = new glaze_signals_Signal3();
		cb2.add($bind(this,this.callback));
		entity.map["PhysicsCollision"].proxy.contactCallbacks.push($bind(cb2,cb2.dispatch));
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		this.timestamp = Math.PI * 2 / 1000 * (timestamp % 1000);
	}
	,callback: function(a,b,contact) {
		var area = a.aabb.overlapArea(b.aabb);
		b.body.damping = 0.90;
		var _this = b.body;
		var f_y;
		var f_x = 0;
		f_y = -area * (4.5 + Math.sin(this.timestamp) * 0.5);
		var _this1 = _this.forces;
		var s = _this.invMass;
		_this1.x += f_x * s;
		_this1.y += f_y * s;
		_this.canSleep = false;
		_this.motion = 10;
		_this.bounceCount = 0;
		if(!b.body.inWaterPrev) {
			var tmp = this.particleEngine;
			var _this2 = b.aabb;
			var min = _this2.position.x - _this2.extents.x;
			var _this3 = b.aabb;
			var max = _this3.position.x + _this3.extents.x;
			var tmp1 = Math.random() * (max - min) + min;
			var _this4 = a.aabb;
			tmp.EmitParticle(tmp1,_this4.position.y - _this4.extents.y,Math.random() * 40 + -20,Math.random() * -10 + -5,0,1,500,1,true,true,null,4,255,255,255,255);
			var tmp2 = this.particleEngine;
			var _this5 = b.aabb;
			var min1 = _this5.position.x - _this5.extents.x;
			var _this6 = b.aabb;
			var max1 = _this6.position.x + _this6.extents.x;
			var tmp3 = Math.random() * (max1 - min1) + min1;
			var _this7 = a.aabb;
			tmp2.EmitParticle(tmp3,_this7.position.y - _this7.extents.y,Math.random() * 40 + -20,Math.random() * -10 + -5,0,1,500,1,true,true,null,4,255,255,255,255);
			var tmp4 = this.particleEngine;
			var _this8 = b.aabb;
			var min2 = _this8.position.x - _this8.extents.x;
			var _this9 = b.aabb;
			var max2 = _this9.position.x + _this9.extents.x;
			var tmp5 = Math.random() * (max2 - min2) + min2;
			var _this10 = a.aabb;
			tmp4.EmitParticle(tmp5,_this10.position.y - _this10.extents.y,Math.random() * 40 + -20,Math.random() * -10 + -5,0,1,500,1,true,true,null,4,255,255,255,255);
		} else {
			var _this11 = b.aabb;
			var _this12 = a.aabb;
			if(_this11.position.y - _this11.extents.y < _this12.position.y - _this12.extents.y) {
				var tmp6;
				if(Math.random() < 0.1) {
					var _this13 = a.entity;
					tmp6 = a.entity.map["Viewable"] != null;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					var tmp7 = this.particleEngine;
					var _this14 = b.aabb;
					var min3 = _this14.position.x - _this14.extents.x;
					var _this15 = b.aabb;
					var max3 = _this15.position.x + _this15.extents.x;
					var tmp8 = Math.random() * (max3 - min3) + min3;
					var _this16 = a.aabb;
					tmp7.EmitParticle(tmp8,_this16.position.y - _this16.extents.y,Math.random() * 40 + -20,Math.random() * -10 + -5,0,1,500,1,true,true,null,4,255,255,255,255);
				}
			}
		}
		b.body.inWater = true;
	}
	,__class__: glaze_engine_systems_WaterSystem
});
var glaze_engine_systems_environment_EnvironmentForceSystem = function() {
	this.temp = new glaze_geom_Vector2();
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsCollision,glaze_engine_components_Extents,glaze_engine_components_EnvironmentForce,glaze_engine_components_Active]);
};
glaze_engine_systems_environment_EnvironmentForceSystem.__name__ = ["glaze","engine","systems","environment","EnvironmentForceSystem"];
glaze_engine_systems_environment_EnvironmentForceSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_environment_EnvironmentForceSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		entity.map["PhysicsCollision"].proxy.contactCallbacks.push($bind(this,this.callback));
		var force = entity.map["EnvironmentForce"];
		this.setActiveForce(force,0);
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var force = entity.map["EnvironmentForce"];
			if(force.ttl > 0) {
				force.ttl -= delta;
				if(force.ttl <= 0) {
					motion_Actuate.tween(force,1,{ power : 0}).onComplete($bind(this,this.onFinished),[force]);
				}
			}
		}
	}
	,onFinished: function(force) {
		force.currentIndex++;
		if(force.currentIndex >= force.data.length) {
			force.currentIndex = 0;
		}
		this.setActiveForce(force,force.currentIndex);
	}
	,setActiveForce: function(envForce,index) {
		envForce.currentIndex = index;
		var item = envForce.data[index];
		var _this = envForce.direction;
		var v = item.direction;
		_this.x = v.x;
		_this.y = v.y;
		envForce.power = item.maxForce;
		var tmp;
		if(item.minDuration == 0) {
			tmp = -1;
		} else {
			var min = item.minDuration * 1000;
			var max = item.maxDuration * 1000;
			tmp = Math.random() * (max - min) + min;
		}
		envForce.ttl = tmp;
	}
	,callback: function(a,b,contact) {
		var area = a.aabb.overlapArea(b.aabb);
		var _this = a.entity;
		var force = a.entity.map["EnvironmentForce"];
		var _this1 = this.temp;
		var v = force.direction;
		_this1.x = v.x;
		_this1.y = v.y;
		var _this2 = this.temp;
		var s = force.power * area;
		_this2.x *= s;
		_this2.y *= s;
		var _this3 = b.body;
		var f = this.temp;
		var _this4 = _this3.forces;
		var s1 = _this3.invMass;
		_this4.x += f.x * s1;
		_this4.y += f.y * s1;
		_this3.canSleep = false;
		_this3.motion = 10;
		_this3.bounceCount = 0;
	}
	,__class__: glaze_engine_systems_environment_EnvironmentForceSystem
});
var glaze_engine_systems_environment_WindRenderSystem = function(particleEngine) {
	glaze_eco_core_System.call(this,[glaze_engine_components_Extents,glaze_engine_components_EnvironmentForce,glaze_engine_components_Wind,glaze_engine_components_Viewable,glaze_physics_components_PhysicsCollision,glaze_engine_components_Active]);
	this.particleEngine = particleEngine;
};
glaze_engine_systems_environment_WindRenderSystem.__name__ = ["glaze","engine","systems","environment","WindRenderSystem"];
glaze_engine_systems_environment_WindRenderSystem.__super__ = glaze_eco_core_System;
glaze_engine_systems_environment_WindRenderSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var extents = entity.map["Extents"];
		var units = extents.halfWidths.x * extents.halfWidths.y * 4 / 256;
		var wind = entity.map["Wind"];
		wind.incPerFrame = wind.particlePerUnitPerFrame * units;
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var wind = entity.map["Wind"];
			wind.particleCount += wind.incPerFrame;
			var proxy = entity.map["PhysicsCollision"].proxy;
			var envForce = entity.map["EnvironmentForce"];
			while(wind.particleCount > 1) {
				var tmp = this.particleEngine;
				var _this = proxy.aabb;
				var min = _this.position.x - _this.extents.x;
				var _this1 = proxy.aabb;
				var max = _this1.position.x + _this1.extents.x;
				var tmp1 = Math.random() * (max - min) + min;
				var _this2 = proxy.aabb;
				var min1 = _this2.position.y - _this2.extents.y;
				var _this3 = proxy.aabb;
				var max1 = _this3.position.y + _this3.extents.y;
				tmp.EmitParticle(tmp1,Math.random() * (max1 - min1) + min1,envForce.direction.x * envForce.power * 50,envForce.direction.y * envForce.power * 50,0,1,Math.floor(Math.random() * 200 + 200),1,true,true,null,4,255,255,255,255);
				wind.particleCount--;
			}
		}
	}
	,__class__: glaze_engine_systems_environment_WindRenderSystem
});
var glaze_geom_AABB = function() {
	this.extents = new glaze_geom_Vector2();
	this.position = new glaze_geom_Vector2();
};
glaze_geom_AABB.__name__ = ["glaze","geom","AABB"];
glaze_geom_AABB.prototype = {
	get_l: function() {
		return this.position.x - this.extents.x;
	}
	,get_t: function() {
		return this.position.y - this.extents.y;
	}
	,get_r: function() {
		return this.position.x + this.extents.x;
	}
	,get_b: function() {
		return this.position.y + this.extents.y;
	}
	,overlap: function(aabb) {
		if(Math.abs(this.position.x - aabb.position.x) > this.extents.x + aabb.extents.x) {
			return false;
		}
		if(Math.abs(this.position.y - aabb.position.y) > this.extents.y + aabb.extents.y) {
			return false;
		}
		return true;
	}
	,containsAABB: function(aabb) {
		return false;
	}
	,containsPoint: function(point) {
		if(Math.abs(point.x - this.position.x) < this.extents.x) {
			return Math.abs(point.y - this.position.y) < this.extents.y;
		} else {
			return false;
		}
	}
	,overlapArea: function(aabb) {
		var _l = Math.max(this.position.x - this.extents.x,aabb.position.x - aabb.extents.x);
		var _r = Math.min(this.position.x + this.extents.x,aabb.position.x + aabb.extents.x);
		var _t = Math.max(this.position.y - this.extents.y,aabb.position.y - aabb.extents.y);
		var _b = Math.min(this.position.y + this.extents.y,aabb.position.y + aabb.extents.y);
		return (_r - _l) * (_b - _t);
	}
	,area: function() {
		return this.extents.x * this.extents.y * 4;
	}
	,clone: function(aabb) {
		var aabb1 = new glaze_geom_AABB();
		var _this = aabb1.position;
		var v = this.position;
		_this.x = v.x;
		_this.y = v.y;
		var _this1 = aabb1.extents;
		var v1 = this.extents;
		_this1.x = v1.x;
		_this1.y = v1.y;
		return aabb1;
	}
	,__class__: glaze_geom_AABB
	,__properties__: {get_b:"get_b",get_r:"get_r",get_t:"get_t",get_l:"get_l"}
};
var glaze_geom_AABB2 = function(t,r,b,l) {
	if(l == null) {
		l = .0;
	}
	if(b == null) {
		b = .0;
	}
	if(r == null) {
		r = .0;
	}
	if(t == null) {
		t = .0;
	}
	this.b = -Infinity;
	this.r = -Infinity;
	this.t = Infinity;
	this.l = Infinity;
	this.t = t;
	this.r = r;
	this.b = b;
	this.l = l;
};
glaze_geom_AABB2.__name__ = ["glaze","geom","AABB2"];
glaze_geom_AABB2.prototype = {
	setToSweeptAABB: function(aabb,preditcedPosition) {
		this.l = aabb.position.x - aabb.extents.x;
		this.r = aabb.position.x + aabb.extents.x;
		this.t = aabb.position.y - aabb.extents.y;
		this.b = aabb.position.y + aabb.extents.y;
	}
	,fromAABB: function(aabb) {
	}
	,clone: function() {
		return new glaze_geom_AABB2(this.t,this.r,this.b,this.l);
	}
	,reset: function() {
		this.t = this.l = Infinity;
		this.r = this.b = -Infinity;
	}
	,get_width: function() {
		return this.r - this.l;
	}
	,get_height: function() {
		return this.b - this.t;
	}
	,intersect: function(aabb) {
		if(this.l > aabb.r) {
			return false;
		} else if(this.r < aabb.l) {
			return false;
		} else if(this.t > aabb.b) {
			return false;
		} else if(this.b < aabb.t) {
			return false;
		} else {
			return true;
		}
	}
	,addAABB: function(aabb) {
		if(aabb.t < this.t) {
			this.t = aabb.t;
		}
		if(aabb.r > this.r) {
			this.r = aabb.r;
		}
		if(aabb.b > this.b) {
			this.b = aabb.b;
		}
		if(aabb.l < this.l) {
			this.l = aabb.l;
		}
	}
	,addPoint: function(x,y) {
		if(x < this.l) {
			this.l = x;
		}
		if(x > this.r) {
			this.r = x;
		}
		if(y < this.t) {
			this.t = y;
		}
		if(y > this.b) {
			this.b = y;
		}
	}
	,fitPoint: function(point) {
		if(point.x < this.l) {
			point.x = this.l;
		}
		if(point.x > this.r) {
			point.x = this.r;
		}
		if(point.y < this.t) {
			point.y = this.t;
		}
		if(point.y > this.b) {
			point.y = this.b;
		}
	}
	,expand: function(i) {
		this.l -= i / 2;
		this.r += i / 2;
		this.t -= i / 2;
		this.b += i / 2;
	}
	,expand2: function(width,height) {
		this.l += width / 2;
		this.r -= width / 2;
		this.t += height / 2;
		this.b -= height / 2;
	}
	,__class__: glaze_geom_AABB2
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var glaze_geom_Matrix3 = function() { };
glaze_geom_Matrix3.__name__ = ["glaze","geom","Matrix3"];
glaze_geom_Matrix3.Create = function() {
	return glaze_geom_Matrix3.Identity(new Float32Array(9));
};
glaze_geom_Matrix3.Identity = function(matrix) {
	matrix[0] = 1;
	matrix[1] = 0;
	matrix[2] = 0;
	matrix[3] = 0;
	matrix[4] = 1;
	matrix[5] = 0;
	matrix[6] = 0;
	matrix[7] = 0;
	matrix[8] = 1;
	return matrix;
};
glaze_geom_Matrix3.Multiply = function(mat,mat2,dest) {
	if(dest != null) {
		dest = mat;
	}
	var a00 = mat[0];
	var a01 = mat[1];
	var a02 = mat[2];
	var a10 = mat[3];
	var a11 = mat[4];
	var a12 = mat[5];
	var a20 = mat[6];
	var a21 = mat[7];
	var a22 = mat[8];
	var b00 = mat2[0];
	var b01 = mat2[1];
	var b02 = mat2[2];
	var b10 = mat2[3];
	var b11 = mat2[4];
	var b12 = mat2[5];
	var b20 = mat2[6];
	var b21 = mat2[7];
	var b22 = mat2[8];
	dest[0] = b00 * a00 + b01 * a10 + b02 * a20;
	dest[1] = b00 * a01 + b01 * a11 + b02 * a21;
	dest[2] = b00 * a02 + b01 * a12 + b02 * a22;
	dest[3] = b10 * a00 + b11 * a10 + b12 * a20;
	dest[4] = b10 * a01 + b11 * a11 + b12 * a21;
	dest[5] = b10 * a02 + b11 * a12 + b12 * a22;
	dest[6] = b20 * a00 + b21 * a10 + b22 * a20;
	dest[7] = b20 * a01 + b21 * a11 + b22 * a21;
	dest[8] = b20 * a02 + b21 * a12 + b22 * a22;
	return dest;
};
glaze_geom_Matrix3.Clone = function(mat) {
	var matrix = new Float32Array(9);
	matrix[0] = mat[0];
	matrix[1] = mat[1];
	matrix[2] = mat[2];
	matrix[3] = mat[3];
	matrix[4] = mat[4];
	matrix[5] = mat[5];
	matrix[6] = mat[6];
	matrix[7] = mat[7];
	matrix[8] = mat[8];
	return matrix;
};
glaze_geom_Matrix3.Transpose = function(mat,dest) {
	if(dest != null || mat == dest) {
		var a01 = mat[1];
		var a02 = mat[2];
		var a12 = mat[5];
		mat[1] = mat[3];
		mat[2] = mat[6];
		mat[3] = a01;
		mat[5] = mat[7];
		mat[6] = a02;
		mat[7] = a12;
		return mat;
	}
	dest[0] = mat[0];
	dest[1] = mat[3];
	dest[2] = mat[6];
	dest[3] = mat[1];
	dest[4] = mat[4];
	dest[5] = mat[7];
	dest[6] = mat[2];
	dest[7] = mat[5];
	dest[8] = mat[8];
	return dest;
};
glaze_geom_Matrix3.ToMatrix4 = function(mat,dest) {
	if(dest == null) {
		dest = glaze_geom_Matrix4.Create();
	}
	dest[15] = 1;
	dest[14] = 0;
	dest[13] = 0;
	dest[12] = 0;
	dest[11] = 0;
	dest[10] = mat[8];
	dest[9] = mat[7];
	dest[8] = mat[6];
	dest[7] = 0;
	dest[6] = mat[5];
	dest[5] = mat[4];
	dest[4] = mat[3];
	dest[3] = 0;
	dest[2] = mat[2];
	dest[1] = mat[1];
	dest[0] = mat[0];
	return dest;
};
var glaze_geom_Matrix4 = function() { };
glaze_geom_Matrix4.__name__ = ["glaze","geom","Matrix4"];
glaze_geom_Matrix4.Create = function() {
	return glaze_geom_Matrix4.Identity(new Float32Array(16));
};
glaze_geom_Matrix4.Identity = function(matrix) {
	matrix[0] = 1;
	matrix[1] = 0;
	matrix[2] = 0;
	matrix[3] = 0;
	matrix[4] = 0;
	matrix[5] = 1;
	matrix[6] = 0;
	matrix[7] = 0;
	matrix[8] = 0;
	matrix[9] = 0;
	matrix[10] = 1;
	matrix[11] = 0;
	matrix[12] = 0;
	matrix[13] = 0;
	matrix[14] = 0;
	matrix[15] = 1;
	return matrix;
};
glaze_geom_Matrix4.Transpose = function(mat,dest) {
	if(dest != null || mat == dest) {
		var a01 = mat[1];
		var a02 = mat[2];
		var a03 = mat[3];
		var a12 = mat[6];
		var a13 = mat[7];
		var a23 = mat[11];
		mat[1] = mat[4];
		mat[2] = mat[8];
		mat[3] = mat[12];
		mat[4] = a01;
		mat[6] = mat[9];
		mat[7] = mat[13];
		mat[8] = a02;
		mat[9] = a12;
		mat[11] = mat[14];
		mat[12] = a03;
		mat[13] = a13;
		mat[14] = a23;
		return mat;
	}
	dest[0] = mat[0];
	dest[1] = mat[4];
	dest[2] = mat[8];
	dest[3] = mat[12];
	dest[4] = mat[1];
	dest[5] = mat[5];
	dest[6] = mat[9];
	dest[7] = mat[13];
	dest[8] = mat[2];
	dest[9] = mat[6];
	dest[10] = mat[10];
	dest[11] = mat[14];
	dest[12] = mat[3];
	dest[13] = mat[7];
	dest[14] = mat[11];
	dest[15] = mat[15];
	return dest;
};
glaze_geom_Matrix4.Multiply = function(mat,mat2,dest) {
	if(dest != null) {
		dest = mat;
	}
	var a00 = mat[0];
	var a01 = mat[1];
	var a02 = mat[2];
	var a03 = mat[3];
	var a10 = mat[4];
	var a11 = mat[5];
	var a12 = mat[6];
	var a13 = mat[7];
	var a20 = mat[8];
	var a21 = mat[9];
	var a22 = mat[10];
	var a23 = mat[11];
	var a30 = mat[12];
	var a31 = mat[13];
	var a32 = mat[14];
	var a33 = mat[15];
	var b0 = mat2[0];
	var b1 = mat2[1];
	var b2 = mat2[2];
	var b3 = mat2[3];
	dest[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	dest[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	dest[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	dest[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	b0 = mat2[4];
	b1 = mat2[5];
	b2 = mat2[6];
	b3 = mat2[7];
	dest[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	dest[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	dest[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	dest[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	b0 = mat2[8];
	b1 = mat2[9];
	b2 = mat2[10];
	b3 = mat2[11];
	dest[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	dest[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	dest[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	dest[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	b0 = mat2[12];
	b1 = mat2[13];
	b2 = mat2[14];
	b3 = mat2[15];
	dest[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	dest[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	dest[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	dest[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	return dest;
};
var glaze_geom_Plane = function() {
	this.d = 0;
	this.n = new glaze_geom_Vector2();
};
glaze_geom_Plane.__name__ = ["glaze","geom","Plane"];
glaze_geom_Plane.prototype = {
	set: function(n,q) {
		var _this = this.n;
		_this.x = n.x;
		_this.y = n.y;
		var _this1 = this.n;
		this.d = _this1.x * q.x + _this1.y * q.y;
	}
	,setFromSegment: function(s,e) {
		var _this = this.n;
		_this.x = s.x;
		_this.y = s.y;
		var _this1 = this.n;
		_this1.x -= e.x;
		_this1.y -= e.y;
		var _this2 = this.n;
		var t = Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y) + 1e-08;
		_this2.x /= t;
		_this2.y /= t;
		var _this3 = this.n;
		var t1 = _this3.x;
		_this3.x = _this3.y;
		_this3.y = -t1;
		var _this4 = this.n;
		this.d = _this4.x * s.x + _this4.y * s.y;
	}
	,distancePoint: function(q) {
		var _this = this.n;
		return _this.x * q.x + _this.y * q.y - this.d;
	}
	,__class__: glaze_geom_Plane
};
var glaze_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0.;
	}
	if(width == null) {
		width = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
glaze_geom_Rectangle.__name__ = ["glaze","geom","Rectangle"];
glaze_geom_Rectangle.prototype = {
	__class__: glaze_geom_Rectangle
};
var glaze_geom_Segment = function() {
	this.sign = new glaze_geom_Vector2();
	this.scale = new glaze_geom_Vector2();
	this.delta = new glaze_geom_Vector2();
	this.end = new glaze_geom_Vector2();
	this.start = new glaze_geom_Vector2();
};
glaze_geom_Segment.__name__ = ["glaze","geom","Segment"];
glaze_geom_Segment.prototype = {
	set: function(s,e) {
		var _this = this.start;
		_this.x = s.x;
		_this.y = s.y;
		var _this1 = this.end;
		_this1.x = e.x;
		_this1.y = e.y;
		var _this2 = this.delta;
		var v = this.end;
		_this2.x = v.x;
		_this2.y = v.y;
		var _this3 = this.delta;
		var v1 = this.start;
		_this3.x -= v1.x;
		_this3.y -= v1.y;
		var _this4 = this.scale;
		_this4.x = 1 / this.delta.x;
		_this4.y = 1 / this.delta.y;
		this.sign.x = this.delta.x < 0 ? -1 : 1;
		this.sign.y = this.delta.y < 0 ? -1 : 1;
	}
	,__class__: glaze_geom_Segment
};
var glaze_lighting_components_Light = function(range,attenuation,intensity,flicker,red,green,blue) {
	this.range = range;
	this.attenuation = attenuation;
	this.intensity = intensity;
	this.flicker = flicker;
	this.red = red;
	this.green = green;
	this.blue = blue;
};
glaze_lighting_components_Light.__name__ = ["glaze","lighting","components","Light"];
glaze_lighting_components_Light.__interfaces__ = [glaze_eco_core_IComponent];
glaze_lighting_components_Light.prototype = {
	__class__: glaze_lighting_components_Light
};
var glaze_particle_BlockSpriteParticle = function() {
};
glaze_particle_BlockSpriteParticle.__name__ = ["glaze","particle","BlockSpriteParticle"];
glaze_particle_BlockSpriteParticle.prototype = {
	Initalize: function(x,y,vX,vY,fX,fY,ttl,damping,decay,top,externalForce,data1,data2,data3,data4,data5) {
		this.pX = x;
		this.pY = y;
		this.vX = vX;
		this.vY = vY;
		this.fX = fX;
		this.fY = fY;
		this.ttl = ttl;
		this.age = ttl;
		this.damping = damping;
		this.decay = decay;
		this.externalForce = externalForce;
		this.size = data1;
		this.alpha = data2 * 0.00392156862745098;
		this.red = data3;
		this.green = data4;
		this.blue = data5;
	}
	,Update: function(deltaTime,invDeltaTime) {
		this.vX += this.fX + this.externalForce.x;
		this.vY += this.fY + this.externalForce.y;
		this.vX *= this.damping;
		this.vY *= this.damping;
		this.pX += this.vX * invDeltaTime;
		this.pY += this.vY * invDeltaTime;
		this.age -= deltaTime;
		this.alpha -= this.decay;
		return this.age > 0;
	}
	,__class__: glaze_particle_BlockSpriteParticle
};
var glaze_particle_IParticleEngine = function() { };
glaze_particle_IParticleEngine.__name__ = ["glaze","particle","IParticleEngine"];
glaze_particle_IParticleEngine.prototype = {
	__class__: glaze_particle_IParticleEngine
};
var glaze_particle_BlockSpriteParticleEngine = function(particleCount,deltaTime,map) {
	this.particleCount = particleCount;
	this.deltaTime = deltaTime;
	this.invDeltaTime = deltaTime / 1000;
	this.map = map;
	this.ZERO_FORCE = new glaze_geom_Vector2();
	var _g1 = 0;
	var _g = particleCount;
	while(_g1 < _g) {
		var i = _g1++;
		var p = new glaze_particle_BlockSpriteParticle();
		p.next = this.cachedParticles;
		this.cachedParticles = p;
	}
	this.renderer = new glaze_render_renderers_webgl_PointSpriteLightMapRenderer(particleCount);
};
glaze_particle_BlockSpriteParticleEngine.__name__ = ["glaze","particle","BlockSpriteParticleEngine"];
glaze_particle_BlockSpriteParticleEngine.__interfaces__ = [glaze_particle_IParticleEngine];
glaze_particle_BlockSpriteParticleEngine.prototype = {
	EmitParticle: function(x,y,vX,vY,fX,fY,ttl,damping,decayable,top,externalForce,data1,data2,data3,data4,data5) {
		if(this.cachedParticles == null) {
			return false;
		}
		var particle = this.cachedParticles;
		this.cachedParticles = this.cachedParticles.next;
		if(this.activeParticles == null) {
			this.activeParticles = particle;
			particle.next = particle.prev = null;
		} else {
			particle.next = this.activeParticles;
			particle.prev = null;
			this.activeParticles.prev = particle;
			this.activeParticles = particle;
		}
		particle.pX = x;
		particle.pY = y;
		particle.vX = vX;
		particle.vY = vY;
		particle.fX = fX;
		particle.fY = fY;
		particle.ttl = ttl;
		particle.age = ttl;
		particle.damping = damping;
		particle.decay = decayable ? this.deltaTime / ttl : 0;
		particle.externalForce = externalForce != null ? externalForce : this.ZERO_FORCE;
		particle.size = data1;
		particle.alpha = data2 * 0.00392156862745098;
		particle.red = data3;
		particle.green = data4;
		particle.blue = data5;
		return true;
	}
	,Update: function() {
		this.renderer.ResetBatch();
		var particle = this.activeParticles;
		while(particle != null) {
			var valid;
			var invDeltaTime = this.invDeltaTime;
			particle.vX += particle.fX + particle.externalForce.x;
			particle.vY += particle.fY + particle.externalForce.y;
			particle.vX *= particle.damping;
			particle.vY *= particle.damping;
			particle.pX += particle.vX * invDeltaTime;
			particle.pY += particle.vY * invDeltaTime;
			particle.age -= this.deltaTime;
			particle.alpha -= particle.decay;
			if(particle.age > 0) {
				var _this = this.map;
				valid = (_this.data.b[(particle.pY * _this.invCellSize | 0) * _this.internalWidth + (particle.pX * _this.invCellSize | 0) * _this.bytesPerCell] & 1) != 1;
			} else {
				valid = false;
			}
			if(!valid) {
				var next = particle.next;
				if(particle.prev == null) {
					this.activeParticles = particle.next;
				} else {
					particle.prev.next = particle.next;
				}
				if(particle.next != null) {
					particle.next.prev = particle.prev;
				}
				particle.next = this.cachedParticles;
				this.cachedParticles = particle;
				particle = next;
			} else {
				this.renderer.AddSpriteToBatch(particle.pX,particle.pY,particle.size,particle.alpha * 255 | 0,particle.red,particle.green,particle.blue);
				particle = particle.next;
			}
		}
	}
	,__class__: glaze_particle_BlockSpriteParticleEngine
};
var glaze_particle_ParticleFrame = function(x,y,w,h) {
	this.x = x;
	this.y = y;
	this.w = w;
	this.h = h;
};
glaze_particle_ParticleFrame.__name__ = ["glaze","particle","ParticleFrame"];
glaze_particle_ParticleFrame.prototype = {
	__class__: glaze_particle_ParticleFrame
};
var glaze_particle_PointSpriteParticle = function() {
};
glaze_particle_PointSpriteParticle.__name__ = ["glaze","particle","PointSpriteParticle"];
glaze_particle_PointSpriteParticle.prototype = {
	Initalize: function(x,y,vX,vY,fX,fY,ttl,damping,decay,top,externalForce,sequence,data2,data3,data4,data5) {
		this.pX = x;
		this.pY = y;
		this.vX = vX;
		this.vY = vY;
		this.fX = fX;
		this.fY = fY;
		this.ttl = sequence.ttl();
		this.age = 0;
		this.damping = damping;
		this.decay = decay;
		this.externalForce = externalForce;
		this.sequence = sequence;
		this.currentFrame = 0;
		this.currentInc = 0;
		this.msPerInc = this.ttl / sequence.len;
		this.size = data2;
		this.flipX = data3;
		this.flipY = data4;
		this.colour = 0;
	}
	,Update: function(deltaTime,invDeltaTime) {
		this.vX += this.fX + this.externalForce.x;
		this.vY += this.fY + this.externalForce.y;
		this.vX *= this.damping;
		this.vY *= this.damping;
		this.pX += this.vX * invDeltaTime;
		this.pY += this.vY * invDeltaTime;
		this.age += deltaTime;
		this.alpha = 1;
		this.currentInc += deltaTime;
		if(this.currentInc >= this.msPerInc) {
			this.currentFrame++;
			this.currentInc = 0;
		}
		return this.age < this.ttl;
	}
	,__class__: glaze_particle_PointSpriteParticle
};
var glaze_particle_PointSpriteParticleEngine = function(particleCount,deltaTime,spriteParticleManager,map) {
	this.particleCount = particleCount;
	this.deltaTime = deltaTime;
	this.invDeltaTime = deltaTime / 1000;
	this.spriteParticleManager = spriteParticleManager;
	this.map = map;
	this.ZERO_FORCE = new glaze_geom_Vector2();
	var _g1 = 0;
	var _g = particleCount;
	while(_g1 < _g) {
		var i = _g1++;
		var p = new glaze_particle_PointSpriteParticle();
		p.next = this.cachedParticles;
		this.cachedParticles = p;
	}
	this.renderer = new glaze_render_renderers_webgl_PointSpriteRenderer(particleCount);
};
glaze_particle_PointSpriteParticleEngine.__name__ = ["glaze","particle","PointSpriteParticleEngine"];
glaze_particle_PointSpriteParticleEngine.__interfaces__ = [glaze_particle_IParticleEngine];
glaze_particle_PointSpriteParticleEngine.prototype = {
	EmitParticle: function(x,y,vX,vY,fX,fY,ttl,damping,decayable,top,externalForce,data1,data2,data3,data4,data5) {
		if(this.cachedParticles == null) {
			return false;
		}
		var particle = this.cachedParticles;
		this.cachedParticles = this.cachedParticles.next;
		if(this.activeParticles == null) {
			this.activeParticles = particle;
			particle.next = particle.prev = null;
		} else {
			particle.next = this.activeParticles;
			particle.prev = null;
			this.activeParticles.prev = particle;
			this.activeParticles = particle;
		}
		var externalForce1 = externalForce != null ? externalForce : this.ZERO_FORCE;
		var sequence = this.spriteParticleManager.sequencesList[data1];
		particle.pX = x;
		particle.pY = y;
		particle.vX = vX;
		particle.vY = vY;
		particle.fX = fX;
		particle.fY = fY;
		particle.ttl = sequence.ttl();
		particle.age = 0;
		particle.damping = damping;
		particle.decay = 0;
		particle.externalForce = externalForce1;
		particle.sequence = sequence;
		particle.currentFrame = 0;
		particle.currentInc = 0;
		particle.msPerInc = particle.ttl / sequence.len;
		particle.size = data2;
		particle.flipX = data3;
		particle.flipY = data4;
		particle.colour = 0;
		return true;
	}
	,Update: function() {
		this.renderer.ResetBatch();
		var particle = this.activeParticles;
		while(particle != null) {
			var deltaTime = this.deltaTime;
			var invDeltaTime = this.invDeltaTime;
			particle.vX += particle.fX + particle.externalForce.x;
			particle.vY += particle.fY + particle.externalForce.y;
			particle.vX *= particle.damping;
			particle.vY *= particle.damping;
			particle.pX += particle.vX * invDeltaTime;
			particle.pY += particle.vY * invDeltaTime;
			particle.age += deltaTime;
			particle.alpha = 1;
			particle.currentInc += deltaTime;
			if(particle.currentInc >= particle.msPerInc) {
				particle.currentFrame++;
				particle.currentInc = 0;
			}
			if(!(particle.age < particle.ttl)) {
				var next = particle.next;
				if(particle.prev == null) {
					this.activeParticles = particle.next;
				} else {
					particle.prev.next = particle.next;
				}
				if(particle.next != null) {
					particle.next.prev = particle.prev;
				}
				particle.next = this.cachedParticles;
				this.cachedParticles = particle;
				particle = next;
			} else {
				var frame = particle.sequence.sequence[Math.min(particle.currentFrame,particle.sequence.len - 1) | 0];
				this.renderer.AddSpriteToBatch(frame.x,frame.y,frame.w,frame.h,particle.pX,particle.pY,particle.size,1,particle.flipX,particle.flipY,0);
				particle = particle.next;
			}
		}
	}
	,__class__: glaze_particle_PointSpriteParticleEngine
};
var glaze_particle_SpriteParticleManager = function() {
	this.count = 0;
	this.frames = new haxe_ds_StringMap();
	this.sequences = new haxe_ds_StringMap();
	this.sequencesList = [];
};
glaze_particle_SpriteParticleManager.__name__ = ["glaze","particle","SpriteParticleManager"];
glaze_particle_SpriteParticleManager.prototype = {
	ParseSequenceJSON: function(sequenceConfig) {
		if(typeof(sequenceConfig) != "string") {
			return;
		}
		var sequenceData = JSON.parse(sequenceConfig);
		var fields = Reflect.fields(sequenceData);
		var _g = 0;
		while(_g < fields.length) {
			var prop = fields[_g];
			++_g;
			haxe_Log.trace(prop,{ fileName : "SpriteParticleManager.hx", lineNumber : 32, className : "glaze.particle.SpriteParticleManager", methodName : "ParseSequenceJSON"});
			var pattern = Reflect.field(sequenceData,prop);
			var seq = this.fromParticleSequencePattern(prop,pattern);
			var _this = this.sequences;
			if(__map_reserved[prop] != null) {
				_this.setReserved(prop,seq);
			} else {
				_this.h[prop] = seq;
			}
			this.sequencesList[seq.id] = seq;
		}
	}
	,ParseTexturePackerJSON: function(textureConfig) {
		if(typeof(textureConfig) != "string") {
			return;
		}
		var textureData = JSON.parse(textureConfig);
		var meta = Reflect.field(textureData,"meta");
		var width = meta.size.w;
		var height = meta.size.h;
		var fields = Reflect.fields(textureData.frames);
		var _g = 0;
		while(_g < fields.length) {
			var prop = fields[_g];
			++_g;
			var frame = Reflect.field(textureData.frames,prop);
			var pF = new glaze_particle_ParticleFrame(frame.frame.x / width,frame.frame.y / height,frame.frame.w / width,frame.frame.h / height);
			var _this = this.frames;
			if(__map_reserved[prop] != null) {
				_this.setReserved(prop,pF);
			} else {
				_this.h[prop] = pF;
			}
		}
	}
	,fromParticleSequencePattern: function(name,pattern) {
		var list = [];
		var _g1 = pattern.start;
		var _g = pattern.end + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this.frames;
			var key = StringTools.replace(pattern.pattern,"{x}","" + i);
			var frame = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			list.push(frame);
		}
		var sequence = new glaze_particle_SpriteParticleSequence(this.count++,name,list,pattern.fps);
		return sequence;
	}
	,__class__: glaze_particle_SpriteParticleManager
};
var glaze_particle_SpriteParticleSequence = function(id,name,sequence,fps) {
	this.id = id;
	this.name = name;
	this.sequence = sequence;
	this.fps = fps;
	this.len = sequence.length;
};
glaze_particle_SpriteParticleSequence.__name__ = ["glaze","particle","SpriteParticleSequence"];
glaze_particle_SpriteParticleSequence.prototype = {
	ttl: function() {
		return this.sequence.length / this.fps * 1000;
	}
	,__class__: glaze_particle_SpriteParticleSequence
};
var glaze_particle_emitter_FireballEmitter = function(rate,speed) {
	this.rate = rate;
	this.speed = speed;
	this.speed = 400;
};
glaze_particle_emitter_FireballEmitter.__name__ = ["glaze","particle","emitter","FireballEmitter"];
glaze_particle_emitter_FireballEmitter.__interfaces__ = [glaze_particle_emitter_IParticleEmitter];
glaze_particle_emitter_FireballEmitter.prototype = {
	update: function(time,entity,engine,spriteEngine) {
		var position = entity.map["Position"].coords;
		var body = entity.map["PhysicsBody"].body;
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var max = 2 * Math.PI;
			var angle = Math.random() * max;
			var vx = body.velocity.x + Math.cos(angle) * this.speed * (Math.random() * 2);
			var vy = body.velocity.y + Math.sin(angle) * this.speed * (Math.random() * 2);
			engine.EmitParticle(position.x,position.y,vx,vy,0,0,100,0.50,true,true,null,4,255,229,252,114);
		}
	}
	,__class__: glaze_particle_emitter_FireballEmitter
};
var glaze_particle_emitter_InterpolatedEmitter = function(rate,speed) {
	this.gap = 10;
	this.temp = new glaze_geom_Vector2();
	this.rate = rate;
	this.speed = speed;
};
glaze_particle_emitter_InterpolatedEmitter.__name__ = ["glaze","particle","emitter","InterpolatedEmitter"];
glaze_particle_emitter_InterpolatedEmitter.__interfaces__ = [glaze_particle_emitter_IParticleEmitter];
glaze_particle_emitter_InterpolatedEmitter.prototype = {
	update: function(time,entity,engine,spriteEngine) {
		var position = entity.map["Position"].coords;
		if(this.prevPosition == null) {
			this.prevPosition = new glaze_geom_Vector2(position.x,position.y);
		}
		var _this = this.temp;
		var v = this.prevPosition;
		_this.x = v.x;
		_this.y = v.y;
		var _this1 = this.temp;
		_this1.x -= position.x;
		_this1.y -= position.y;
		var _this2 = this.temp;
		var len = Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y) / this.gap | 0;
		if(len == 0) {
			len = 1;
		}
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var _this3 = this.temp;
			var v1 = this.prevPosition;
			var t = i / len;
			_this3.x = v1.x;
			_this3.y = v1.y;
			var s = 1 - t;
			_this3.x *= s;
			_this3.y *= s;
			_this3.x += position.x * t;
			_this3.y += position.y * t;
			var max = 2 * Math.PI;
			var angle = Math.random() * max;
			var vx = Math.cos(angle) * this.speed * (Math.random() * 2);
			var vy = Math.sin(angle) * this.speed * (Math.random() * 2);
			spriteEngine.EmitParticle(this.temp.x,this.temp.y,vx,vy,0,0,400 * (Math.random() * 1.09999999999999987 + 0.1) | 0,0.99,true,true,null,4,16,Math.random() < 0.5 ? 1 : -1,Math.random() < 0.5 ? 1 : -1,0);
		}
		var _this4 = this.prevPosition;
		_this4.x = position.x;
		_this4.y = position.y;
	}
	,update2: function(time,entity,engine,spriteEngine) {
		var position = entity.map["Position"].coords;
		if(this.prevPosition == null) {
			this.prevPosition = new glaze_geom_Vector2(position.x,position.y);
		}
		var _this = this.temp;
		var v = this.prevPosition;
		_this.x = v.x;
		_this.y = v.y;
		var _this1 = this.temp;
		_this1.x -= position.x;
		_this1.y -= position.y;
		var _this2 = this.temp;
		var len = Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y) / 9 | 0;
		if(len == 0) {
			len = 1;
		}
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var _this3 = this.temp;
			var v1 = this.prevPosition;
			var t = i / len;
			_this3.x = v1.x;
			_this3.y = v1.y;
			var s = 1 - t;
			_this3.x *= s;
			_this3.y *= s;
			_this3.x += position.x * t;
			_this3.y += position.y * t;
			var max = 2 * Math.PI;
			var angle = Math.random() * max;
			var vx = Math.cos(angle) * this.speed * (Math.random() * 2);
			var vy = Math.sin(angle) * this.speed * (Math.random() * 2);
			spriteEngine.EmitParticle(this.temp.x,this.temp.y,vx,vy,0,0,400 * (Math.random() * 1.09999999999999987 + 0.1) | 0,0.99,true,true,null,4,16,Math.random() < 0.5 ? 1 : -1,Math.random() < 0.5 ? 1 : -1,0);
		}
		var _this4 = this.prevPosition;
		_this4.x = position.x;
		_this4.y = position.y;
	}
	,__class__: glaze_particle_emitter_InterpolatedEmitter
};
var glaze_particle_emitter_ScanLineEmitter = function(interval,velocity,ttl,jitter) {
	this.velocity = velocity;
	this.interval = interval;
	this.ttl = ttl;
	this.jitter = jitter;
	this.lastTime = 0;
};
glaze_particle_emitter_ScanLineEmitter.__name__ = ["glaze","particle","emitter","ScanLineEmitter"];
glaze_particle_emitter_ScanLineEmitter.__interfaces__ = [glaze_particle_emitter_IParticleEmitter];
glaze_particle_emitter_ScanLineEmitter.prototype = {
	update: function(time,entity,engine,spriteEngine) {
		if(time - this.lastTime < this.interval) {
			return;
		}
		this.lastTime = time;
		var position = entity.map["Position"].coords;
		var extents = entity.map["Extents"].halfWidths;
		var _g = 0;
		while(_g < 16) {
			var x = _g++;
			var min = -this.jitter;
			var max = this.jitter;
			engine.EmitParticle(position.x - 16 + x * 2,position.y - extents.y,0,this.velocity + Math.floor(Math.random() * (max - min) + min),0,0,this.ttl,0.99,true,true,null,4,255,255,255,255);
		}
	}
	,__class__: glaze_particle_emitter_ScanLineEmitter
};
var glaze_physics_Body = function(material,mass) {
	if(mass == null) {
		mass = 1;
	}
	this.skip = false;
	this.debug = 0;
	this.bounceCount = 0;
	this.totalBounceCount = 0;
	this.collideOneWay = true;
	this.usesStairs = true;
	this.inWaterPrev = false;
	this.inWater = false;
	this.onGroundPrev = false;
	this.onGround = false;
	this.isSleeping = false;
	this.canSleep = false;
	this.motion = 10;
	this.dt = 0;
	this.invMass = 1;
	this.mass = 1;
	this.globalForceFactor = 1;
	this.damping = 1;
	this.isBullet = false;
	this.accumulatedForces = new glaze_geom_Vector2();
	this.forces = new glaze_geom_Vector2();
	this.maxVelocity = new glaze_geom_Vector2();
	this.maxScalarVelocity = 1000;
	this.stepContactCount = 0;
	this.tangent = new glaze_geom_Vector2();
	this.prevContactNormal = new glaze_geom_Vector2();
	this.contactNormal = new glaze_geom_Vector2();
	this.previousVelocity = new glaze_geom_Vector2();
	this.originalVelocity = new glaze_geom_Vector2();
	this.velocity = new glaze_geom_Vector2();
	this.previousPosition = new glaze_geom_Vector2();
	this.delta = new glaze_geom_Vector2();
	this.predictedPosition = new glaze_geom_Vector2();
	this.positionCorrection = new glaze_geom_Vector2();
	this.position = new glaze_geom_Vector2();
	this.material = material == null ? new glaze_physics_Material() : material;
	this.setMass(mass);
};
glaze_physics_Body.__name__ = ["glaze","physics","Body"];
glaze_physics_Body.Create = function(material,mass,bounces,globalForceFactor,maxScalarVelocity) {
	var body = new glaze_physics_Body(material);
	body.setMass(mass);
	body.setBounces(bounces);
	body.globalForceFactor = globalForceFactor;
	body.maxScalarVelocity = maxScalarVelocity;
	return body;
};
glaze_physics_Body.prototype = {
	update: function(dt,globalForces,globalDamping) {
		this.dt = dt;
		this.onGroundPrev = this.onGround;
		this.onGround = false;
		this.inWaterPrev = this.inWater;
		this.inWater = false;
		if(this.skip || this.isSleeping) {
			return;
		}
		var _this = this.velocity;
		this.motion = 0.99332805041467 * this.motion + 0.00667194958533001703 * (_this.x * _this.x + _this.y * _this.y);
		this.motion = Math.min(this.motion,0.009);
		this.canSleep = this.motion < 0.0009;
		var _this1 = this.previousVelocity;
		var v = this.velocity;
		_this1.x = v.x;
		_this1.y = v.y;
		var _this2 = this.forces;
		var s = this.globalForceFactor;
		_this2.x += globalForces.x * s;
		_this2.y += globalForces.y * s;
		var _this3 = this.velocity;
		var v1 = this.forces;
		_this3.x += v1.x;
		_this3.y += v1.y;
		var _this4 = this.velocity;
		var s1 = globalDamping * this.damping;
		_this4.x *= s1;
		_this4.y *= s1;
		if(this.maxScalarVelocity > 0) {
			var _this5 = this.velocity;
			var max = this.maxScalarVelocity;
			var l = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y);
			if(l > max) {
				var s2 = max / l;
				_this5.x *= s2;
				_this5.y *= s2;
			}
		} else {
			var _this6 = this.velocity;
			var v2 = this.maxVelocity;
			_this6.x = Math.min(Math.max(_this6.x,-v2.x),v2.x);
			_this6.y = Math.min(Math.max(_this6.y,-v2.y),v2.y);
		}
		var _this7 = this.originalVelocity;
		var v3 = this.velocity;
		_this7.x = v3.x;
		_this7.y = v3.y;
		var _this8 = this.predictedPosition;
		var v4 = this.position;
		_this8.x = v4.x;
		_this8.y = v4.y;
		var _this9 = this.predictedPosition;
		var v5 = this.velocity;
		_this9.x += v5.x * dt;
		_this9.y += v5.y * dt;
		var _this10 = this.previousPosition;
		var v6 = this.position;
		_this10.x = v6.x;
		_this10.y = v6.y;
		var _this11 = this.delta;
		var v7 = this.predictedPosition;
		_this11.x = v7.x;
		_this11.y = v7.y;
		var _this12 = this.delta;
		var v8 = this.position;
		_this12.x -= v8.x;
		_this12.y -= v8.y;
		var _this13 = this.prevContactNormal;
		var v9 = this.contactNormal;
		_this13.x = v9.x;
		_this13.y = v9.y;
		var _this14 = this.contactNormal;
		_this14.x = 0;
		_this14.y = 0;
		var _this15 = this.forces;
		_this15.x = 0;
		_this15.y = 0;
		this.damping = 1;
		this.stepContactCount = 0;
		this.toi = Infinity;
	}
	,respondStaticCollision: function(contact) {
		if(this.skip) {
			return false;
		}
		var seperation = Math.max(contact.distance,0);
		var penetration = Math.min(contact.distance,0);
		var _this = this.positionCorrection;
		var v = contact.normal;
		var s = penetration / this.dt;
		_this.x -= v.x * s;
		_this.y -= v.y * s;
		var _this1 = this.velocity;
		var v1 = contact.normal;
		var nv = _this1.x * v1.x + _this1.y * v1.y + seperation / this.dt;
		if(nv < 0) {
			this.stepContactCount++;
			var _this2 = this.velocity;
			var v2 = contact.normal;
			_this2.x -= v2.x * nv;
			_this2.y -= v2.y * nv;
			if(!(this.totalBounceCount != 0 && this.bounceCount < this.totalBounceCount) && contact.normal.y < 0) {
				this.onGround = true;
			}
			var _this3 = this.contactNormal;
			var v3 = contact.normal;
			_this3.x = v3.x;
			_this3.y = v3.y;
			return true;
		}
		return false;
	}
	,t: function(msg) {
		if(this.debug > 0) {
			haxe_Log.trace(msg,{ fileName : "Body.hx", lineNumber : 176, className : "glaze.physics.Body", methodName : "t"});
			this.debug--;
		}
	}
	,respondBulletCollision: function(contact) {
		if(contact.time <= this.toi) {
			this.toi = contact.time;
			var _this = this.positionCorrection;
			var v = contact.sweepPosition;
			_this.x = v.x;
			_this.y = v.y;
			var _this1 = this.contactNormal;
			var v1 = contact.normal;
			_this1.x = v1.x;
			_this1.y = v1.y;
			return true;
		}
		return false;
	}
	,updatePosition: function() {
		if(this.skip || this.isSleeping) {
			return;
		}
		if(this.isBullet) {
			if(this.toi < Infinity) {
				var _this = this.position;
				var v = this.positionCorrection;
				_this.x = v.x;
				_this.y = v.y;
				var _this1 = this.originalVelocity;
				var normal = this.contactNormal;
				var d = _this1.x * normal.x + _this1.y * normal.y;
				_this1.x -= 2 * d * normal.x;
				_this1.y -= 2 * d * normal.y;
				var _this2 = this.originalVelocity;
				var s = this.material.elasticity;
				_this2.x *= s;
				_this2.y *= s;
				var _this3 = this.velocity;
				var v1 = this.originalVelocity;
				_this3.x = v1.x;
				_this3.y = v1.y;
			} else {
				var _this4 = this.position;
				var v2 = this.predictedPosition;
				_this4.x = v2.x;
				_this4.y = v2.y;
			}
			return;
		}
		if(this.stepContactCount > 0 && !(this.totalBounceCount != 0 && this.bounceCount < this.totalBounceCount) && this.contactNormal.y < 0) {
			var _this5 = this.tangent;
			var v3 = this.contactNormal;
			_this5.x = v3.x;
			_this5.y = v3.y;
			var _this6 = this.tangent;
			var t = _this6.x;
			_this6.x = -_this6.y;
			_this6.y = t;
			var _this7 = this.originalVelocity;
			var v4 = this.tangent;
			var tv = (_this7.x * v4.x + _this7.y * v4.y) * this.material.friction;
			this.velocity.x -= this.tangent.x * tv;
			this.velocity.y -= this.tangent.y * tv;
		}
		var _this8 = this.positionCorrection;
		var v5 = this.velocity;
		_this8.x += v5.x;
		_this8.y += v5.y;
		var _this9 = this.positionCorrection;
		var s1 = this.dt;
		_this9.x *= s1;
		_this9.y *= s1;
		var _this10 = this.position;
		var v6 = this.positionCorrection;
		_this10.x += v6.x;
		_this10.y += v6.y;
		var _this11 = this.positionCorrection;
		_this11.x = 0;
		_this11.y = 0;
		if(this.stepContactCount > 0 && (this.totalBounceCount != 0 && this.bounceCount < this.totalBounceCount)) {
			var _this12 = this.originalVelocity;
			var normal1 = this.contactNormal;
			var d1 = _this12.x * normal1.x + _this12.y * normal1.y;
			_this12.x -= 2 * d1 * normal1.x;
			_this12.y -= 2 * d1 * normal1.y;
			var _this13 = this.originalVelocity;
			var s2 = this.material.elasticity;
			_this13.x *= s2;
			_this13.y *= s2;
			var _this14 = this.velocity;
			var v7 = this.originalVelocity;
			_this14.x = v7.x;
			_this14.y = v7.y;
			this.bounceCount++;
		}
	}
	,addForce: function(f) {
		var _this = this.forces;
		var s = this.invMass;
		_this.x += f.x * s;
		_this.y += f.y * s;
		this.canSleep = false;
		this.motion = 10;
		this.bounceCount = 0;
	}
	,addMasslessForce: function(f) {
		var _this = this.forces;
		_this.x += f.x;
		_this.y += f.y;
		this.canSleep = false;
		this.motion = 10;
		this.bounceCount = 0;
	}
	,addProportionalForce: function(f) {
		var _this = this.forces;
		var s = this.mass;
		_this.x += f.x * s;
		_this.y += f.y * s;
		this.canSleep = false;
		this.motion = 10;
		this.bounceCount = 0;
	}
	,setMass: function(mass) {
		this.mass = mass;
		this.invMass = 1 / mass;
	}
	,setMassFromVolumeMaterial: function(volume) {
		this.setMass(this.material.density * volume * 0.1);
	}
	,setStaticPosition: function(x,y) {
		var _this = this.position;
		_this.x = x;
		_this.y = y;
		var _this1 = this.positionCorrection;
		_this1.x = 0;
		_this1.y = 0;
		var _this2 = this.predictedPosition;
		_this2.x = 0;
		_this2.y = 0;
		var _this3 = this.forces;
		_this3.x = 0;
		_this3.y = 0;
		var _this4 = this.accumulatedForces;
		_this4.x = 0;
		_this4.y = 0;
		var _this5 = this.velocity;
		_this5.x = 0;
		_this5.y = 0;
		var _this6 = this.originalVelocity;
		_this6.x = 0;
		_this6.y = 0;
		var _this7 = this.delta;
		_this7.x = 0;
		_this7.y = 0;
		this.canSleep = false;
		this.motion = 10;
		this.bounceCount = 0;
	}
	,setBounces: function(count) {
		this.totalBounceCount = count;
		this.bounceCount = 0;
	}
	,get_canBounce: function() {
		if(this.totalBounceCount != 0) {
			return this.bounceCount < this.totalBounceCount;
		} else {
			return false;
		}
	}
	,wake: function() {
		this.canSleep = false;
		this.motion = 10;
		this.bounceCount = 0;
	}
	,get_down: function() {
		return this.contactNormal.y < 0;
	}
	,get_downPrev: function() {
		return this.prevContactNormal.y < 0;
	}
	,get_up: function() {
		return this.contactNormal.y > 0;
	}
	,get_upPrev: function() {
		return this.prevContactNormal.y > 0;
	}
	,get_left: function() {
		return this.contactNormal.x < 0;
	}
	,get_leftPrev: function() {
		return this.prevContactNormal.x < 0;
	}
	,get_right: function() {
		return this.contactNormal.x > 0;
	}
	,get_rightPrev: function() {
		return this.prevContactNormal.x > 0;
	}
	,__class__: glaze_physics_Body
	,__properties__: {get_rightPrev:"get_rightPrev",get_right:"get_right",get_leftPrev:"get_leftPrev",get_left:"get_left",get_upPrev:"get_upPrev",get_up:"get_up",get_downPrev:"get_downPrev",get_down:"get_down",get_canBounce:"get_canBounce"}
};
var glaze_physics_Material = function(density,elasticity,friction) {
	if(friction == null) {
		friction = 0.1;
	}
	if(elasticity == null) {
		elasticity = 0.3;
	}
	if(density == null) {
		density = 1;
	}
	this.density = density;
	this.elasticity = elasticity;
	this.friction = friction;
};
glaze_physics_Material.__name__ = ["glaze","physics","Material"];
glaze_physics_Material.prototype = {
	__class__: glaze_physics_Material
};
var glaze_physics_collision_BFProxy = function() {
	this.contactCallbacks = [];
	this.userData2 = -1;
	this.userData1 = -1;
	this.limitToStaticCheck = false;
	this.isActive = true;
	this.isSensor = false;
	this.isStatic = false;
	this.aabb = new glaze_geom_AABB();
	this.offset = new glaze_geom_Vector2();
	this.responseBias = new glaze_geom_Vector2(1,1);
	this.id = glaze_physics_collision_BFProxy.nextID++;
};
glaze_physics_collision_BFProxy.__name__ = ["glaze","physics","collision","BFProxy"];
glaze_physics_collision_BFProxy.HashBodyIDs = function(a,b) {
	if(a < b) {
		return a << 16 | b;
	} else {
		return b << 16 | a;
	}
};
glaze_physics_collision_BFProxy.prototype = {
	setBody: function(body) {
		this.body = body;
		this.aabb.position = body.position;
		this.isStatic = false;
	}
	,collide: function(proxy,contact) {
		var _g = 0;
		var _g1 = this.contactCallbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(this,proxy,contact);
		}
	}
	,__class__: glaze_physics_collision_BFProxy
};
var glaze_physics_collision_Contact = function() {
	this.sweepPosition = new glaze_geom_Vector2();
	this.time = 0;
	this.distance = 0;
	this.normal = new glaze_geom_Vector2();
	this.delta = new glaze_geom_Vector2();
	this.position = new glaze_geom_Vector2();
};
glaze_physics_collision_Contact.__name__ = ["glaze","physics","collision","Contact"];
glaze_physics_collision_Contact.prototype = {
	setTo: function(contact) {
		this.position.x = contact.position.x;
		this.position.y = contact.position.y;
		this.delta.x = contact.delta.x;
		this.delta.y = contact.delta.y;
		this.normal.x = contact.normal.x;
		this.normal.y = contact.normal.y;
		this.time = contact.time;
		this.distance = contact.distance;
		this.sweepPosition.x = contact.sweepPosition.x;
		this.sweepPosition.y = contact.sweepPosition.y;
	}
	,__class__: glaze_physics_collision_Contact
};
var glaze_physics_collision_Filter = function(categoryBits,maskBits,groupIndex) {
	if(groupIndex == null) {
		groupIndex = 0;
	}
	if(maskBits == null) {
		maskBits = -1;
	}
	if(categoryBits == null) {
		categoryBits = 1;
	}
	this.maskBits = -1;
	this.categoryBits = 1;
	this.groupIndex = 0;
	this.categoryBits = categoryBits;
	this.maskBits = maskBits;
	this.groupIndex = groupIndex;
};
glaze_physics_collision_Filter.__name__ = ["glaze","physics","collision","Filter"];
glaze_physics_collision_Filter.CHECK = function(filterA,filterB) {
	if(filterA == null || filterB == null) {
		return true;
	}
	if(filterA.groupIndex == filterB.groupIndex && filterA.groupIndex != 0) {
		return filterA.groupIndex > 0;
	}
	if((filterA.maskBits & filterB.categoryBits) != 0) {
		return (filterA.categoryBits & filterB.maskBits) != 0;
	} else {
		return false;
	}
};
glaze_physics_collision_Filter.prototype = {
	clone: function() {
		return new glaze_physics_collision_Filter(this.categoryBits,this.maskBits,this.groupIndex);
	}
	,__class__: glaze_physics_collision_Filter
};
var glaze_physics_collision_Intersect = function() {
	this.collideCount = 0;
	this.ray = new glaze_physics_collision_Ray();
	this.contact = new glaze_physics_collision_Contact();
};
glaze_physics_collision_Intersect.__name__ = ["glaze","physics","collision","Intersect"];
glaze_physics_collision_Intersect.StaticAABBvsStaticAABB = function(aabb_position_A,aabb_extents_A,aabb_position_B,aabb_extents_B,contact) {
	var dx = aabb_position_B.x - aabb_position_A.x;
	var px = aabb_extents_B.x + aabb_extents_A.x - Math.abs(dx);
	if(px <= 0) {
		return false;
	}
	var dy = aabb_position_B.y - aabb_position_A.y;
	var py = aabb_extents_B.y + aabb_extents_A.y - Math.abs(dy);
	if(py <= 0) {
		return false;
	}
	if(px < py) {
		var sx = dx < 0 ? -1 : 1;
		contact.distance = contact.delta.x = px * sx;
		contact.delta.y = 0;
		contact.normal.x = sx;
		contact.normal.y = 0;
		contact.position.x = aabb_position_A.x + aabb_extents_A.x * sx;
		contact.position.y = aabb_position_B.y;
	} else {
		var sy = dy < 0 ? -1 : 1;
		contact.delta.x = 0;
		contact.distance = contact.delta.y = py * sy;
		contact.normal.x = 0;
		contact.normal.y = sy;
		contact.position.x = aabb_position_B.x;
		contact.position.y = aabb_position_A.y + aabb_extents_A.y * sy;
	}
	return true;
};
glaze_physics_collision_Intersect.IsSegVsAABB = function(segment,aabb_position,aabb_extents,paddingX,paddingY) {
	return glaze_physics_collision_Intersect.IsStaticSegmentvsStaticAABB(aabb_position,aabb_extents,segment.start,segment.scale,segment.sign,paddingX,paddingY);
};
glaze_physics_collision_Intersect.IsStaticSegmentvsStaticAABB = function(aabb_position,aabb_extents,segment_position,scale,sign,paddingX,paddingY) {
	var nearTimeX = (aabb_position.x - sign.x * (aabb_extents.x + paddingX) - segment_position.x) * scale.x;
	var nearTimeY = (aabb_position.y - sign.y * (aabb_extents.y + paddingY) - segment_position.y) * scale.y;
	var farTimeX = (aabb_position.x + sign.x * (aabb_extents.x + paddingX) - segment_position.x) * scale.x;
	var farTimeY = (aabb_position.y + sign.y * (aabb_extents.y + paddingY) - segment_position.y) * scale.y;
	if(nearTimeX > farTimeY || nearTimeY > farTimeX) {
		return false;
	}
	var nearTime = Math.max(nearTimeX,nearTimeY);
	var farTime = Math.min(farTimeX,farTimeY);
	if(nearTime >= 1 || farTime <= 0) {
		return false;
	}
	return true;
};
glaze_physics_collision_Intersect.StaticSegmentvsStaticAABB = function(aabb_position,aabb_extents,segment_position,segment_delta,paddingX,paddingY,contact) {
	var scaleX = 1 / segment_delta.x;
	var scaleY = 1 / segment_delta.y;
	var signX = scaleX < 0 ? -1 : 1;
	var signY = scaleY < 0 ? -1 : 1;
	var nearTimeX = (aabb_position.x - signX * (aabb_extents.x + paddingX) - segment_position.x) * scaleX;
	var nearTimeY = (aabb_position.y - signY * (aabb_extents.y + paddingY) - segment_position.y) * scaleY;
	var farTimeX = (aabb_position.x + signX * (aabb_extents.x + paddingX) - segment_position.x) * scaleX;
	var farTimeY = (aabb_position.y + signY * (aabb_extents.y + paddingY) - segment_position.y) * scaleY;
	if(nearTimeX > farTimeY || nearTimeY > farTimeX) {
		return false;
	}
	var nearTime = Math.max(nearTimeX,nearTimeY);
	var farTime = Math.min(farTimeX,farTimeY);
	if(nearTime >= 1 || farTime <= 0) {
		return false;
	}
	contact.time = Math.min(Math.max(nearTime,0),1);
	if(nearTimeX > nearTimeY) {
		contact.normal.x = -signX;
		contact.normal.y = 0;
	} else {
		contact.normal.x = 0;
		contact.normal.y = -signY;
	}
	contact.delta.x = contact.time * segment_delta.x;
	contact.delta.y = contact.time * segment_delta.y;
	contact.position.x = segment_position.x + contact.delta.x;
	contact.position.y = segment_position.y + contact.delta.y;
	return true;
};
glaze_physics_collision_Intersect.StaticAABBvsSweeptAABB = function(aabb_position_A,aabb_extents_A,aabb_position_B,aabb_extents_B,aabb_delta_B,contact) {
	if(aabb_delta_B.x == 0 && aabb_delta_B.y == 0) {
		contact.sweepPosition.x = aabb_position_B.x;
		contact.sweepPosition.y = aabb_position_B.y;
		if(glaze_physics_collision_Intersect.StaticAABBvsStaticAABB(aabb_position_A,aabb_extents_A,aabb_position_B,aabb_extents_B,contact)) {
			contact.time = 0;
			return true;
		} else {
			contact.time = 1;
			return false;
		}
	} else if(glaze_physics_collision_Intersect.StaticSegmentvsStaticAABB(aabb_position_A,aabb_extents_A,aabb_position_B,aabb_delta_B,aabb_extents_B.x,aabb_extents_B.y,contact)) {
		contact.time = Math.min(Math.max(contact.time - 1e-8,0),1);
		contact.sweepPosition.x = aabb_position_B.x + aabb_delta_B.x * contact.time;
		contact.sweepPosition.y = aabb_position_B.y + aabb_delta_B.y * contact.time;
		var t = Math.sqrt(aabb_delta_B.x * aabb_delta_B.x + aabb_delta_B.y * aabb_delta_B.y);
		contact.position.x += aabb_delta_B.x / t * aabb_extents_B.x;
		contact.position.y += aabb_delta_B.y / t * aabb_extents_B.y;
		return true;
	} else {
		contact.sweepPosition.x = aabb_position_B.x * aabb_delta_B.x;
		contact.sweepPosition.y = aabb_position_B.y * aabb_delta_B.y;
		return false;
	}
};
glaze_physics_collision_Intersect.AABBvsStaticSolidAABB = function(aabb_position_A,aabb_extents_A,aabb_position_B,aabb_extents_B,bias,contact) {
	var dx = aabb_position_B.x - aabb_position_A.x;
	var px = aabb_extents_B.x + aabb_extents_A.x - Math.abs(dx);
	var dy = aabb_position_B.y - aabb_position_A.y;
	var py = aabb_extents_B.y + aabb_extents_A.y - Math.abs(dy);
	if(px < py) {
		contact.normal.x = dx < 0 ? 1 : -1;
		contact.normal.y = 0;
	} else {
		contact.normal.x = 0;
		contact.normal.y = dy < 0 ? 1 : -1;
	}
	contact.normal.x *= bias.x;
	contact.normal.y *= bias.y;
	var pcx = contact.normal.x * (aabb_extents_A.x + aabb_extents_B.x) + aabb_position_B.x;
	var pcy = contact.normal.y * (aabb_extents_A.y + aabb_extents_B.y) + aabb_position_B.y;
	var pdx = aabb_position_A.x - pcx;
	var pdy = aabb_position_A.y - pcy;
	contact.distance = pdx * contact.normal.x + pdy * contact.normal.y;
	return true;
};
glaze_physics_collision_Intersect.AABBvsStaticSolidAABBFixedNormal = function(aabb_position_A,aabb_extents_A,aabb_position_B,aabb_extents_B,normal,contact) {
	var _this = contact.normal;
	_this.x = normal.x;
	_this.y = normal.y;
	var pcx = contact.normal.x * (aabb_extents_A.x + aabb_extents_B.x) + aabb_position_B.x;
	var pcy = contact.normal.y * (aabb_extents_A.y + aabb_extents_B.y) + aabb_position_B.y;
	var pdx = aabb_position_A.x - pcx;
	var pdy = aabb_position_A.y - pcy;
	contact.distance = pdx * contact.normal.x + pdy * contact.normal.y;
	return true;
};
glaze_physics_collision_Intersect.AABBvsStaticSolidAABBSlope = function(aabb_position_A,aabb_extents_A,aabb_position_B,aabb_extents_B,bias,contact) {
	var _sqr = 0.70710678118655;
	var dx = aabb_position_B.x - aabb_position_A.x;
	var px = aabb_extents_B.x + aabb_extents_A.x - Math.abs(dx);
	var dy = aabb_position_B.y - aabb_position_A.y;
	var py = aabb_extents_B.y + aabb_extents_A.y - Math.abs(dy);
	contact.normal.x = -_sqr;
	contact.normal.y = -_sqr;
	var pcx = contact.normal.x * (aabb_extents_A.x + aabb_extents_B.x) + aabb_position_B.x;
	var pcy = contact.normal.y * (aabb_extents_A.y + aabb_extents_B.y) + aabb_position_B.y;
	var pdx = aabb_position_A.x - pcx - 8;
	var pdy = aabb_position_A.y - pcy;
	contact.distance = pdx * contact.normal.x + pdy * contact.normal.y;
	return true;
};
glaze_physics_collision_Intersect.prototype = {
	Collide: function(proxyA,proxyB) {
		this.collideCount++;
		if(proxyA.isStatic && proxyB.isStatic || proxyA.isSensor && proxyB.isSensor) {
			return false;
		}
		if(!proxyA.isActive || !proxyB.isActive) {
			return false;
		}
		if(!glaze_physics_collision_Filter.CHECK(proxyA.filter,proxyB.filter)) {
			return false;
		}
		var collided = false;
		if(proxyA.isSensor || proxyB.isSensor) {
			collided = glaze_physics_collision_Intersect.StaticAABBvsStaticAABB(proxyA.aabb.position,proxyA.aabb.extents,proxyB.aabb.position,proxyB.aabb.extents,this.contact);
		} else if(!proxyA.isStatic && !proxyB.isStatic) {
			if(proxyA.body.isBullet && proxyB.body.isBullet) {
				return false;
			} else if(proxyA.body.isBullet) {
				if(glaze_physics_collision_Intersect.StaticAABBvsSweeptAABB(proxyB.aabb.position,proxyB.aabb.extents,proxyA.aabb.position,proxyA.aabb.extents,proxyA.body.delta,this.contact) == true) {
					proxyA.body.respondBulletCollision(this.contact);
					collided = true;
				}
			} else if(proxyB.body.isBullet) {
				if(glaze_physics_collision_Intersect.StaticAABBvsSweeptAABB(proxyA.aabb.position,proxyA.aabb.extents,proxyB.aabb.position,proxyB.aabb.extents,proxyB.body.delta,this.contact) == true) {
					proxyB.body.respondBulletCollision(this.contact);
					collided = true;
				}
			} else {
				collided = glaze_physics_collision_Intersect.StaticAABBvsStaticAABB(proxyA.aabb.position,proxyA.aabb.extents,proxyB.aabb.position,proxyB.aabb.extents,this.contact);
			}
		} else {
			var staticProxy;
			var dynamicProxy;
			if(proxyA.isStatic) {
				staticProxy = proxyA;
				dynamicProxy = proxyB;
			} else {
				staticProxy = proxyB;
				dynamicProxy = proxyA;
			}
			if(dynamicProxy.body.isBullet) {
				collided = this.BulletAABB(dynamicProxy,staticProxy);
				if(collided) {
					dynamicProxy.body.respondBulletCollision(this.contact);
				}
			} else {
				glaze_physics_collision_Intersect.AABBvsStaticSolidAABB(dynamicProxy.aabb.position,dynamicProxy.aabb.extents,staticProxy.aabb.position,staticProxy.aabb.extents,staticProxy.responseBias,this.contact);
				collided = dynamicProxy.body.respondStaticCollision(this.contact);
			}
		}
		if(collided == true) {
			proxyA.collide(proxyB,this.contact);
			proxyB.collide(proxyA,this.contact);
		}
		return collided;
	}
	,BulletAABB: function(segmentProxy,staticProxy) {
		return glaze_physics_collision_Intersect.StaticAABBvsSweeptAABB(staticProxy.aabb.position,staticProxy.aabb.extents,segmentProxy.aabb.position,segmentProxy.aabb.extents,segmentProxy.body.delta,this.contact);
	}
	,RayAABB: function(ray,proxy) {
		if(glaze_physics_collision_Intersect.StaticSegmentvsStaticAABB(proxy.aabb.position,proxy.aabb.extents,ray.origin,ray.delta,0,0,this.contact)) {
			ray.report(this.contact.delta.x,this.contact.delta.y,this.contact.normal.x,this.contact.normal.y,proxy);
			return true;
		}
		return false;
	}
	,Spring: function(bodyA,bodyB,length,k) {
		var dx = bodyA.position.x - bodyB.position.x;
		var dy = bodyA.position.y - bodyB.position.y;
		var dist = Math.sqrt(dx * dx + dy * dy);
		if(dist < length) {
			return;
		}
		var dx_n = dx / dist;
		var dy_n = dy / dist;
		var true_offset = dist - length;
		dx_n *= true_offset;
		dy_n *= true_offset;
		var fx = k * dx_n;
		var fy = k * dy_n;
		var f_y;
		var f_x = fx;
		f_y = fy;
		var _this = bodyA.forces;
		var s = bodyA.invMass;
		_this.x += f_x * s;
		_this.y += f_y * s;
		bodyA.canSleep = false;
		bodyA.motion = 10;
		bodyA.bounceCount = 0;
		var f_y1;
		var f_x1 = -fx;
		f_y1 = -fy;
		var _this1 = bodyB.forces;
		var s1 = bodyB.invMass;
		_this1.x += f_x1 * s1;
		_this1.y += f_y1 * s1;
		bodyB.canSleep = false;
		bodyB.motion = 10;
		bodyB.bounceCount = 0;
	}
	,__class__: glaze_physics_collision_Intersect
};
var glaze_physics_collision_Map = function(data) {
	this.segment = new glaze_geom_Segment();
	this.plane = new glaze_geom_Plane();
	this.step = new glaze_geom_Vector2(0,-1);
	this.bias = new glaze_geom_Vector2(1,1);
	this.halftileExtents = new glaze_geom_Vector2();
	this.halftilePosition = new glaze_geom_Vector2();
	this.tileExtents = new glaze_geom_Vector2();
	this.tilePosition = new glaze_geom_Vector2();
	this.data = data;
	this.tileSize = data.cellSize;
	this.tileHalfSize = this.tileSize / 2;
	var _this = this.tileExtents;
	_this.x = this.tileHalfSize;
	_this.y = this.tileHalfSize;
	var _this1 = this.halftileExtents;
	_this1.x = this.tileHalfSize / 4;
	_this1.y = this.tileHalfSize / 4;
	this.contact = new glaze_physics_collision_Contact();
	this.closestContact = new glaze_physics_collision_Contact();
};
glaze_physics_collision_Map.__name__ = ["glaze","physics","collision","Map"];
glaze_physics_collision_Map.prototype = {
	testCollision: function(proxy) {
		var body = proxy.body;
		var startX = (Math.min(body.position.x,body.predictedPosition.x) - proxy.aabb.extents.x) * this.data.invCellSize | 0;
		var startY = (Math.min(body.position.y,body.predictedPosition.y) - proxy.aabb.extents.y) * this.data.invCellSize | 0;
		var endX = ((Math.max(body.position.x,body.predictedPosition.x) + proxy.aabb.extents.x - .01) * this.data.invCellSize | 0) + 1;
		var endY = ((Math.max(body.position.y,body.predictedPosition.y) + proxy.aabb.extents.y) * this.data.invCellSize | 0) + 1;
		var c = 0;
		if(body.isBullet) {
			this.plane.setFromSegment(body.predictedPosition,body.position);
			this.closestContact.time = Infinity;
			var _g1 = startX;
			var _g = endX;
			while(_g1 < _g) {
				var x = _g1++;
				var _g3 = startY;
				var _g2 = endY;
				while(_g3 < _g2) {
					var y = _g3++;
					var _this = this.data;
					var cell = _this.data.b[y * _this.internalWidth + x * _this.bytesPerCell];
					if((cell & 1) == 1 && (cell & 2) == 0) {
						this.tilePosition.x = x * this.tileSize + this.tileHalfSize;
						this.tilePosition.y = y * this.tileSize + this.tileHalfSize;
						++c;
						if(Math.abs(this.plane.distancePoint(this.tilePosition)) < 40) {
							if(glaze_physics_collision_Intersect.StaticAABBvsSweeptAABB(this.tilePosition,this.tileExtents,body.position,proxy.aabb.extents,body.delta,this.contact) == true) {
								if(body.respondBulletCollision(this.contact)) {
									this.closestContact.setTo(this.contact);
								}
							}
						}
					}
				}
			}
			if(this.closestContact.time < Infinity) {
				proxy.collide(null,this.contact);
			}
		} else {
			this.segment.set(body.position,body.predictedPosition);
			var _g11 = startX;
			var _g4 = endX;
			while(_g11 < _g4) {
				var x1 = _g11++;
				var _g31 = startY;
				var _g21 = endY;
				while(_g31 < _g21) {
					var y1 = _g31++;
					var _this1 = this.data;
					var cell1 = _this1.data.b[y1 * _this1.internalWidth + x1 * _this1.bytesPerCell];
					if((cell1 & 7) > 0) {
						this.tilePosition.x = x1 * this.tileSize + this.tileHalfSize;
						this.tilePosition.y = y1 * this.tileSize + this.tileHalfSize;
						if((cell1 & 4) == 4 && body.usesStairs) {
							var _this2 = this.halftilePosition;
							var v = this.tilePosition;
							_this2.x = v.x;
							_this2.y = v.y;
							this.halftilePosition.x -= 6;
							this.halftilePosition.y += 6;
							if(glaze_physics_collision_Intersect.IsSegVsAABB(this.segment,this.halftilePosition,this.halftileExtents,proxy.aabb.extents.x,proxy.aabb.extents.y)) {
								glaze_physics_collision_Intersect.AABBvsStaticSolidAABBFixedNormal(body.position,proxy.aabb.extents,this.halftilePosition,this.halftileExtents,this.step,this.contact);
								body.respondStaticCollision(this.contact);
								proxy.collide(null,this.contact);
							}
							var _this3 = this.halftilePosition;
							var v1 = this.tilePosition;
							_this3.x = v1.x;
							_this3.y = v1.y;
							this.halftilePosition.x -= 2;
							this.halftilePosition.y += 2;
							if(glaze_physics_collision_Intersect.IsSegVsAABB(this.segment,this.halftilePosition,this.halftileExtents,proxy.aabb.extents.x,proxy.aabb.extents.y)) {
								glaze_physics_collision_Intersect.AABBvsStaticSolidAABBFixedNormal(body.position,proxy.aabb.extents,this.halftilePosition,this.halftileExtents,this.step,this.contact);
								body.respondStaticCollision(this.contact);
								proxy.collide(null,this.contact);
							}
							var _this4 = this.halftilePosition;
							var v2 = this.tilePosition;
							_this4.x = v2.x;
							_this4.y = v2.y;
							this.halftilePosition.x += 2;
							this.halftilePosition.y -= 2;
							if(glaze_physics_collision_Intersect.IsSegVsAABB(this.segment,this.halftilePosition,this.halftileExtents,proxy.aabb.extents.x,proxy.aabb.extents.y)) {
								glaze_physics_collision_Intersect.AABBvsStaticSolidAABBFixedNormal(body.position,proxy.aabb.extents,this.halftilePosition,this.halftileExtents,this.step,this.contact);
								body.respondStaticCollision(this.contact);
								proxy.collide(null,this.contact);
							}
							var _this5 = this.halftilePosition;
							var v3 = this.tilePosition;
							_this5.x = v3.x;
							_this5.y = v3.y;
							this.halftilePosition.x += 6;
							this.halftilePosition.y -= 6;
							if(glaze_physics_collision_Intersect.IsSegVsAABB(this.segment,this.halftilePosition,this.halftileExtents,proxy.aabb.extents.x,proxy.aabb.extents.y)) {
								glaze_physics_collision_Intersect.AABBvsStaticSolidAABBFixedNormal(body.position,proxy.aabb.extents,this.halftilePosition,this.halftileExtents,this.step,this.contact);
								body.respondStaticCollision(this.contact);
								proxy.collide(null,this.contact);
							}
						} else {
							glaze_physics_collision_Intersect.AABBvsStaticSolidAABB(body.position,proxy.aabb.extents,this.tilePosition,this.tileExtents,this.bias,this.contact);
							if((cell1 & 2) == 2) {
								if(body.collideOneWay && this.contact.normal.y < 0 && this.contact.distance >= -4.0) {
									body.respondStaticCollision(this.contact);
									proxy.collide(null,this.contact);
								}
							} else {
								var nextX = x1 + (this.contact.normal.x | 0);
								var nextY = y1 + (this.contact.normal.y | 0);
								var _this6 = this.data;
								var nextCell = _this6.data.b[nextY * _this6.internalWidth + nextX * _this6.bytesPerCell];
								if((nextCell & 7) == 0) {
									body.respondStaticCollision(this.contact);
									proxy.collide(null,this.contact);
								}
							}
						}
					}
				}
			}
		}
	}
	,iterateCells: function(aabb,cb) {
		var startX = aabb.l * this.data.invCellSize | 0;
		var startY = aabb.t * this.data.invCellSize | 0;
		var endX = (aabb.r * this.data.invCellSize | 0) + 1;
		var endY = (aabb.b * this.data.invCellSize | 0) + 1;
		var aabbArg = new glaze_geom_AABB();
		var _this = aabbArg.extents;
		_this.x = this.tileHalfSize;
		_this.y = this.tileHalfSize;
		var _g1 = startX;
		var _g = endX;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = startY;
			var _g2 = endY;
			while(_g3 < _g2) {
				var y = _g3++;
				var _this1 = this.data;
				var cell = _this1.data.b[y * _this1.internalWidth + x * _this1.bytesPerCell];
				if((cell & 1) == 1) {
					var _this2 = aabbArg.position;
					_this2.x = x * this.tileSize + this.tileHalfSize;
					_this2.y = y * this.tileSize + this.tileHalfSize;
					cb(aabbArg);
				}
			}
		}
	}
	,castRay: function(ray) {
		var x = ray.origin.x * this.data.invCellSize | 0;
		var y = ray.origin.y * this.data.invCellSize | 0;
		var cX = x * this.tileSize;
		var cY = y * this.tileSize;
		var d = ray.direction;
		if(d.x == 0.0 && d.y == 0.0) {
			return true;
		}
		var stepX = 0;
		var tMaxX = 100000000;
		var tDeltaX = 0;
		if(d.x < 0) {
			stepX = -1;
			tMaxX = (cX - ray.origin.x) / d.x;
			tDeltaX = this.tileSize / -d.x;
		} else if(d.x > 0) {
			stepX = 1;
			tMaxX = (cX + this.tileSize - ray.origin.x) / d.x;
			tDeltaX = this.tileSize / d.x;
		}
		var stepY = 0;
		var tMaxY = 100000000;
		var tDeltaY = 0;
		if(d.y < 0) {
			stepY = -1;
			tMaxY = (cY - ray.origin.y) / d.y;
			tDeltaY = this.tileSize / -d.y;
		} else if(d.y > 0) {
			stepY = 1;
			tMaxY = (cY + this.tileSize - ray.origin.y) / d.y;
			tDeltaY = this.tileSize / d.y;
		}
		var distX = .0;
		var distY = .0;
		var transitionEdgeNormalX = 0;
		var transitionEdgeNormalY = 0;
		while(true) {
			if(tMaxX < tMaxY) {
				distX = tMaxX * d.x;
				distY = tMaxX * d.y;
				tMaxX += tDeltaX;
				x += stepX;
			} else {
				distX = tMaxY * d.x;
				distY = tMaxY * d.y;
				tMaxY += tDeltaY;
				y += stepY;
			}
			if(distX * distX + distY * distY > ray.range * ray.range) {
				return false;
			}
			var _this = this.data;
			var tile = _this.data.b[y * _this.internalWidth + x * _this.bytesPerCell];
			if((tile & 1) == 1) {
				if(tMaxX < tMaxY) {
					if(stepX < 0) {
						transitionEdgeNormalX = 1;
					} else {
						transitionEdgeNormalX = -1;
					}
					transitionEdgeNormalY = 0;
				} else {
					transitionEdgeNormalX = 0;
					if(stepY < 0) {
						transitionEdgeNormalY = 1;
					} else {
						transitionEdgeNormalY = -1;
					}
				}
				ray.report(distX,distY,transitionEdgeNormalX,transitionEdgeNormalY);
				return true;
			}
		}
	}
	,__class__: glaze_physics_collision_Map
};
var glaze_physics_collision_Ray = function() {
	this.contact = new glaze_physics_collision_Contact();
	this.direction = new glaze_geom_Vector2();
	this.delta = new glaze_geom_Vector2();
	this.range = 0;
	this.target = new glaze_geom_Vector2();
	this.origin = new glaze_geom_Vector2();
};
glaze_physics_collision_Ray.__name__ = ["glaze","physics","collision","Ray"];
glaze_physics_collision_Ray.prototype = {
	initalize: function(origin,target,range,callback) {
		this.reset();
		var _this = this.origin;
		_this.x = origin.x;
		_this.y = origin.y;
		var _this1 = this.target;
		_this1.x = target.x;
		_this1.y = target.y;
		var _this2 = this.delta;
		_this2.x = target.x;
		_this2.y = target.y;
		var _this3 = this.delta;
		_this3.x -= origin.x;
		_this3.y -= origin.y;
		var _this4 = this.direction;
		var v = this.delta;
		_this4.x = v.x;
		_this4.y = v.y;
		var _this5 = this.direction;
		var t = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y) + 1e-08;
		_this5.x /= t;
		_this5.y /= t;
		if(range <= 0) {
			var _this6 = this.delta;
			this.range = Math.sqrt(_this6.x * _this6.x + _this6.y * _this6.y);
		} else {
			this.range = range;
			var _this7 = this.delta;
			var v1 = this.direction;
			_this7.x = v1.x;
			_this7.y = v1.y;
			var _this8 = this.delta;
			_this8.x *= range;
			_this8.y *= range;
		}
		this.callback = callback;
	}
	,reset: function() {
		this.contact.distance = 9999999999;
		this.hit = false;
	}
	,report: function(distX,distY,normalX,normalY,proxy) {
		if(this.callback != null && proxy != null) {
			if(this.callback(proxy) < 0) {
				haxe_Log.trace("filtered",{ fileName : "Ray.hx", lineNumber : 59, className : "glaze.physics.collision.Ray", methodName : "report"});
				return;
			}
		}
		var distSqrd = distX * distX + distY * distY;
		if(distSqrd < this.contact.distance * this.contact.distance) {
			var _this = this.contact.position;
			_this.x = this.origin.x + distX;
			_this.y = this.origin.y + distY;
			var _this1 = this.contact.normal;
			_this1.x = normalX;
			_this1.y = normalY;
			this.contact.distance = Math.sqrt(distSqrd);
			this.hit = true;
		}
	}
	,__class__: glaze_physics_collision_Ray
};
var glaze_physics_collision_broadphase_IBroadphase = function() { };
glaze_physics_collision_broadphase_IBroadphase.__name__ = ["glaze","physics","collision","broadphase","IBroadphase"];
glaze_physics_collision_broadphase_IBroadphase.prototype = {
	__class__: glaze_physics_collision_broadphase_IBroadphase
};
var glaze_physics_collision_broadphase_BruteforceBroadphase = function(map,nf) {
	this.map = map;
	this.nf = nf;
	this.staticProxies = [];
	this.dynamicProxies = [];
	this.sleepingProxies = [];
};
glaze_physics_collision_broadphase_BruteforceBroadphase.__name__ = ["glaze","physics","collision","broadphase","BruteforceBroadphase"];
glaze_physics_collision_broadphase_BruteforceBroadphase.__interfaces__ = [glaze_physics_collision_broadphase_IBroadphase];
glaze_physics_collision_broadphase_BruteforceBroadphase.prototype = {
	addProxy: function(proxy) {
		var target = proxy.isStatic ? this.staticProxies : this.dynamicProxies;
		target.push(proxy);
	}
	,removeProxy: function(proxy) {
		var target = proxy.isStatic ? this.staticProxies : this.dynamicProxies;
		HxOverrides.remove(target,proxy);
	}
	,collide: function() {
		var i = this.dynamicProxies.length;
		while(--i >= 0) {
			var dynamicProxy = this.dynamicProxies[i];
			if(dynamicProxy.body != null) {
				if(!dynamicProxy.isSensor) {
					this.map.testCollision(dynamicProxy);
				}
				if(dynamicProxy.body.canSleep) {
					this.sleep(dynamicProxy);
				}
			}
			var _g = 0;
			var _g1 = this.staticProxies;
			while(_g < _g1.length) {
				var staticProxy = _g1[_g];
				++_g;
				this.nf.Collide(dynamicProxy,staticProxy);
			}
			var k = this.sleepingProxies.length;
			while(--k >= 0) {
				var sleepingProxy = this.sleepingProxies[k];
				if(!sleepingProxy.body.canSleep) {
					this.wake(sleepingProxy);
				} else {
					this.nf.Collide(dynamicProxy,sleepingProxy);
				}
			}
			var j = i;
			while(--j >= 0) {
				var dynamicProxyB = this.dynamicProxies[j];
				this.nf.Collide(dynamicProxy,dynamicProxyB);
			}
		}
	}
	,QueryArea: function(aabb,result,checkDynamic,checkStatic) {
		if(checkStatic == null) {
			checkStatic = true;
		}
		if(checkDynamic == null) {
			checkDynamic = true;
		}
		if(checkDynamic) {
			var _g = 0;
			var _g1 = this.sleepingProxies;
			while(_g < _g1.length) {
				var proxy = _g1[_g];
				++_g;
				var tmp;
				if(!proxy.isSensor) {
					var aabb1 = proxy.aabb;
					if(Math.abs(aabb.position.x - aabb1.position.x) > aabb.extents.x + aabb1.extents.x) {
						tmp = false;
					} else if(Math.abs(aabb.position.y - aabb1.position.y) > aabb.extents.y + aabb1.extents.y) {
						tmp = false;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					result(proxy);
				}
			}
			var _g2 = 0;
			var _g11 = this.dynamicProxies;
			while(_g2 < _g11.length) {
				var proxy1 = _g11[_g2];
				++_g2;
				var tmp1;
				if(!proxy1.isSensor) {
					var aabb2 = proxy1.aabb;
					if(Math.abs(aabb.position.x - aabb2.position.x) > aabb.extents.x + aabb2.extents.x) {
						tmp1 = false;
					} else if(Math.abs(aabb.position.y - aabb2.position.y) > aabb.extents.y + aabb2.extents.y) {
						tmp1 = false;
					} else {
						tmp1 = true;
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					result(proxy1);
				}
			}
		}
		if(checkStatic) {
			var _g3 = 0;
			var _g12 = this.staticProxies;
			while(_g3 < _g12.length) {
				var proxy2 = _g12[_g3];
				++_g3;
				var tmp2;
				if(!proxy2.isSensor) {
					var aabb3 = proxy2.aabb;
					if(Math.abs(aabb.position.x - aabb3.position.x) > aabb.extents.x + aabb3.extents.x) {
						tmp2 = false;
					} else if(Math.abs(aabb.position.y - aabb3.position.y) > aabb.extents.y + aabb3.extents.y) {
						tmp2 = false;
					} else {
						tmp2 = true;
					}
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					result(proxy2);
				}
			}
		}
	}
	,CastRay: function(ray,result,checkDynamic,checkStatic) {
		if(checkStatic == null) {
			checkStatic = true;
		}
		if(checkDynamic == null) {
			checkDynamic = true;
		}
		this.map.castRay(ray);
		if(checkDynamic) {
			var _g = 0;
			var _g1 = this.sleepingProxies;
			while(_g < _g1.length) {
				var proxy = _g1[_g];
				++_g;
				if(!proxy.isSensor) {
					this.nf.RayAABB(ray,proxy);
				}
			}
			var _g2 = 0;
			var _g11 = this.dynamicProxies;
			while(_g2 < _g11.length) {
				var proxy1 = _g11[_g2];
				++_g2;
				if(!proxy1.isSensor) {
					this.nf.RayAABB(ray,proxy1);
				}
			}
		}
		if(checkStatic) {
			var _g3 = 0;
			var _g12 = this.staticProxies;
			while(_g3 < _g12.length) {
				var proxy2 = _g12[_g3];
				++_g3;
				if(!proxy2.isSensor) {
					this.nf.RayAABB(ray,proxy2);
				}
			}
		}
	}
	,wake: function(proxy) {
		HxOverrides.remove(this.sleepingProxies,proxy);
		proxy.body.isSleeping = false;
		this.dynamicProxies.push(proxy);
		haxe_Log.trace("wake:" + proxy.entity.id,{ fileName : "BruteforceBroadphase.hx", lineNumber : 129, className : "glaze.physics.collision.broadphase.BruteforceBroadphase", methodName : "wake"});
	}
	,sleep: function(proxy) {
		HxOverrides.remove(this.dynamicProxies,proxy);
		proxy.body.isSleeping = true;
		this.sleepingProxies.push(proxy);
		haxe_Log.trace("sleep:" + proxy.entity.id,{ fileName : "BruteforceBroadphase.hx", lineNumber : 136, className : "glaze.physics.collision.broadphase.BruteforceBroadphase", methodName : "sleep"});
	}
	,dump: function() {
		haxe_Log.trace("(" + this.dynamicProxies.length + "," + this.staticProxies.length + ")",{ fileName : "BruteforceBroadphase.hx", lineNumber : 140, className : "glaze.physics.collision.broadphase.BruteforceBroadphase", methodName : "dump"});
	}
	,__class__: glaze_physics_collision_broadphase_BruteforceBroadphase
};
var glaze_physics_components_ContactRouter = function(contactProcessors) {
	this.contactProcessors = contactProcessors;
};
glaze_physics_components_ContactRouter.__name__ = ["glaze","physics","components","ContactRouter"];
glaze_physics_components_ContactRouter.__interfaces__ = [glaze_eco_core_IComponent];
glaze_physics_components_ContactRouter.prototype = {
	calback: function(a,b,contact) {
		var _g = 0;
		var _g1 = this.contactProcessors;
		while(_g < _g1.length) {
			var processor = _g1[_g];
			++_g;
			processor.callback(a,b,contact);
		}
	}
	,__class__: glaze_physics_components_ContactRouter
};
var glaze_physics_components_PhysicsBody = function(body,setMassFromVolume) {
	this.body = body;
	this.setMassFromVolume = setMassFromVolume;
};
glaze_physics_components_PhysicsBody.__name__ = ["glaze","physics","components","PhysicsBody"];
glaze_physics_components_PhysicsBody.__interfaces__ = [glaze_eco_core_IComponent];
glaze_physics_components_PhysicsBody.prototype = {
	__class__: glaze_physics_components_PhysicsBody
};
var glaze_physics_components_PhysicsCollision = function(isSensor,filter,contactCallbacks,limitToStaticCheck) {
	if(limitToStaticCheck == null) {
		limitToStaticCheck = false;
	}
	this.proxy = new glaze_physics_collision_BFProxy();
	this.proxy.isSensor = isSensor;
	this.proxy.filter = filter;
	this.proxy.contactCallbacks = contactCallbacks;
	this.proxy.limitToStaticCheck = limitToStaticCheck;
};
glaze_physics_components_PhysicsCollision.__name__ = ["glaze","physics","components","PhysicsCollision"];
glaze_physics_components_PhysicsCollision.__interfaces__ = [glaze_eco_core_IComponent];
glaze_physics_components_PhysicsCollision.prototype = {
	__class__: glaze_physics_components_PhysicsCollision
};
var glaze_physics_components_PhysicsConstraints = function(constraints) {
	this.constraints = constraints;
};
glaze_physics_components_PhysicsConstraints.__name__ = ["glaze","physics","components","PhysicsConstraints"];
glaze_physics_components_PhysicsConstraints.__interfaces__ = [glaze_eco_core_IComponent];
glaze_physics_components_PhysicsConstraints.prototype = {
	__class__: glaze_physics_components_PhysicsConstraints
};
var glaze_physics_constraint_Constraint = function() {
};
glaze_physics_constraint_Constraint.__name__ = ["glaze","physics","constraint","Constraint"];
glaze_physics_constraint_Constraint.prototype = {
	resolve: function() {
		return false;
	}
	,Destroy: function() {
		if(this.destroyCallback != null) {
			this.destroyCallback(this);
		}
	}
	,__class__: glaze_physics_constraint_Constraint
};
var glaze_physics_constraint_Spring = function(body1,position1,offset1,body2,position2,offset2,stiffness,breakDelta) {
	if(breakDelta == null) {
		breakDelta = 0.1;
	}
	if(stiffness == null) {
		stiffness = 0.5;
	}
	glaze_physics_constraint_Constraint.call(this);
	this.breakDelta = breakDelta;
	this.body1 = body1;
	this.position1 = position1;
	this.offset1 = offset1;
	this.body2 = body2;
	this.position2 = position2;
	this.offset2 = offset2;
	this.stiffness = stiffness;
	this.restLength = this.length();
};
glaze_physics_constraint_Spring.__name__ = ["glaze","physics","constraint","Spring"];
glaze_physics_constraint_Spring.__super__ = glaze_physics_constraint_Constraint;
glaze_physics_constraint_Spring.prototype = $extend(glaze_physics_constraint_Constraint.prototype,{
	resolve: function() {
		var dX = this.position1.x + this.offset1.x - (this.position2.x + this.offset2.x);
		var dY = this.position1.y + this.offset1.y - (this.position2.y + this.offset2.y);
		var deltaLength = Math.sqrt(dX * dX + dY * dY) + 0.00001;
		var mass1 = this.body1 != null ? this.body1.invMass : 0;
		var mass2 = this.body2 != null ? this.body2.invMass : 0;
		var diff = (deltaLength - this.restLength) / (deltaLength * (mass1 + mass2));
		var factor = diff * this.stiffness;
		dX *= factor;
		dY *= factor;
		if(this.body1 != null) {
			this.body1.position.x -= dX * this.body1.invMass;
			this.body1.position.y -= dY * this.body1.invMass;
		}
		if(this.body2 != null) {
			this.body2.position.x += dX * this.body2.invMass;
			this.body2.position.y += dY * this.body2.invMass;
		}
		return true;
	}
	,length: function() {
		var x = this.position1.x + this.offset1.x - this.position2.x + this.offset2.x;
		var y = this.position1.y + this.offset1.y - this.position2.y + this.offset2.y;
		return Math.sqrt(x * x + y * y);
	}
	,SetLength: function(len) {
		this.restLength = len;
	}
	,__class__: glaze_physics_constraint_Spring
});
var glaze_physics_contact_IContactProcessor = function() { };
glaze_physics_contact_IContactProcessor.__name__ = ["glaze","physics","contact","IContactProcessor"];
glaze_physics_contact_IContactProcessor.prototype = {
	__class__: glaze_physics_contact_IContactProcessor
};
var glaze_physics_systems_ContactRouterSystem = function() {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsCollision,glaze_physics_components_ContactRouter]);
};
glaze_physics_systems_ContactRouterSystem.__name__ = ["glaze","physics","systems","ContactRouterSystem"];
glaze_physics_systems_ContactRouterSystem.__super__ = glaze_eco_core_System;
glaze_physics_systems_ContactRouterSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		entity.map["PhysicsCollision"].proxy.contactCallbacks.push(($_=entity.map["ContactRouter"],$bind($_,$_.calback)));
	}
	,entityRemoved: function(entity) {
		var collision = HxOverrides.remove(entity.map["PhysicsCollision"].proxy.contactCallbacks,($_=entity.map["ContactRouter"],$bind($_,$_.calback)));
	}
	,update: function(timestamp,delta) {
	}
	,__class__: glaze_physics_systems_ContactRouterSystem
});
var glaze_physics_systems_PhysicsCollisionSystem = function(broadphase) {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsCollision,glaze_physics_components_PhysicsBody,glaze_engine_components_Moveable]);
	this.broadphase = broadphase;
};
glaze_physics_systems_PhysicsCollisionSystem.__name__ = ["glaze","physics","systems","PhysicsCollisionSystem"];
glaze_physics_systems_PhysicsCollisionSystem.__super__ = glaze_eco_core_System;
glaze_physics_systems_PhysicsCollisionSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var collision = entity.map["PhysicsCollision"];
		var body = entity.map["PhysicsBody"];
		collision.proxy.setBody(body.body);
	}
	,update: function(timestamp,delta) {
		this.broadphase.collide();
	}
	,__class__: glaze_physics_systems_PhysicsCollisionSystem
});
var glaze_physics_systems_PhysicsMassSystem = function() {
	glaze_eco_core_System.call(this,[glaze_physics_components_PhysicsBody,glaze_engine_components_Extents]);
	this.hasUpdate = false;
};
glaze_physics_systems_PhysicsMassSystem.__name__ = ["glaze","physics","systems","PhysicsMassSystem"];
glaze_physics_systems_PhysicsMassSystem.__super__ = glaze_eco_core_System;
glaze_physics_systems_PhysicsMassSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var extents = entity.map["Extents"];
		var body = entity.map["PhysicsBody"];
		if(body.setMassFromVolume) {
			body.body.setMassFromVolumeMaterial(extents.halfWidths.x * extents.halfWidths.y * 4);
		}
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
	}
	,__class__: glaze_physics_systems_PhysicsMassSystem
});
var glaze_physics_systems_PhysicsMoveableSystem = function(broadphase) {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_engine_components_Extents,glaze_physics_components_PhysicsCollision,glaze_engine_components_Moveable]);
	this.broadphase = broadphase;
};
glaze_physics_systems_PhysicsMoveableSystem.__name__ = ["glaze","physics","systems","PhysicsMoveableSystem"];
glaze_physics_systems_PhysicsMoveableSystem.__super__ = glaze_eco_core_System;
glaze_physics_systems_PhysicsMoveableSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var collision = entity.map["PhysicsCollision"];
		var extents = entity.map["Extents"];
		var _this = collision.proxy.aabb.extents;
		var v = extents.halfWidths;
		_this.x = v.x;
		_this.y = v.y;
		collision.proxy.isStatic = false;
		collision.proxy.entity = entity;
		collision.proxy.aabb.position = entity.map["Position"].coords;
		this.broadphase.addProxy(collision.proxy);
	}
	,entityRemoved: function(entity) {
		this.broadphase.removeProxy(entity.map["PhysicsCollision"].proxy);
	}
	,update: function(timestamp,delta) {
	}
	,__class__: glaze_physics_systems_PhysicsMoveableSystem
});
var glaze_physics_systems_PhysicsPositionSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_physics_components_PhysicsBody]);
};
glaze_physics_systems_PhysicsPositionSystem.__name__ = ["glaze","physics","systems","PhysicsPositionSystem"];
glaze_physics_systems_PhysicsPositionSystem.__super__ = glaze_eco_core_System;
glaze_physics_systems_PhysicsPositionSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var body = entity.map["PhysicsBody"].body;
			var position = entity.map["Position"];
			if(!(body.skip || body.isSleeping)) {
				if(body.isBullet) {
					if(body.toi < Infinity) {
						var _this = body.position;
						var v = body.positionCorrection;
						_this.x = v.x;
						_this.y = v.y;
						var _this1 = body.originalVelocity;
						var normal = body.contactNormal;
						var d = _this1.x * normal.x + _this1.y * normal.y;
						_this1.x -= 2 * d * normal.x;
						_this1.y -= 2 * d * normal.y;
						var _this2 = body.originalVelocity;
						var s = body.material.elasticity;
						_this2.x *= s;
						_this2.y *= s;
						var _this3 = body.velocity;
						var v1 = body.originalVelocity;
						_this3.x = v1.x;
						_this3.y = v1.y;
					} else {
						var _this4 = body.position;
						var v2 = body.predictedPosition;
						_this4.x = v2.x;
						_this4.y = v2.y;
					}
				} else {
					if(body.stepContactCount > 0 && !(body.totalBounceCount != 0 && body.bounceCount < body.totalBounceCount) && body.contactNormal.y < 0) {
						var _this5 = body.tangent;
						var v3 = body.contactNormal;
						_this5.x = v3.x;
						_this5.y = v3.y;
						var _this6 = body.tangent;
						var t = _this6.x;
						_this6.x = -_this6.y;
						_this6.y = t;
						var _this7 = body.originalVelocity;
						var v4 = body.tangent;
						var tv = (_this7.x * v4.x + _this7.y * v4.y) * body.material.friction;
						body.velocity.x -= body.tangent.x * tv;
						body.velocity.y -= body.tangent.y * tv;
					}
					var _this8 = body.positionCorrection;
					var v5 = body.velocity;
					_this8.x += v5.x;
					_this8.y += v5.y;
					var _this9 = body.positionCorrection;
					var s1 = body.dt;
					_this9.x *= s1;
					_this9.y *= s1;
					var _this10 = body.position;
					var v6 = body.positionCorrection;
					_this10.x += v6.x;
					_this10.y += v6.y;
					var _this11 = body.positionCorrection;
					_this11.x = 0;
					_this11.y = 0;
					if(body.stepContactCount > 0 && (body.totalBounceCount != 0 && body.bounceCount < body.totalBounceCount)) {
						var _this12 = body.originalVelocity;
						var normal1 = body.contactNormal;
						var d1 = _this12.x * normal1.x + _this12.y * normal1.y;
						_this12.x -= 2 * d1 * normal1.x;
						_this12.y -= 2 * d1 * normal1.y;
						var _this13 = body.originalVelocity;
						var s2 = body.material.elasticity;
						_this13.x *= s2;
						_this13.y *= s2;
						var _this14 = body.velocity;
						var v7 = body.originalVelocity;
						_this14.x = v7.x;
						_this14.y = v7.y;
						body.bounceCount++;
					}
				}
			}
			var position1 = body.position;
			var _this15 = position.prevCoords;
			var v8 = position.coords;
			_this15.x = v8.x;
			_this15.y = v8.y;
			var _this16 = position.coords;
			_this16.x = position1.x;
			_this16.y = position1.y;
		}
	}
	,__class__: glaze_physics_systems_PhysicsPositionSystem
});
var glaze_physics_systems_PhysicsStaticSystem = function(broadphase) {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_engine_components_Extents,glaze_physics_components_PhysicsCollision,glaze_engine_components_Fixed]);
	this.broadphase = broadphase;
};
glaze_physics_systems_PhysicsStaticSystem.__name__ = ["glaze","physics","systems","PhysicsStaticSystem"];
glaze_physics_systems_PhysicsStaticSystem.__super__ = glaze_eco_core_System;
glaze_physics_systems_PhysicsStaticSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var collision = entity.map["PhysicsCollision"];
		var extents = entity.map["Extents"];
		var position = entity.map["Position"];
		position.updatePosition = $bind(this,this.setPosition);
		var _this = collision.proxy.aabb.extents;
		var v = extents.halfWidths;
		_this.x = v.x;
		_this.y = v.y;
		collision.proxy.entity = entity;
		collision.proxy.isStatic = true;
		collision.proxy.aabb.position = entity.map["Position"].coords;
		this.broadphase.addProxy(collision.proxy);
	}
	,entityRemoved: function(entity) {
		this.broadphase.removeProxy(entity.map["PhysicsCollision"].proxy);
	}
	,update: function(timestamp,delta) {
	}
	,setPosition: function(entity,position) {
		var bfp = entity.map["PhysicsCollision"].proxy;
		this.broadphase.removeProxy(bfp);
		bfp.aabb.position = entity.map["Position"].coords;
		this.broadphase.addProxy(bfp);
	}
	,__class__: glaze_physics_systems_PhysicsStaticSystem
});
var glaze_physics_systems_PhysicsUpdateSystem = function() {
	glaze_eco_core_System.call(this,[glaze_engine_components_Position,glaze_physics_components_PhysicsBody,glaze_engine_components_Active]);
	this.globalForce = new glaze_geom_Vector2(0,30);
	this.globalDamping = 0.99;
};
glaze_physics_systems_PhysicsUpdateSystem.__name__ = ["glaze","physics","systems","PhysicsUpdateSystem"];
glaze_physics_systems_PhysicsUpdateSystem.__super__ = glaze_eco_core_System;
glaze_physics_systems_PhysicsUpdateSystem.prototype = $extend(glaze_eco_core_System.prototype,{
	entityAdded: function(entity) {
		var position = entity.map["Position"];
		var physics = entity.map["PhysicsBody"];
		var _this = physics.body.position;
		var v = position.coords;
		_this.x = v.x;
		_this.y = v.y;
	}
	,entityRemoved: function(entity) {
	}
	,update: function(timestamp,delta) {
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var position = entity.map["Position"];
			var physics = entity.map["PhysicsBody"];
			physics.body.update(delta / 1000,this.globalForce,this.globalDamping);
			position.direction.x = physics.body.velocity.x > 0 ? 1 : -1;
		}
	}
	,__class__: glaze_physics_systems_PhysicsUpdateSystem
});
var glaze_render_animation_Animation = function(Parent,Name,Frames,FrameRate,Looped,FlipX,FlipY) {
	if(FlipY == null) {
		FlipY = false;
	}
	if(FlipX == null) {
		FlipX = false;
	}
	if(Looped == null) {
		Looped = true;
	}
	if(FrameRate == null) {
		FrameRate = 0;
	}
	this.curIndex = 0;
	this._frameTimer = 0;
	this.flipY = false;
	this.flipX = false;
	this.reversed = false;
	this.looped = true;
	this.paused = true;
	this.finished = true;
	this.delay = 0;
	this.curFrame = 0;
	this.parent = Parent;
	this.name = Name;
	this.set_frameRate(FrameRate);
	this._frames = Frames;
	this.looped = Looped;
	this.flipX = FlipX;
	this.flipY = FlipY;
};
glaze_render_animation_Animation.__name__ = ["glaze","render","animation","Animation"];
glaze_render_animation_Animation.prototype = {
	play: function(Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		if(!Force && !this.finished && this.reversed == Reversed) {
			this.paused = false;
			this.finished = false;
			return;
		}
		this.reversed = Reversed;
		this.paused = false;
		this._frameTimer = 0;
		var numFramesMinusOne = this._frames.length - 1;
		if(Frame >= 0) {
			if(Frame > numFramesMinusOne) {
				Frame = numFramesMinusOne;
			} else {
				Frame = Frame;
			}
			if(this.reversed) {
				Frame = numFramesMinusOne - Frame;
			} else {
				Frame = Frame;
			}
		}
		if(this.delay <= 0 || Frame > numFramesMinusOne && !this.reversed || Frame < 0 && this.reversed) {
			this.finished = true;
		} else {
			this.finished = false;
		}
		if(Frame < 0) {
			this.set_curFrame(Math.floor(Math.random() * numFramesMinusOne));
		} else {
			this.set_curFrame(Frame);
		}
		if(this.finished) {
			var _this = this.parent;
			if(_this.finishCallback != null) {
				_this.finishCallback(this.name);
			}
		}
	}
	,restart: function() {
		this.play(true,this.reversed);
	}
	,stop: function() {
		this.finished = true;
		this.paused = true;
	}
	,reset: function() {
		this.stop();
		this.set_curFrame(this.reversed ? this._frames.length - 1 : 0);
	}
	,finish: function() {
		this.stop();
		this.set_curFrame(this.reversed ? 0 : this._frames.length - 1);
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,reverse: function() {
		this.reversed = !this.reversed;
		if(this.finished) {
			this.play(false,this.reversed);
		}
	}
	,update: function(elapsed) {
		var lastFrame = this.curFrame;
		if(this.delay > 0 && !this.finished && !this.paused) {
			this._frameTimer += elapsed;
			while(this._frameTimer > this.delay) {
				this._frameTimer -= this.delay;
				if(this.looped) {
					var numFramesMinusOne = this._frames.length - 1;
					var tempFrame = this.reversed ? numFramesMinusOne - this.curFrame : this.curFrame;
					if(tempFrame == numFramesMinusOne) {
						this.set_curFrame(this.reversed ? numFramesMinusOne : 0);
					} else {
						this.set_curFrame(this.reversed ? this.curFrame - 1 : this.curFrame + 1);
					}
				} else {
					this.set_curFrame(this.reversed ? this.curFrame - 1 : this.curFrame + 1);
				}
			}
		}
	}
	,set_frameRate: function(value) {
		this.delay = 0;
		this.frameRate = value;
		if(value > 0) {
			this.delay = 1.0 / value;
		}
		return value;
	}
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null && this.parent._curAnim == this) {
			this.parent.set_frameIndex(Value);
		}
		return Value;
	}
	,set_curFrame: function(Frame) {
		var numFramesMinusOne = this._frames.length - 1;
		var tempFrame = this.reversed ? numFramesMinusOne - Frame : Frame;
		if(tempFrame >= 0) {
			if(!this.looped && tempFrame > numFramesMinusOne) {
				this.finished = true;
				this.curFrame = this.reversed ? 0 : numFramesMinusOne;
			} else {
				this.curFrame = Frame;
			}
		} else {
			this.curFrame = Math.floor(Math.random() * numFramesMinusOne);
		}
		this.set_curIndex(this._frames[this.curFrame]);
		if(this.finished && this.parent != null) {
			var _this = this.parent;
			if(_this.finishCallback != null) {
				_this.finishCallback(this.name);
			}
		}
		return Frame;
	}
	,get_numFrames: function() {
		return this._frames.length;
	}
	,clone: function(Parent) {
		return new glaze_render_animation_Animation(Parent,this.name,this._frames,this.frameRate,this.looped,this.flipX,this.flipY);
	}
	,__class__: glaze_render_animation_Animation
	,__properties__: {set_curIndex:"set_curIndex",get_numFrames:"get_numFrames",set_curFrame:"set_curFrame",set_frameRate:"set_frameRate"}
};
var glaze_render_animation_AnimationController = function(Frames) {
	this.frameIndex = -1;
	this._frames = Frames;
	this._animations = new haxe_ds_StringMap();
};
glaze_render_animation_AnimationController.__name__ = ["glaze","render","animation","AnimationController"];
glaze_render_animation_AnimationController.prototype = {
	update: function(elapsed) {
		if(this._curAnim != null) {
			this._curAnim.update(elapsed);
		}
	}
	,add: function(Name,Frames,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		var framesToAdd = Frames;
		var numFrames = framesToAdd.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(framesToAdd[i] >= this._frames.frames.length) {
				if(framesToAdd == Frames) {
					framesToAdd = Frames.slice();
				}
				framesToAdd.splice(i,1);
			}
			--i;
		}
		if(framesToAdd.length > 0) {
			var anim = new glaze_render_animation_Animation(this,Name,framesToAdd,FrameRate,Looped,FlipX,FlipY);
			var _this = this._animations;
			if(__map_reserved[Name] != null) {
				_this.setReserved(Name,anim);
			} else {
				_this.h[Name] = anim;
			}
		}
	}
	,addAnimation: function(anim) {
		var key = anim.name;
		var _this = this._animations;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,anim);
		} else {
			_this.h[key] = anim;
		}
	}
	,remove: function(Name) {
		var _this = this._animations;
		var anim = __map_reserved[Name] != null ? _this.getReserved(Name) : _this.h[Name];
		if(anim != null) {
			this._animations.remove(Name);
		}
	}
	,play: function(AnimName,Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		if(AnimName == null) {
			if(this._curAnim != null) {
				this._curAnim.stop();
			}
			this._curAnim = null;
		}
		var tmp;
		if(AnimName != null) {
			var _this = this._animations;
			tmp = (__map_reserved[AnimName] != null ? _this.getReserved(AnimName) : _this.h[AnimName]) == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return;
		}
		var oldFlipX = false;
		var oldFlipY = false;
		if(this._curAnim != null && AnimName != this._curAnim.name) {
			oldFlipX = this._curAnim.flipX;
			oldFlipY = this._curAnim.flipY;
			this._curAnim.stop();
		}
		var _this1 = this._animations;
		this._curAnim = __map_reserved[AnimName] != null ? _this1.getReserved(AnimName) : _this1.h[AnimName];
		this._curAnim.play(Force,Reversed,Frame);
		var tmp1 = oldFlipX != this._curAnim.flipX || oldFlipY != this._curAnim.flipY;
	}
	,reset: function() {
		if(this._curAnim != null) {
			this._curAnim.reset();
		}
	}
	,finish: function() {
		if(this._curAnim != null) {
			this._curAnim.finish();
		}
	}
	,stop: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
		}
	}
	,pause: function() {
		if(this._curAnim != null) {
			this._curAnim.pause();
		}
	}
	,resume: function() {
		if(this._curAnim != null) {
			this._curAnim.paused = false;
		}
	}
	,reverse: function() {
		if(this._curAnim != null) {
			this._curAnim.reverse();
		}
	}
	,getByName: function(Name) {
		var _this = this._animations;
		if(__map_reserved[Name] != null) {
			return _this.getReserved(Name);
		} else {
			return _this.h[Name];
		}
	}
	,randomFrame: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
			this._curAnim = null;
		}
		var max = this._frames.frames.length - 1;
		this.set_frameIndex(Math.floor(Math.random() * max));
	}
	,fireCallback: function() {
		if(this.callback != null) {
			var name = this._curAnim != null ? this._curAnim.name : null;
			var number = this._curAnim != null ? this._curAnim.curFrame : this.frameIndex;
			this.callback(name,number,this.frameIndex);
		}
	}
	,fireFinishCallback: function(name) {
		if(this.finishCallback != null) {
			this.finishCallback(name);
		}
	}
	,set_frameIndex: function(Frame) {
		if(this._frames != null) {
			Frame %= this._frames.frames.length;
			this.frameIndex = Frame;
			if(this.callback != null) {
				var name = this._curAnim != null ? this._curAnim.name : null;
				var number = this._curAnim != null ? this._curAnim.curFrame : this.frameIndex;
				this.callback(name,number,this.frameIndex);
			}
		}
		return this.frameIndex;
	}
	,get_frameName: function() {
		return "todo";
	}
	,set_frameName: function(Value) {
		var tmp;
		if(this._frames != null) {
			var _this = this._frames.framesHash;
			if(__map_reserved[Value] != null) {
				tmp = _this.existsReserved(Value);
			} else {
				tmp = _this.h.hasOwnProperty(Value);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this._curAnim != null) {
				this._curAnim.stop();
				this._curAnim = null;
			}
			var _this1 = this._frames.framesHash;
			var frame = __map_reserved[Value] != null ? _this1.getReserved(Value) : _this1.h[Value];
			if(frame != null) {
				this.set_frameIndex(this._frames.frames.indexOf(frame));
			}
		}
		return Value;
	}
	,get_name: function() {
		var animName = null;
		if(this._curAnim != null) {
			animName = this._curAnim.name;
		}
		return animName;
	}
	,set_name: function(AnimName) {
		this.play(AnimName);
		return AnimName;
	}
	,get_curAnim: function() {
		return this._curAnim;
	}
	,set_curAnim: function(Anim) {
		if(Anim != this._curAnim) {
			if(this._curAnim != null) {
				this._curAnim.stop();
			}
			if(Anim != null) {
				Anim.play();
			}
		}
		return this._curAnim = Anim;
	}
	,get_paused: function() {
		var paused = false;
		if(this._curAnim != null) {
			paused = this._curAnim.paused;
		}
		return paused;
	}
	,set_paused: function(Value) {
		if(this._curAnim != null) {
			if(Value) {
				this._curAnim.pause();
			} else {
				this._curAnim.paused = false;
			}
		}
		return Value;
	}
	,get_finished: function() {
		var finished = true;
		if(this._curAnim != null) {
			finished = this._curAnim.finished;
		}
		return finished;
	}
	,set_finished: function(Value) {
		if(Value == true && this._curAnim != null) {
			this._curAnim.finish();
		}
		return Value;
	}
	,get_frames: function() {
		return this._frames.frames.length;
	}
	,getFrameIndex: function(Frame) {
		return this._frames.frames.indexOf(Frame);
	}
	,getFrame: function() {
		return this._frames.frames[this.frameIndex];
	}
	,updateSprite: function(sprite) {
		var frame = this.getFrame();
		sprite.texture = frame.texture;
		sprite.pivot.x = sprite.texture.frame.width * sprite.texture.pivot.x;
		sprite.pivot.y = (sprite.texture.frame.height + 2) * sprite.texture.pivot.y;
		sprite.scale.x = frame.scale.x;
		if(this._curAnim.flipX) {
			sprite.scale.x *= -1;
		}
		sprite.scale.y = frame.scale.y;
		if(this._curAnim.flipY) {
			sprite.scale.y *= -1;
		}
	}
	,__class__: glaze_render_animation_AnimationController
	,__properties__: {get_frames:"get_frames",set_finished:"set_finished",get_finished:"get_finished",set_paused:"set_paused",get_paused:"get_paused",set_name:"set_name",get_name:"get_name",set_frameName:"set_frameName",get_frameName:"get_frameName",set_frameIndex:"set_frameIndex",set_curAnim:"set_curAnim",get_curAnim:"get_curAnim"}
};
var glaze_render_display_DisplayObject = function() {
	this.position = new glaze_geom_Vector2();
	this.scale = new glaze_geom_Vector2(1,1);
	this.pivot = new glaze_geom_Vector2();
	this._rotationComponents = new glaze_geom_Vector2();
	this._rotation = 0;
	this._rotationComponents.x = Math.cos(this._rotation);
	this._rotationComponents.y = Math.sin(this._rotation);
	this.alpha = 1;
	this._visible = true;
	if(this.stage != null) {
		this.stage.dirty = true;
	}
	this.renderable = false;
	this.aabb = new glaze_geom_AABB2();
	this.parent = null;
	this.worldTransform = glaze_geom_Matrix3.Create();
	this.localTransform = glaze_geom_Matrix3.Create();
};
glaze_render_display_DisplayObject.__name__ = ["glaze","render","display","DisplayObject"];
glaze_render_display_DisplayObject.prototype = {
	get_rotation: function() {
		return this._rotation;
	}
	,set_rotation: function(v) {
		this._rotation = v;
		this._rotationComponents.x = Math.cos(this._rotation);
		this._rotationComponents.y = Math.sin(this._rotation);
		return this._rotation;
	}
	,get_visible: function() {
		return this._visible;
	}
	,set_visible: function(v) {
		this._visible = v;
		if(this.stage != null) {
			this.stage.dirty = true;
		}
		return this._visible;
	}
	,RoundFunction: function(v) {
		return v;
	}
	,updateTransform: function() {
		var positionx = Math.floor(this.position.x);
		var positiony = Math.floor(this.position.y);
		var sinR = this._rotationComponents.y;
		var cosR = this._rotationComponents.x;
		this.localTransform[0] = cosR * this.scale.x;
		this.localTransform[1] = -sinR * this.scale.y;
		this.localTransform[3] = sinR * this.scale.x;
		this.localTransform[4] = cosR * this.scale.y;
		var px = this.pivot.x;
		var py = this.pivot.y;
		var parentTransform = this.parent.worldTransform;
		var a00 = this.localTransform[0];
		var a01 = this.localTransform[1];
		var a02 = positionx - this.localTransform[0] * px - py * this.localTransform[1];
		var a10 = this.localTransform[3];
		var a11 = this.localTransform[4];
		var a12 = positiony - this.localTransform[4] * py - px * this.localTransform[3];
		var b00 = parentTransform[0];
		var b01 = parentTransform[1];
		var b02 = parentTransform[2];
		var b10 = parentTransform[3];
		var b11 = parentTransform[4];
		var b12 = parentTransform[5];
		this.localTransform[2] = a02;
		this.localTransform[5] = a12;
		this.worldTransform[0] = b00 * a00 + b01 * a10;
		this.worldTransform[1] = b00 * a01 + b01 * a11;
		this.worldTransform[2] = b00 * a02 + b01 * a12 + b02;
		this.worldTransform[3] = b10 * a00 + b11 * a10;
		this.worldTransform[4] = b10 * a01 + b11 * a11;
		this.worldTransform[5] = b10 * a02 + b11 * a12 + b12;
		this.worldAlpha = this.alpha * this.parent.worldAlpha;
	}
	,calcExtents: function() {
	}
	,applySlot: function(slot,p) {
		return slot(this,p);
	}
	,__class__: glaze_render_display_DisplayObject
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible",set_rotation:"set_rotation",get_rotation:"get_rotation"}
};
var glaze_render_display_DisplayObjectContainer = function() {
	glaze_render_display_DisplayObject.call(this);
	this.subTreeAABB = new glaze_geom_AABB2();
	this.childCount = 0;
};
glaze_render_display_DisplayObjectContainer.__name__ = ["glaze","render","display","DisplayObjectContainer"];
glaze_render_display_DisplayObjectContainer.__super__ = glaze_render_display_DisplayObject;
glaze_render_display_DisplayObjectContainer.prototype = $extend(glaze_render_display_DisplayObject.prototype,{
	addChild: function(child) {
		if(child.parent != null) {
			child.parent.removeChild(child);
		}
		if(this.tail == null) {
			if(this.head == null) {
				this.head = child;
				this.tail = child;
				child.prev = null;
				child.next = null;
			} else {
				var node = this.head;
				child.prev = node.prev;
				child.next = node;
				if(node.prev == null) {
					this.head = child;
				} else {
					node.prev.next = child;
				}
				node.prev = child;
			}
		} else {
			var node1 = this.tail;
			child.prev = node1;
			child.next = node1.next;
			if(node1.next == null) {
				this.tail = child;
			} else {
				node1.next.prev = child;
			}
			node1.next = child;
		}
		this.childCount++;
		child.parent = this;
		child.applySlot(function(target,p) {
			target.stage = p;
			return true;
		},this.stage);
		if(this.stage != null) {
			this.stage.dirty = true;
		}
	}
	,addChildAt: function(child,index) {
		if(index >= this.childCount) {
			this.addChild(child);
			return;
		}
		if(index == 0) {
			if(this.head == null) {
				this.head = child;
				this.tail = child;
				child.prev = null;
				child.next = null;
			} else {
				var node = this.head;
				child.prev = node.prev;
				child.next = node;
				if(node.prev == null) {
					this.head = child;
				} else {
					node.prev.next = child;
				}
				node.prev = child;
			}
		} else {
			var node1 = this.findChildByIndex(index);
			child.prev = node1.prev;
			child.next = node1;
			if(node1.prev == null) {
				this.head = child;
			} else {
				node1.prev.next = child;
			}
			node1.prev = child;
		}
		this.childCount++;
		child.parent = this;
		child.applySlot(function(target,p) {
			target.stage = p;
			return true;
		},this.stage);
		if(this.stage != null) {
			this.stage.dirty = true;
		}
	}
	,childAdded: function(child) {
		this.childCount++;
		child.parent = this;
		child.applySlot(function(target,p) {
			target.stage = p;
			return true;
		},this.stage);
		if(this.stage != null) {
			this.stage.dirty = true;
		}
	}
	,findChildByIndex: function(index) {
		var child = this.head;
		var count = 0;
		while(child != null) {
			if(count++ == index) {
				return child;
			}
			child = child.next;
		}
		return this.tail;
	}
	,removeChild: function(child) {
		if(child.parent == this) {
			if(child.prev == null) {
				this.head = child.next;
			} else {
				child.prev.next = child.next;
			}
			if(child.next == null) {
				this.tail = child.prev;
			} else {
				child.next.prev = child.prev;
			}
			child.prev = child.next = null;
			this.childCount--;
			if(this.stage != null) {
				this.stage.dirty = true;
			}
			child.parent = null;
			child.applySlot(function(target,p) {
				target.stage = null;
				return true;
			},null);
		}
	}
	,removeChildAt: function(index) {
		var child = this.findChildByIndex(index);
		haxe_Log.trace(child,{ fileName : "DisplayObjectContainer.hx", lineNumber : 69, className : "glaze.render.display.DisplayObjectContainer", methodName : "removeChildAt"});
		this.removeChild(child);
		this.debug();
		return child;
	}
	,childRemoved: function(child) {
		this.childCount--;
		if(this.stage != null) {
			this.stage.dirty = true;
		}
		child.parent = null;
		child.applySlot(function(target,p) {
			target.stage = null;
			return true;
		},null);
	}
	,updateTransform: function() {
		var _this = this.aabb;
		_this.t = _this.l = Infinity;
		_this.r = _this.b = -Infinity;
		glaze_render_display_DisplayObject.prototype.updateTransform.call(this);
		this.calcExtents();
		var _this1 = this.subTreeAABB;
		_this1.t = _this1.l = Infinity;
		_this1.r = _this1.b = -Infinity;
		var _this2 = this.subTreeAABB;
		var aabb = this.aabb;
		if(aabb.t < _this2.t) {
			_this2.t = aabb.t;
		}
		if(aabb.r > _this2.r) {
			_this2.r = aabb.r;
		}
		if(aabb.b > _this2.b) {
			_this2.b = aabb.b;
		}
		if(aabb.l < _this2.l) {
			_this2.l = aabb.l;
		}
		var child = this.head;
		while(child != null) {
			child.updateTransform();
			var _this3 = this.subTreeAABB;
			var aabb1 = child.aabb;
			if(aabb1.t < _this3.t) {
				_this3.t = aabb1.t;
			}
			if(aabb1.r > _this3.r) {
				_this3.r = aabb1.r;
			}
			if(aabb1.b > _this3.b) {
				_this3.b = aabb1.b;
			}
			if(aabb1.l < _this3.l) {
				_this3.l = aabb1.l;
			}
			child = child.next;
		}
	}
	,apply: function(slot,p) {
	}
	,applySlot: function(slot,p) {
		if(!glaze_render_display_DisplayObject.prototype.applySlot.call(this,slot,p)) {
			return false;
		}
		var child = this.head;
		while(child != null) {
			child.applySlot(slot,p);
			child = child.next;
		}
		return true;
	}
	,insertAfter: function(node,newNode) {
		newNode.prev = node;
		newNode.next = node.next;
		if(node.next == null) {
			this.tail = newNode;
		} else {
			node.next.prev = newNode;
		}
		node.next = newNode;
	}
	,insertBefore: function(node,newNode) {
		newNode.prev = node.prev;
		newNode.next = node;
		if(node.prev == null) {
			this.head = newNode;
		} else {
			node.prev.next = newNode;
		}
		node.prev = newNode;
	}
	,insertBeginning: function(newNode) {
		if(this.head == null) {
			this.head = newNode;
			this.tail = newNode;
			newNode.prev = null;
			newNode.next = null;
		} else {
			var node = this.head;
			newNode.prev = node.prev;
			newNode.next = node;
			if(node.prev == null) {
				this.head = newNode;
			} else {
				node.prev.next = newNode;
			}
			node.prev = newNode;
		}
	}
	,insertEnd: function(newNode) {
		if(this.tail == null) {
			if(this.head == null) {
				this.head = newNode;
				this.tail = newNode;
				newNode.prev = null;
				newNode.next = null;
			} else {
				var node = this.head;
				newNode.prev = node.prev;
				newNode.next = node;
				if(node.prev == null) {
					this.head = newNode;
				} else {
					node.prev.next = newNode;
				}
				node.prev = newNode;
			}
		} else {
			var node1 = this.tail;
			newNode.prev = node1;
			newNode.next = node1.next;
			if(node1.next == null) {
				this.tail = newNode;
			} else {
				node1.next.prev = newNode;
			}
			node1.next = newNode;
		}
	}
	,remove: function(node) {
		if(node.prev == null) {
			this.head = node.next;
		} else {
			node.prev.next = node.next;
		}
		if(node.next == null) {
			this.tail = node.prev;
		} else {
			node.next.prev = node.prev;
		}
		node.prev = node.next = null;
	}
	,debug: function() {
		var child = this.head;
		while(child != null) {
			haxe_Log.trace(child.id,{ fileName : "DisplayObjectContainer.hx", lineNumber : 169, className : "glaze.render.display.DisplayObjectContainer", methodName : "debug"});
			child = child.next;
		}
	}
	,__class__: glaze_render_display_DisplayObjectContainer
});
var glaze_render_display_Camera = function() {
	glaze_render_display_DisplayObjectContainer.call(this);
	this.id = "Camera";
	this.realPosition = new glaze_geom_Vector2();
	this.viewportSize = new glaze_geom_Vector2();
	this.halfViewportSize = new glaze_geom_Vector2();
	this.shake = new glaze_geom_Vector2();
	this.viewPortAABB = new glaze_geom_AABB2();
	this.worldExtentsAABB = new glaze_geom_AABB2();
};
glaze_render_display_Camera.__name__ = ["glaze","render","display","Camera"];
glaze_render_display_Camera.__super__ = glaze_render_display_DisplayObjectContainer;
glaze_render_display_Camera.prototype = $extend(glaze_render_display_DisplayObjectContainer.prototype,{
	rf: function(v) {
		return v;
	}
	,Focus: function(x,y) {
		this.realPosition.x = x;
		this.realPosition.y = y;
		var _this = this.cameraExtentsAABB;
		var point = this.realPosition;
		if(point.x < _this.l) {
			point.x = _this.l;
		}
		if(point.x > _this.r) {
			point.x = _this.r;
		}
		if(point.y < _this.t) {
			point.y = _this.t;
		}
		if(point.y > _this.b) {
			point.y = _this.b;
		}
		var positionx = -this.realPosition.x + this.halfViewportSize.x;
		var positiony = -this.realPosition.y + this.halfViewportSize.y;
		if(Math.abs(positionx - this.position.x) > 2) {
			this.position.x += (positionx - this.position.x) * 0.1;
		}
		if(Math.abs(positiony - this.position.y) > 2) {
			this.position.y += (positiony - this.position.y) * 0.1;
		}
		var _this1 = this.position;
		var v = this.shake;
		_this1.x += v.x;
		_this1.y += v.y;
		this.position.x = this.rf(this.position.x);
		this.position.y = this.rf(this.position.y);
		var _this2 = this.shake;
		_this2.x = 0;
		_this2.y = 0;
	}
	,Resize: function(width,height) {
		this.viewportSize.x = width;
		this.viewportSize.y = height;
		this.halfViewportSize.x = width / 2;
		this.halfViewportSize.y = height / 2;
		this.viewPortAABB.l = this.viewPortAABB.t = 0;
		this.viewPortAABB.r = this.viewportSize.x;
		this.viewPortAABB.b = this.viewportSize.y;
		this.cameraExtentsAABB = this.worldExtentsAABB.clone();
		var _this = this.cameraExtentsAABB;
		_this.l += width / 2;
		_this.r -= width / 2;
		_this.t += height / 2;
		_this.b -= height / 2;
	}
	,__class__: glaze_render_display_Camera
});
var glaze_render_display_Sprite = function() {
	glaze_render_display_DisplayObjectContainer.call(this);
	this.renderable = true;
	this.anchor = new glaze_geom_Vector2();
	this.transformedVerts = new Float32Array(8);
};
glaze_render_display_Sprite.__name__ = ["glaze","render","display","Sprite"];
glaze_render_display_Sprite.__super__ = glaze_render_display_DisplayObjectContainer;
glaze_render_display_Sprite.prototype = $extend(glaze_render_display_DisplayObjectContainer.prototype,{
	calcExtents: function() {
		var width = this.texture.frame.width;
		var height = this.texture.frame.height;
		var aX = this.anchor.x;
		var aY = this.anchor.y;
		var w0 = width * (1 - aX);
		var w1 = width * -aX;
		var h0 = height * (1 - aY);
		var h1 = height * -aY;
		var a = this.worldTransform[0];
		var b = this.worldTransform[3];
		var c = this.worldTransform[1];
		var d = this.worldTransform[4];
		var tx = this.worldTransform[2];
		var ty = this.worldTransform[5];
		this.transformedVerts[0] = a * w1 + c * h1 + tx;
		this.transformedVerts[1] = d * h1 + b * w1 + ty;
		this.transformedVerts[2] = a * w0 + c * h1 + tx;
		this.transformedVerts[3] = d * h1 + b * w0 + ty;
		this.transformedVerts[4] = a * w0 + c * h0 + tx;
		this.transformedVerts[5] = d * h0 + b * w0 + ty;
		this.transformedVerts[6] = a * w1 + c * h0 + tx;
		this.transformedVerts[7] = d * h0 + b * w1 + ty;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var _this = this.aabb;
			var x = this.transformedVerts[i * 2];
			var y = this.transformedVerts[i * 2 + 1];
			if(x < _this.l) {
				_this.l = x;
			}
			if(x > _this.r) {
				_this.r = x;
			}
			if(y < _this.t) {
				_this.t = y;
			}
			if(y > _this.b) {
				_this.b = y;
			}
		}
	}
	,__class__: glaze_render_display_Sprite
});
var glaze_render_display_Stage = function() {
	glaze_render_display_DisplayObjectContainer.call(this);
	this.id = "Stage";
	this.worldAlpha = this.alpha;
	this.stage = this;
};
glaze_render_display_Stage.__name__ = ["glaze","render","display","Stage"];
glaze_render_display_Stage.__super__ = glaze_render_display_DisplayObjectContainer;
glaze_render_display_Stage.prototype = $extend(glaze_render_display_DisplayObjectContainer.prototype,{
	updateTransform: function() {
		var child = this.head;
		while(child != null) {
			child.updateTransform();
			child = child.next;
		}
	}
	,PreRender: function() {
		if(this.dirty == true) {
			this.Flatten();
			this.dirty = false;
		}
	}
	,Flatten: function() {
		this.renderHead = null;
		this.renderTail = null;
		this.renderCount = 0;
	}
	,Traverse: function(node) {
		if(node._visible == false) {
			return;
		}
		if(js_Boot.__instanceof(node,glaze_render_display_Sprite)) {
			if(this.renderHead == null) {
				this.renderHead = node;
				this.renderHead.prevSprite = this.renderHead.nextSprite = null;
			} else {
				var sprite = node;
				sprite.prevSprite = sprite.nextSprite = null;
				if(this.renderTail == null) {
					this.renderTail = sprite;
					this.renderHead.nextSprite = this.renderTail;
					this.renderTail.prevSprite = this.renderHead;
				} else {
					this.renderTail.nextSprite = sprite;
					sprite.prevSprite = this.renderTail;
					this.renderTail = sprite;
				}
			}
			this.renderCount++;
		}
		if(js_Boot.__instanceof(node,glaze_render_display_DisplayObjectContainer)) {
			var doc = node;
			var child = doc.head;
			while(child != null) {
				this.Traverse(child);
				child = child.next;
			}
		}
	}
	,__class__: glaze_render_display_Stage
});
var glaze_render_frame_Frame = function(name,texture,scale) {
	this.name = name;
	this.texture = texture;
	this.scale = scale;
};
glaze_render_frame_Frame.__name__ = ["glaze","render","frame","Frame"];
glaze_render_frame_Frame.prototype = {
	updateSprite: function(sprite,flipX,flipY) {
		if(flipY == null) {
			flipY = 1;
		}
		if(flipX == null) {
			flipX = 1;
		}
		sprite.texture = this.texture;
		sprite.pivot.x = sprite.texture.frame.width * sprite.texture.pivot.x;
		sprite.pivot.y = (sprite.texture.frame.height + 2) * sprite.texture.pivot.y;
		sprite.scale.x = this.scale.x * flipX;
		sprite.scale.y = this.scale.y * flipY;
	}
	,__class__: glaze_render_frame_Frame
};
var glaze_render_frame_FrameList = function() {
	this.frames = [];
	this.framesHash = new haxe_ds_StringMap();
	this.animationsHash = new haxe_ds_StringMap();
};
glaze_render_frame_FrameList.__name__ = ["glaze","render","frame","FrameList"];
glaze_render_frame_FrameList.prototype = {
	addFrame: function(frame) {
		this.frames.push(frame);
		var key = frame.name;
		var _this = this.framesHash;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,frame);
		} else {
			_this.h[key] = frame;
		}
	}
	,getFrame: function(id) {
		var _this = this.framesHash;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,addAnimation: function(animation) {
		var key = animation.name;
		var _this = this.animationsHash;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,animation);
		} else {
			_this.h[key] = animation;
		}
	}
	,getAnimation: function(id) {
		var _this = this.animationsHash;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,get_numFrames: function() {
		return this.frames.length;
	}
	,__class__: glaze_render_frame_FrameList
	,__properties__: {get_numFrames:"get_numFrames"}
};
var glaze_render_frame_FrameListManager = function(textureManager) {
	this.textureManager = textureManager;
	this.frameLists = new haxe_ds_StringMap();
};
glaze_render_frame_FrameListManager.__name__ = ["glaze","render","frame","FrameListManager"];
glaze_render_frame_FrameListManager.prototype = {
	getFrameList: function(id) {
		var _this = this.frameLists;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,ParseFrameListJSON: function(frameListConfig) {
		if(typeof(frameListConfig) != "string") {
			return;
		}
		var frameListConfigData = JSON.parse(frameListConfig);
		var fields = Reflect.fields(frameListConfigData);
		var _g = 0;
		while(_g < fields.length) {
			var prop = fields[_g];
			++_g;
			var frameList = new glaze_render_frame_FrameList();
			var _this = this.frameLists;
			if(__map_reserved[prop] != null) {
				_this.setReserved(prop,frameList);
			} else {
				_this.h[prop] = frameList;
			}
			var framelistItem = Reflect.field(frameListConfigData,prop);
			if(framelistItem.frames != null) {
				var _g1 = 0;
				var _g2 = framelistItem.frames;
				while(_g1 < _g2.length) {
					var frame = _g2[_g1];
					++_g1;
					var _this1 = this.textureManager.textures;
					var key = frame.name;
					frameList.addFrame(new glaze_render_frame_Frame(frame.id,__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key],frame.scale));
				}
				if(framelistItem.animations != null) {
					var animations = Reflect.fields(framelistItem.animations);
					var _g11 = 0;
					while(_g11 < animations.length) {
						var animationProp = animations[_g11];
						++_g11;
						var animation = Reflect.field(framelistItem.animations,animationProp);
						if(animationProp == "walkleft") {
							debugger;
						}
						frameList.addAnimation(new glaze_render_animation_Animation(null,animationProp,animation.frames,animation.fps,animation.looped,animation.flipX,animation.flipY));
					}
				}
			}
		}
	}
	,__class__: glaze_render_frame_FrameListManager
};
var glaze_render_renderers_webgl_IRenderer = function() { };
glaze_render_renderers_webgl_IRenderer.__name__ = ["glaze","render","renderers","webgl","IRenderer"];
glaze_render_renderers_webgl_IRenderer.prototype = {
	__class__: glaze_render_renderers_webgl_IRenderer
};
var glaze_render_renderers_webgl_PointSpriteLightMapRenderer = function(size) {
	this.first = true;
	this.maxSprites = size;
};
glaze_render_renderers_webgl_PointSpriteLightMapRenderer.__name__ = ["glaze","render","renderers","webgl","PointSpriteLightMapRenderer"];
glaze_render_renderers_webgl_PointSpriteLightMapRenderer.__interfaces__ = [glaze_render_renderers_webgl_IRenderer];
glaze_render_renderers_webgl_PointSpriteLightMapRenderer.prototype = {
	Init: function(gl,camera) {
		this.gl = gl;
		this.camera = camera;
		this.projection = new glaze_geom_Vector2();
		this.pointSpriteShader = new glaze_render_renderers_webgl_ShaderWrapper(gl,glaze_render_renderers_webgl_WebGLShaders.CompileProgram(gl,glaze_render_renderers_webgl_PointSpriteLightMapRenderer.SPRITE_VERTEX_SHADER,glaze_render_renderers_webgl_PointSpriteLightMapRenderer.SPRITE_FRAGMENT_SHADER));
		this.dataBuffer = gl.createBuffer();
		this.arrayBuffer = new ArrayBuffer(80 * this.maxSprites);
		this.data = new Float32Array(this.arrayBuffer);
		this.data8 = new Uint8ClampedArray(this.arrayBuffer);
		gl.bindBuffer(34962,this.dataBuffer);
		gl.bufferData(34962,this.data,35048);
		this.ResetBatch();
	}
	,Resize: function(width,height) {
		this.projection.x = width / 2;
		this.projection.y = height / 2;
	}
	,AddStage: function(stage) {
		this.stage = stage;
	}
	,ResetBatch: function() {
		this.indexRun = 0;
	}
	,AddSpriteToBatch: function(x,y,size,alpha,red,green,blue) {
		var index = this.indexRun * 4;
		this.data[index] = x;
		this.data[index + 1] = y;
		this.data[index + 2] = size;
		index *= 4;
		this.data8[index + 12] = red;
		this.data8[index + 13] = green;
		this.data8[index + 14] = blue;
		this.data8[index + 15] = alpha;
		this.indexRun++;
	}
	,Render: function(clip) {
		if(this.indexRun == 0) {
			return;
		}
		this.gl.enable(3042);
		this.gl.blendFunc(770,771);
		this.gl.useProgram(this.pointSpriteShader.program);
		this.gl.bindBuffer(34962,this.dataBuffer);
		this.gl.bufferSubData(34962,0,this.data);
		if(this.first) {
			this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.position);
			this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.size);
			this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.colour);
		}
		this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.position,2,5126,false,16,0);
		this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.size,1,5126,false,16,8);
		this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.colour,4,5121,true,16,12);
		this.gl.uniform2f(this.pointSpriteShader.uniform.cameraPosition,this.camera.position.x,this.camera.position.y);
		if(this.first) {
			this.gl.uniform2f(this.pointSpriteShader.uniform.projectionVector,this.projection.x,this.projection.y);
			this.first = false;
		}
		this.gl.drawArrays(0,0,this.indexRun);
	}
	,__class__: glaze_render_renderers_webgl_PointSpriteLightMapRenderer
};
var glaze_render_renderers_webgl_PointSpriteRenderer = function(size) {
	this.maxSprites = size;
};
glaze_render_renderers_webgl_PointSpriteRenderer.__name__ = ["glaze","render","renderers","webgl","PointSpriteRenderer"];
glaze_render_renderers_webgl_PointSpriteRenderer.__interfaces__ = [glaze_render_renderers_webgl_IRenderer];
glaze_render_renderers_webgl_PointSpriteRenderer.prototype = {
	Init: function(gl,camera) {
		this.gl = gl;
		this.camera = camera;
		this.projection = new glaze_geom_Vector2();
		this.pointSpriteShader = new glaze_render_renderers_webgl_ShaderWrapper(gl,glaze_render_renderers_webgl_WebGLShaders.CompileProgram(gl,glaze_render_renderers_webgl_PointSpriteRenderer.SPRITE_VERTEX_SHADER,glaze_render_renderers_webgl_PointSpriteRenderer.SPRITE_FRAGMENT_SHADER));
		this.dataBuffer = gl.createBuffer();
		this.arrayBuffer = new ArrayBuffer(80 * this.maxSprites);
		this.data = new Float32Array(this.arrayBuffer);
		this.data8 = new Uint8ClampedArray(this.arrayBuffer);
		gl.bindBuffer(34962,this.dataBuffer);
		gl.bufferData(34962,this.data,35048);
		this.ResetBatch();
	}
	,SetSpriteSheet: function(texture,spriteSize,spritesWide,spritesHigh) {
		this.texture = texture;
		this.tileSize = spriteSize;
		this.texTilesWide = spritesWide;
		this.texTilesHigh = spritesHigh;
		this.invTexTilesWide = 1 / this.texTilesWide;
		this.invTexTilesHigh = 1 / this.texTilesHigh;
	}
	,Resize: function(width,height) {
		this.projection.x = width / 2;
		this.projection.y = height / 2;
	}
	,AddStage: function(stage) {
		this.stage = stage;
	}
	,ResetBatch: function() {
		this.indexRun = 0;
	}
	,AddSpriteToBatch: function(spriteX,spriteY,width,height,x,y,size,alpha,flipX,flipY,nop) {
		var index = this.indexRun * 7;
		this.data[index] = x + this.camera.position.x | 0;
		this.data[index + 1] = y + this.camera.position.y | 0;
		this.data[index + 2] = size;
		this.data[index + 3] = spriteX + width * Math.min(flipX,0) * -1;
		this.data[index + 4] = spriteY + height * Math.min(flipY,0) * -1;
		this.data[index + 5] = width * flipX;
		this.data[index + 6] = height * flipY;
		this.indexRun++;
	}
	,Render: function(clip) {
		if(this.indexRun == 0) {
			return;
		}
		this.gl.enable(3042);
		this.gl.blendFunc(770,771);
		this.gl.useProgram(this.pointSpriteShader.program);
		this.gl.bindBuffer(34962,this.dataBuffer);
		this.gl.bufferSubData(34962,0,this.data);
		this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.position);
		this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.size);
		this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.tilePosition);
		this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.tileDimension);
		this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.position,2,5126,false,28,0);
		this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.size,1,5126,false,28,8);
		this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.tilePosition,2,5126,false,28,12);
		this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.tileDimension,2,5126,false,28,20);
		this.gl.uniform2f(this.pointSpriteShader.uniform.projectionVector,this.projection.x,this.projection.y);
		this.gl.activeTexture(33984);
		this.gl.bindTexture(3553,this.texture);
		this.gl.drawArrays(0,0,this.indexRun);
	}
	,__class__: glaze_render_renderers_webgl_PointSpriteRenderer
};
var glaze_render_renderers_webgl_ShaderWrapper = function(gl,program) {
	this.program = program;
	gl.useProgram(this.program);
	this.attribute = { };
	this.uniform = { };
	var cnt = gl.getProgramParameter(program,35721);
	var i = 0;
	while(i < cnt) {
		var attrib = gl.getActiveAttrib(program,i);
		this.attribute[attrib.name] = gl.getAttribLocation(program,attrib.name);
		++i;
	}
	cnt = gl.getProgramParameter(program,35718);
	i = 0;
	while(i < cnt) {
		var attrib1 = gl.getActiveUniform(program,i);
		this.uniform[attrib1.name] = gl.getUniformLocation(program,attrib1.name);
		++i;
	}
};
glaze_render_renderers_webgl_ShaderWrapper.__name__ = ["glaze","render","renderers","webgl","ShaderWrapper"];
glaze_render_renderers_webgl_ShaderWrapper.prototype = {
	__class__: glaze_render_renderers_webgl_ShaderWrapper
};
var glaze_render_renderers_webgl_SpriteRenderer = function() {
	this.first = true;
};
glaze_render_renderers_webgl_SpriteRenderer.__name__ = ["glaze","render","renderers","webgl","SpriteRenderer"];
glaze_render_renderers_webgl_SpriteRenderer.__interfaces__ = [glaze_render_renderers_webgl_IRenderer];
glaze_render_renderers_webgl_SpriteRenderer.prototype = {
	Init: function(gl,camera) {
		this.gl = gl;
		this.camera = camera;
		this.projection = new glaze_geom_Vector2();
		this.spriteShader = new glaze_render_renderers_webgl_ShaderWrapper(gl,glaze_render_renderers_webgl_WebGLShaders.CompileProgram(gl,glaze_render_renderers_webgl_SpriteRenderer.SPRITE_VERTEX_SHADER,glaze_render_renderers_webgl_SpriteRenderer.SPRITE_FRAGMENT_SHADER));
		this.spriteBatch = new glaze_render_renderers_webgl_WebGLBatch(gl);
		this.spriteBatch.ResizeBatch(1000);
	}
	,Resize: function(width,height) {
		this.projection.x = width / 2;
		this.projection.y = height / 2;
	}
	,AddStage: function(stage) {
		this.stage = stage;
	}
	,Render: function(clip) {
		this.stage.updateTransform();
		this.stage.PreRender();
		this.gl.useProgram(this.spriteShader.program);
		this.gl.uniform2f(this.spriteShader.uniform.projectionVector,this.projection.x,this.projection.y);
		this.gl.enableVertexAttribArray(this.spriteShader.attribute.aVertexPosition);
		this.gl.enableVertexAttribArray(this.spriteShader.attribute.aTextureCoord);
		this.gl.enableVertexAttribArray(this.spriteShader.attribute.aColor);
		this.gl.vertexAttribPointer(this.spriteShader.attribute.aVertexPosition,2,5126,false,20,0);
		this.gl.vertexAttribPointer(this.spriteShader.attribute.aTextureCoord,2,5126,false,20,8);
		this.gl.vertexAttribPointer(this.spriteShader.attribute.aColor,1,5126,false,20,16);
		this.spriteBatch.Render(this.spriteShader,this.stage,this.camera.viewPortAABB);
	}
	,__class__: glaze_render_renderers_webgl_SpriteRenderer
};
var glaze_render_renderers_webgl_TileLayer = function() {
	this.scrollScale = new glaze_geom_Vector2(1,1);
	this.inverseTileDataTextureSize = new Float32Array(2);
	this.inverseSpriteTextureSize = new Float32Array(2);
};
glaze_render_renderers_webgl_TileLayer.__name__ = ["glaze","render","renderers","webgl","TileLayer"];
glaze_render_renderers_webgl_TileLayer.prototype = {
	setSpriteTexture: function(spriteTexture) {
		this.spriteTexture = spriteTexture.texture;
		this.inverseSpriteTextureSize[0] = 1 / spriteTexture.width;
		this.inverseSpriteTextureSize[1] = 1 / spriteTexture.height;
	}
	,setTextureFromMap: function(gl,data) {
		if(this.tileDataTexture == null) {
			this.tileDataTexture = gl.createTexture();
		}
		gl.bindTexture(3553,this.tileDataTexture);
		gl.texImage2D(3553,0,6408,data.w,data.h,0,6408,5121,data.data8);
		gl.texParameteri(3553,10240,9728);
		gl.texParameteri(3553,10241,9728);
		gl.texParameteri(3553,10242,33071);
		gl.texParameteri(3553,10243,33071);
		this.inverseTileDataTextureSize[0] = 1 / data.w;
		this.inverseTileDataTextureSize[1] = 1 / data.h;
	}
	,setTexture: function(gl,image,repeat) {
		if(this.tileDataTexture == null) {
			this.tileDataTexture = gl.createTexture();
		}
		gl.bindTexture(3553,this.tileDataTexture);
		gl.texImage2D(3553,0,6408,6408,5121,image);
		gl.texParameteri(3553,10240,9728);
		gl.texParameteri(3553,10241,9728);
		if(repeat) {
			gl.texParameteri(3553,10242,10497);
			gl.texParameteri(3553,10243,10497);
		} else {
			gl.texParameteri(3553,10242,33071);
			gl.texParameteri(3553,10243,33071);
		}
		this.inverseTileDataTextureSize[0] = 1 / image.width;
		this.inverseTileDataTextureSize[1] = 1 / image.height;
	}
	,__class__: glaze_render_renderers_webgl_TileLayer
};
var glaze_render_renderers_webgl_TileLayerRenderProxy = function(tileMap,layers) {
	this.tileMap = tileMap;
	this.layers = layers;
	this.lastSnap = new glaze_geom_Vector2(0,0);
	this.thisSnap = new glaze_geom_Vector2(-1000,-1000);
	this.snapChanged = false;
	this.size = new glaze_geom_Vector2();
};
glaze_render_renderers_webgl_TileLayerRenderProxy.__name__ = ["glaze","render","renderers","webgl","TileLayerRenderProxy"];
glaze_render_renderers_webgl_TileLayerRenderProxy.__interfaces__ = [glaze_render_renderers_webgl_IRenderer];
glaze_render_renderers_webgl_TileLayerRenderProxy.prototype = {
	Init: function(gl,camera) {
		this.sprite = new glaze_render_display_Sprite();
		this.sprite.id = "renderTexture";
	}
	,Resize: function(width,height) {
		var _this = this.size;
		_this.x = width;
		_this.y = height;
		this.surface = new glaze_render_texture_BaseTexture(this.tileMap.gl,width | 0,height | 0);
		this.texture = new glaze_render_texture_Texture(this.surface,new glaze_geom_Rectangle(0,0,width,height),new glaze_geom_Vector2(0,0));
		this.sprite.texture = this.texture;
		var _this1 = this.sprite.scale;
		_this1.x = 2;
		_this1.y = -2;
		var _this2 = this.sprite.pivot;
		_this2.x = width / 2;
		_this2.y = height / 2;
	}
	,calcSnap: function(cameraPos) {
		var _this = this.lastSnap;
		var v = this.thisSnap;
		_this.x = v.x;
		_this.y = v.y;
		this.thisSnap.x = (Math.floor(cameraPos.x / -16) - 1) * 16;
		this.thisSnap.y = (Math.floor(cameraPos.y / -16) - 1) * 16;
		this.snapChanged = this.lastSnap.x != this.thisSnap.x || this.lastSnap.y != this.thisSnap.y;
		return this.snapChanged;
	}
	,Render: function(clip) {
		this.calcSnap(this.tileMap.camera.position);
		var _this = this.sprite.position;
		var v = this.size;
		_this.x = v.x;
		_this.y = v.y;
		var _this1 = this.sprite.position;
		var v1 = this.thisSnap;
		_this1.x += v1.x;
		_this1.y += v1.y;
		this.surface.drawTo($bind(this,this.renderSurface));
	}
	,renderSurface: function() {
		this.tileMap.RenderLayers(this);
	}
	,__class__: glaze_render_renderers_webgl_TileLayerRenderProxy
};
var glaze_render_renderers_webgl_TileMap = function(tileSize,tileScale) {
	this.tileSize = tileSize;
	this.tileScale = tileScale;
	this.layers = [];
	this.renderLayers = [];
};
glaze_render_renderers_webgl_TileMap.__name__ = ["glaze","render","renderers","webgl","TileMap"];
glaze_render_renderers_webgl_TileMap.__interfaces__ = [glaze_render_renderers_webgl_IRenderer];
glaze_render_renderers_webgl_TileMap.prototype = {
	Init: function(gl,camera) {
		if(this.gl != null) {
			return;
		}
		this.gl = gl;
		this.camera = camera;
		this.filtered = false;
		this.spriteSheet = gl.createTexture();
		this.viewportSize = new glaze_geom_Vector2();
		this.scaledViewportSize = new Float32Array(2);
		this.inverseTileTextureSize = new Float32Array(2);
		this.inverseSpriteTextureSize = new Float32Array(2);
		this.quadVertBuffer = gl.createBuffer();
		gl.bindBuffer(34962,this.quadVertBuffer);
		var quadVerts = new Float32Array([-1,-1,0,1,1,-1,1,1,1,1,1,0,-1,-1,0,1,1,1,1,0,-1,1,0,0]);
		gl.bufferData(34962,quadVerts,35044);
		this.tilemapShader = new glaze_render_renderers_webgl_ShaderWrapper(gl,glaze_render_renderers_webgl_WebGLShaders.CompileProgram(gl,glaze_render_renderers_webgl_TileMap.TILEMAP_VERTEX_SHADER,glaze_render_renderers_webgl_TileMap.TILEMAP_FRAGMENT_SHADER));
		this.flip = false;
		this.writebuffer2 = new glaze_ds_TypedArray2D(3,3);
		var _g = 0;
		var _g1 = this.renderLayers;
		while(_g < _g1.length) {
			var renderLayer = _g1[_g];
			++_g;
			renderLayer.Init(gl,camera);
		}
	}
	,Resize: function(width,height) {
		var expandedWidth = (Math.floor(width / (this.tileSize * this.tileScale)) + 2) * this.tileSize;
		var expandedHeight = (Math.floor(height / (this.tileSize * this.tileScale)) + 2) * this.tileSize;
		this.viewportSize.x = expandedWidth * this.tileScale;
		this.viewportSize.y = expandedHeight * this.tileScale;
		this.scaledViewportSize[0] = this.viewportSize.x / this.tileScale;
		this.scaledViewportSize[1] = this.viewportSize.y / this.tileScale;
		var _g = 0;
		var _g1 = this.renderLayers;
		while(_g < _g1.length) {
			var renderLayer = _g1[_g];
			++_g;
			renderLayer.Resize(Math.floor(expandedWidth),Math.floor(expandedHeight));
		}
	}
	,SetSpriteSheet: function(image) {
		this.gl.bindTexture(3553,this.spriteSheet);
		this.gl.pixelStorei(37441,0);
		this.gl.texImage2D(3553,0,6408,6408,5121,image);
		if(!this.filtered) {
			this.gl.texParameteri(3553,10240,9728);
			this.gl.texParameteri(3553,10241,9728);
		} else {
			this.gl.texParameteri(3553,10240,9729);
			this.gl.texParameteri(3553,10241,9729);
		}
		this.inverseSpriteTextureSize[0] = 1 / image.width;
		this.inverseSpriteTextureSize[1] = 1 / image.height;
	}
	,SetTileLayer: function(image,layerId,scrollScaleX,scrollScaleY) {
		var layer = new glaze_render_renderers_webgl_TileLayer();
		layer.setTexture(this.gl,image,false);
		layer.scrollScale.x = scrollScaleX;
		layer.scrollScale.y = scrollScaleY;
		this.layers.push(layer);
	}
	,SetTileLayerFromData: function(data,sprite,layerId,scrollScaleX,scrollScaleY) {
		var layer = new glaze_render_renderers_webgl_TileLayer();
		layer.setTextureFromMap(this.gl,data);
		layer.setSpriteTexture(sprite);
		layer.scrollScale.x = scrollScaleX;
		layer.scrollScale.y = scrollScaleY;
		this.layers.push(layer);
	}
	,SetTileRenderLayer: function(layers) {
		var tileRenderLayer = new glaze_render_renderers_webgl_TileLayerRenderProxy(this,layers);
		this.renderLayers.push(tileRenderLayer);
	}
	,updateMap: function(x,y,data) {
		var startX = data[0];
		var startY = data[1];
		var width = data[2];
		var height = data[3];
		var centerX = data[4];
		var centerY = data[5];
		var superY = Math.floor(data[6] / 8);
		var superX = data[6] % 8;
		this.writebuffer2.h = height;
		this.writebuffer2.w = width;
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var ypos = _g1++;
			var _g3 = 0;
			var _g2 = width;
			while(_g3 < _g2) {
				var xpos = _g3++;
				var _x = startX + xpos;
				var _y = startY + ypos;
				var value = superY << 24 | superX << 16 | _y << 8 | _x;
				var _this = this.writebuffer2;
				_this.data32[ypos * _this.w + xpos] = value;
			}
		}
		var writeLayer = this.layers[2].tileDataTexture;
		this.gl.bindTexture(3553,writeLayer);
		this.gl.texSubImage2D(3553,0,x - centerX,y - centerY,width,height,6408,5121,this.writebuffer2.data8);
	}
	,Render: function(clip) {
		var _g = 0;
		var _g1 = this.renderLayers;
		while(_g < _g1.length) {
			var renderLayer = _g1[_g];
			++_g;
			renderLayer.Render(clip);
		}
	}
	,RenderLayers: function(renderLayer) {
		this.gl.clearColor(0.0,0.0,0.0,0.0);
		this.gl.colorMask(true,true,true,true);
		this.gl.clear(16384);
		this.gl.useProgram(this.tilemapShader.program);
		this.gl.bindBuffer(34962,this.quadVertBuffer);
		this.gl.enableVertexAttribArray(this.tilemapShader.attribute.position);
		this.gl.enableVertexAttribArray(this.tilemapShader.attribute.texture);
		this.gl.vertexAttribPointer(this.tilemapShader.attribute.position,2,5126,false,16,0);
		this.gl.vertexAttribPointer(this.tilemapShader.attribute.texture,2,5126,false,16,8);
		this.gl.uniform2fv(this.tilemapShader.uniform.viewportSize,this.scaledViewportSize);
		this.gl.uniform1f(this.tilemapShader.uniform.tileSize,this.tileSize);
		this.gl.uniform1f(this.tilemapShader.uniform.inverseTileSize,1 / this.tileSize);
		this.gl.uniform1i(this.tilemapShader.uniform.sprites,0);
		this.gl.uniform1i(this.tilemapShader.uniform.tiles,1);
		var _g = 0;
		var _g1 = renderLayer.layers;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var layer = this.layers[i];
			var pX = renderLayer.thisSnap.x / 2;
			var pY = renderLayer.thisSnap.y / 2;
			this.gl.uniform2f(this.tilemapShader.uniform.viewOffset,pX,pY);
			this.gl.uniform2fv(this.tilemapShader.uniform.inverseSpriteTextureSize,layer.inverseSpriteTextureSize);
			this.gl.uniform2fv(this.tilemapShader.uniform.inverseTileTextureSize,layer.inverseTileDataTextureSize);
			this.gl.activeTexture(33984);
			this.gl.bindTexture(3553,layer.spriteTexture);
			this.gl.activeTexture(33985);
			this.gl.bindTexture(3553,layer.tileDataTexture);
			this.gl.drawArrays(4,0,6);
		}
	}
	,__class__: glaze_render_renderers_webgl_TileMap
};
var glaze_render_renderers_webgl_WebGLBatch = function(gl) {
	this.gl = gl;
	this.size = 1;
	this.indexBuffer = gl.createBuffer();
	this.dataBuffer = gl.createBuffer();
	this.blendMode = 0;
	this.dynamicSize = 1;
};
glaze_render_renderers_webgl_WebGLBatch.__name__ = ["glaze","render","renderers","webgl","WebGLBatch"];
glaze_render_renderers_webgl_WebGLBatch.prototype = {
	Clean: function() {
	}
	,ResizeBatch: function(size) {
		this.size = size;
		this.dynamicSize = size;
		this.data = new Float32Array(this.dynamicSize * 20);
		this.gl.bindBuffer(34962,this.dataBuffer);
		this.gl.bufferData(34962,this.data,35048);
		this.indices = new Uint16Array(this.dynamicSize * 6);
		var _g1 = 0;
		var _g = this.dynamicSize;
		while(_g1 < _g) {
			var i = _g1++;
			var index2 = i * 6;
			var index3 = i * 4;
			this.indices[index2] = index3;
			this.indices[index2 + 1] = index3 + 1;
			this.indices[index2 + 2] = index3 + 2;
			this.indices[index2 + 3] = index3;
			this.indices[index2 + 4] = index3 + 2;
			this.indices[index2 + 5] = index3 + 3;
		}
		this.gl.bindBuffer(34963,this.indexBuffer);
		this.gl.bufferData(34963,this.indices,35044);
	}
	,Flush: function(shader,texture,size) {
		this.gl.bindBuffer(34962,this.dataBuffer);
		this.gl.bufferSubData(34962,0,this.data);
		this.gl.vertexAttribPointer(shader.attribute.aVertexPosition,2,5126,false,20,0);
		this.gl.vertexAttribPointer(shader.attribute.aTextureCoord,2,5126,false,20,8);
		this.gl.vertexAttribPointer(shader.attribute.aColor,1,5126,false,20,16);
		this.gl.activeTexture(33984);
		this.gl.bindTexture(3553,texture);
		this.gl.drawElements(4,size * 6,5123,0);
	}
	,AddSpriteToBatch: function(sprite,indexRun) {
		var index = indexRun * 20;
		var frame = sprite.texture.frame;
		var tw = sprite.texture.baseTexture.width;
		var th = sprite.texture.baseTexture.height;
		var uvs = sprite.texture.uvs;
		this.data[index] = sprite.transformedVerts[0];
		this.data[index + 1] = sprite.transformedVerts[1];
		this.data[index + 2] = uvs[0];
		this.data[index + 3] = uvs[1];
		this.data[index + 4] = sprite.worldAlpha;
		this.data[index + 5] = sprite.transformedVerts[2];
		this.data[index + 6] = sprite.transformedVerts[3];
		this.data[index + 7] = uvs[2];
		this.data[index + 8] = uvs[3];
		this.data[index + 9] = sprite.worldAlpha;
		this.data[index + 10] = sprite.transformedVerts[4];
		this.data[index + 11] = sprite.transformedVerts[5];
		this.data[index + 12] = uvs[4];
		this.data[index + 13] = uvs[5];
		this.data[index + 14] = sprite.worldAlpha;
		this.data[index + 15] = sprite.transformedVerts[6];
		this.data[index + 16] = sprite.transformedVerts[7];
		this.data[index + 17] = uvs[6];
		this.data[index + 18] = uvs[7];
		this.data[index + 19] = sprite.worldAlpha;
	}
	,Render: function(shader,stage,clip) {
		var node;
		var stack;
		var top;
		node = stage;
		stack = [];
		stack[0] = node;
		top = 1;
		var indexRun = 0;
		var currentTexture = null;
		while(top > 0) {
			var thisNode = stack[--top];
			if(thisNode.next != null) {
				stack[top++] = thisNode.next;
			}
			if(thisNode.head != null) {
				stack[top++] = thisNode.head;
			}
			if(thisNode._visible && thisNode.renderable) {
				var sprite = thisNode;
				if(sprite.texture.baseTexture.texture != currentTexture || indexRun == this.size) {
					this.Flush(shader,currentTexture,indexRun);
					indexRun = 0;
					currentTexture = sprite.texture.baseTexture.texture;
				}
				var tmp;
				if(clip != null) {
					var _this = sprite.aabb;
					if(_this.l > clip.r) {
						tmp = false;
					} else if(_this.r < clip.l) {
						tmp = false;
					} else if(_this.t > clip.b) {
						tmp = false;
					} else if(_this.b < clip.t) {
						tmp = false;
					} else {
						tmp = true;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					var index = indexRun * 20;
					var frame = sprite.texture.frame;
					var tw = sprite.texture.baseTexture.width;
					var th = sprite.texture.baseTexture.height;
					var uvs = sprite.texture.uvs;
					this.data[index] = sprite.transformedVerts[0];
					this.data[index + 1] = sprite.transformedVerts[1];
					this.data[index + 2] = uvs[0];
					this.data[index + 3] = uvs[1];
					this.data[index + 4] = sprite.worldAlpha;
					this.data[index + 5] = sprite.transformedVerts[2];
					this.data[index + 6] = sprite.transformedVerts[3];
					this.data[index + 7] = uvs[2];
					this.data[index + 8] = uvs[3];
					this.data[index + 9] = sprite.worldAlpha;
					this.data[index + 10] = sprite.transformedVerts[4];
					this.data[index + 11] = sprite.transformedVerts[5];
					this.data[index + 12] = uvs[4];
					this.data[index + 13] = uvs[5];
					this.data[index + 14] = sprite.worldAlpha;
					this.data[index + 15] = sprite.transformedVerts[6];
					this.data[index + 16] = sprite.transformedVerts[7];
					this.data[index + 17] = uvs[6];
					this.data[index + 18] = uvs[7];
					this.data[index + 19] = sprite.worldAlpha;
					++indexRun;
				}
			}
		}
		if(indexRun > 0) {
			this.Flush(shader,currentTexture,indexRun);
		}
	}
	,Render2: function(shader,stage,clip) {
		var _gthis = this;
		this.gl.useProgram(shader.program);
		var indexRun = 0;
		var currentTexture = null;
		var renderDisplayObject = function(target,p) {
			if(!target._visible) {
				return false;
			}
			if(!target.renderable) {
				return true;
			}
			var sprite = target;
			if(sprite.texture.baseTexture.texture != currentTexture || indexRun == _gthis.size) {
				_gthis.Flush(shader,currentTexture,indexRun);
				indexRun = 0;
				currentTexture = sprite.texture.baseTexture.texture;
			}
			var renderDisplayObject1;
			if(clip != null) {
				var _this = sprite.aabb;
				if(_this.l > clip.r) {
					renderDisplayObject1 = false;
				} else if(_this.r < clip.l) {
					renderDisplayObject1 = false;
				} else if(_this.t > clip.b) {
					renderDisplayObject1 = false;
				} else if(_this.b < clip.t) {
					renderDisplayObject1 = false;
				} else {
					renderDisplayObject1 = true;
				}
			} else {
				renderDisplayObject1 = true;
			}
			if(renderDisplayObject1) {
				var index = indexRun * 20;
				var frame = sprite.texture.frame;
				var tw = sprite.texture.baseTexture.width;
				var th = sprite.texture.baseTexture.height;
				var uvs = sprite.texture.uvs;
				_gthis.data[index] = sprite.transformedVerts[0];
				_gthis.data[index + 1] = sprite.transformedVerts[1];
				_gthis.data[index + 2] = uvs[0];
				_gthis.data[index + 3] = uvs[1];
				_gthis.data[index + 4] = sprite.worldAlpha;
				_gthis.data[index + 5] = sprite.transformedVerts[2];
				_gthis.data[index + 6] = sprite.transformedVerts[3];
				_gthis.data[index + 7] = uvs[2];
				_gthis.data[index + 8] = uvs[3];
				_gthis.data[index + 9] = sprite.worldAlpha;
				_gthis.data[index + 10] = sprite.transformedVerts[4];
				_gthis.data[index + 11] = sprite.transformedVerts[5];
				_gthis.data[index + 12] = uvs[4];
				_gthis.data[index + 13] = uvs[5];
				_gthis.data[index + 14] = sprite.worldAlpha;
				_gthis.data[index + 15] = sprite.transformedVerts[6];
				_gthis.data[index + 16] = sprite.transformedVerts[7];
				_gthis.data[index + 17] = uvs[6];
				_gthis.data[index + 18] = uvs[7];
				_gthis.data[index + 19] = sprite.worldAlpha;
				indexRun += 1;
			}
			return true;
		};
		stage.applySlot(renderDisplayObject);
		if(indexRun > 0) {
			this.Flush(shader,currentTexture,indexRun);
		}
	}
	,Render1: function(shader,spriteHead,clip) {
		if(spriteHead == null) {
			return;
		}
		this.gl.useProgram(shader.program);
		var indexRun = 0;
		var sprite = spriteHead;
		var currentTexture = sprite.texture.baseTexture.texture;
		while(sprite != null) {
			if(sprite.texture.baseTexture.texture != currentTexture || indexRun == this.size) {
				this.Flush(shader,currentTexture,indexRun);
				indexRun = 0;
				currentTexture = sprite.texture.baseTexture.texture;
			}
			var tmp;
			if(clip != null) {
				var _this = sprite.aabb;
				if(_this.l > clip.r) {
					tmp = false;
				} else if(_this.r < clip.l) {
					tmp = false;
				} else if(_this.t > clip.b) {
					tmp = false;
				} else if(_this.b < clip.t) {
					tmp = false;
				} else {
					tmp = true;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var index = indexRun * 20;
				var frame = sprite.texture.frame;
				var tw = sprite.texture.baseTexture.width;
				var th = sprite.texture.baseTexture.height;
				var uvs = sprite.texture.uvs;
				this.data[index] = sprite.transformedVerts[0];
				this.data[index + 1] = sprite.transformedVerts[1];
				this.data[index + 2] = uvs[0];
				this.data[index + 3] = uvs[1];
				this.data[index + 4] = sprite.worldAlpha;
				this.data[index + 5] = sprite.transformedVerts[2];
				this.data[index + 6] = sprite.transformedVerts[3];
				this.data[index + 7] = uvs[2];
				this.data[index + 8] = uvs[3];
				this.data[index + 9] = sprite.worldAlpha;
				this.data[index + 10] = sprite.transformedVerts[4];
				this.data[index + 11] = sprite.transformedVerts[5];
				this.data[index + 12] = uvs[4];
				this.data[index + 13] = uvs[5];
				this.data[index + 14] = sprite.worldAlpha;
				this.data[index + 15] = sprite.transformedVerts[6];
				this.data[index + 16] = sprite.transformedVerts[7];
				this.data[index + 17] = uvs[6];
				this.data[index + 18] = uvs[7];
				this.data[index + 19] = sprite.worldAlpha;
				++indexRun;
			}
			sprite = sprite.nextSprite;
		}
		if(indexRun > 0) {
			this.Flush(shader,currentTexture,indexRun);
		}
	}
	,__class__: glaze_render_renderers_webgl_WebGLBatch
};
var glaze_render_renderers_webgl_WebGLRenderer = function(stage,camera,view,width,height,transparent,antialias) {
	if(antialias == null) {
		antialias = false;
	}
	if(transparent == null) {
		transparent = false;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	this.stage = stage;
	this.camera = camera;
	this.view = view;
	this.contextLost = false;
	this.contextAttributes = { };
	this.contextAttributes.alpha = transparent;
	this.contextAttributes.antialias = antialias;
	this.contextAttributes.premultipliedAlpha = false;
	this.contextAttributes.stencil = false;
	this.renderers = [];
	this.InitalizeWebGlContext();
	this.Resize(width,height);
};
glaze_render_renderers_webgl_WebGLRenderer.__name__ = ["glaze","render","renderers","webgl","WebGLRenderer"];
glaze_render_renderers_webgl_WebGLRenderer.prototype = {
	InitalizeWebGlContext: function() {
		this.view.addEventListener("webglcontextlost",$bind(this,this.onContextLost),false);
		this.view.addEventListener("webglcontextrestored",$bind(this,this.onContextRestored),false);
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.view,this.contextAttributes);
		this.gl.disable(2929);
		this.gl.disable(2884);
		this.gl.enable(3042);
		this.gl.colorMask(true,true,true,this.contextAttributes.alpha);
		this.gl.clearColor(0,0,0,1);
		if(!this.gl.getExtension("OES_texture_float")) {
			haxe_Log.trace("New browser time: Float textures not supported",{ fileName : "WebGLRenderer.hx", lineNumber : 65, className : "glaze.render.renderers.webgl.WebGLRenderer", methodName : "InitalizeWebGlContext"});
		}
	}
	,Resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.view.width = width;
		this.view.height = height;
		this.gl.viewport(0,0,width,height);
		this.gl.scissor(0,0,width,height);
	}
	,AddRenderer: function(renderer) {
		renderer.Init(this.gl,this.camera);
		renderer.Resize(this.width,this.height);
		this.renderers.push(renderer);
	}
	,Render: function(clip) {
		if(this.contextLost) {
			return;
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.clearColor(0.623529411764705888,0.737254901960784359,0.772549019607843168,1.0);
		this.gl.clear(16384);
		this.gl.colorMask(true,true,true,false);
		var _g = 0;
		var _g1 = this.renderers;
		while(_g < _g1.length) {
			var renderer = _g1[_g];
			++_g;
			renderer.Render(clip);
		}
	}
	,onContextLost: function(event) {
		this.contextLost = true;
		haxe_Log.trace("webGL Context Lost",{ fileName : "WebGLRenderer.hx", lineNumber : 116, className : "glaze.render.renderers.webgl.WebGLRenderer", methodName : "onContextLost"});
	}
	,onContextRestored: function(event) {
		this.contextLost = false;
		haxe_Log.trace("webGL Context Restored",{ fileName : "WebGLRenderer.hx", lineNumber : 121, className : "glaze.render.renderers.webgl.WebGLRenderer", methodName : "onContextRestored"});
	}
	,__class__: glaze_render_renderers_webgl_WebGLRenderer
};
var glaze_render_renderers_webgl_WebGLShaders = function() { };
glaze_render_renderers_webgl_WebGLShaders.__name__ = ["glaze","render","renderers","webgl","WebGLShaders"];
glaze_render_renderers_webgl_WebGLShaders.CompileVertexShader = function(gl,shaderSrc) {
	return glaze_render_renderers_webgl_WebGLShaders.CompileShader(gl,shaderSrc,35633);
};
glaze_render_renderers_webgl_WebGLShaders.CompileFragmentShader = function(gl,shaderSrc) {
	return glaze_render_renderers_webgl_WebGLShaders.CompileShader(gl,shaderSrc,35632);
};
glaze_render_renderers_webgl_WebGLShaders.CompileShader = function(gl,shaderSrc,shaderType) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(shaderType);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(!gl.getShaderParameter(shader,35713)) {
		js_Browser.alert(gl.getShaderInfoLog(shader));
		return null;
	}
	return shader;
};
glaze_render_renderers_webgl_WebGLShaders.CompileProgram = function(gl,vertexSrc,fragmentSrc) {
	var vertexShader = glaze_render_renderers_webgl_WebGLShaders.CompileVertexShader(gl,vertexSrc);
	var fragmentShader = glaze_render_renderers_webgl_WebGLShaders.CompileFragmentShader(gl,fragmentSrc);
	var shaderProgram = gl.createProgram();
	gl.attachShader(shaderProgram,vertexShader);
	gl.attachShader(shaderProgram,fragmentShader);
	gl.linkProgram(shaderProgram);
	if(!gl.getProgramParameter(shaderProgram,35714)) {
		js_Browser.alert("Could not initialize program");
		haxe_Log.trace(vertexSrc,{ fileName : "WebGLShaders.hx", lineNumber : 42, className : "glaze.render.renderers.webgl.WebGLShaders", methodName : "CompileProgram"});
		haxe_Log.trace(fragmentSrc,{ fileName : "WebGLShaders.hx", lineNumber : 43, className : "glaze.render.renderers.webgl.WebGLShaders", methodName : "CompileProgram"});
		haxe_Log.trace(gl.getProgramInfoLog(shaderProgram),{ fileName : "WebGLShaders.hx", lineNumber : 44, className : "glaze.render.renderers.webgl.WebGLShaders", methodName : "CompileProgram"});
	}
	return shaderProgram;
};
var glaze_render_texture_BaseTexture = function(gl,width,height,floatingPoint) {
	if(floatingPoint == null) {
		floatingPoint = false;
	}
	this.gl = gl;
	this.powerOfTwo = false;
	this.width = width;
	this.height = height;
	this.RegisterTexture(floatingPoint);
};
glaze_render_texture_BaseTexture.__name__ = ["glaze","render","texture","BaseTexture"];
glaze_render_texture_BaseTexture.FromImage = function(gl,image) {
	var texture = new glaze_render_texture_BaseTexture(gl,image.width,image.height);
	gl.texImage2D(3553,0,6408,6408,5121,image);
	return texture;
};
glaze_render_texture_BaseTexture.prototype = {
	RegisterTexture: function(fp) {
		if(this.texture == null) {
			this.texture = this.gl.createTexture();
		}
		this.gl.bindTexture(3553,this.texture);
		this.gl.pixelStorei(37441,0);
		this.gl.texParameteri(3553,10240,9728);
		this.gl.texParameteri(3553,10241,9728);
		if(this.powerOfTwo) {
			this.gl.texParameteri(3553,10242,10497);
			this.gl.texParameteri(3553,10243,10497);
		} else {
			this.gl.texParameteri(3553,10242,33071);
			this.gl.texParameteri(3553,10243,33071);
		}
		this.gl.texImage2D(3553,0,6408,this.width,this.height,0,6408,fp ? 5126 : 5121,null);
	}
	,bind: function(unit) {
		this.gl.activeTexture(33984 + unit);
		this.gl.bindTexture(3553,this.texture);
	}
	,unbind: function(unit) {
		this.gl.activeTexture(33984 + unit);
		this.gl.bindTexture(3553,null);
	}
	,drawTo: function(callback) {
		if(this.framebuffer == null) {
			this.framebuffer = this.gl.createFramebuffer();
		}
		if(this.renderbuffer == null) {
			this.renderbuffer = this.gl.createRenderbuffer();
		}
		this.gl.bindFramebuffer(36160,this.framebuffer);
		this.gl.bindRenderbuffer(36161,this.renderbuffer);
		if(this.width != (this.renderbuffer.width || this.height != this.renderbuffer.height)) {
			this.renderbuffer.width = this.width;
			this.renderbuffer.height = this.height;
			this.gl.renderbufferStorage(36161,33189,this.width,this.height);
			haxe_Log.trace("resize",{ fileName : "BaseTexture.hx", lineNumber : 84, className : "glaze.render.texture.BaseTexture", methodName : "drawTo"});
			this.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			this.gl.framebufferRenderbuffer(36160,36096,36161,this.renderbuffer);
		}
		this.gl.viewport(0,0,this.width,this.height);
		callback();
		this.gl.bindFramebuffer(36160,null);
		this.gl.bindRenderbuffer(36161,null);
		this.gl.viewport(0,0,800,640);
	}
	,UnregisterTexture: function(gl) {
		var tmp = this.texture != null;
	}
	,__class__: glaze_render_texture_BaseTexture
};
var glaze_render_texture_Texture = function(baseTexture,frame,pivot) {
	this.noFrame = false;
	this.baseTexture = baseTexture;
	if(frame == null) {
		this.noFrame = true;
		this.frame = new glaze_geom_Rectangle(0,0,1,1);
	} else {
		this.frame = frame;
	}
	this.trim = new glaze_geom_Vector2();
	this.pivot = pivot == null ? new glaze_geom_Vector2() : pivot;
	this.uvs = new Float32Array(8);
	this.updateUVS();
};
glaze_render_texture_Texture.__name__ = ["glaze","render","texture","Texture"];
glaze_render_texture_Texture.prototype = {
	updateUVS: function() {
		var tw = this.baseTexture.width;
		var th = this.baseTexture.height;
		this.uvs[0] = this.frame.x / tw;
		this.uvs[1] = this.frame.y / th;
		this.uvs[2] = (this.frame.x + this.frame.width) / tw;
		this.uvs[3] = this.frame.y / th;
		this.uvs[4] = (this.frame.x + this.frame.width) / tw;
		this.uvs[5] = (this.frame.y + this.frame.height) / th;
		this.uvs[6] = this.frame.x / tw;
		this.uvs[7] = (this.frame.y + this.frame.height) / th;
	}
	,__class__: glaze_render_texture_Texture
};
var glaze_render_texture_TextureManager = function(gl) {
	this.gl = gl;
	this.baseTextures = new haxe_ds_StringMap();
	this.textures = new haxe_ds_StringMap();
};
glaze_render_texture_TextureManager.__name__ = ["glaze","render","texture","TextureManager"];
glaze_render_texture_TextureManager.prototype = {
	AddTexture: function(id,image) {
		var baseTexture = glaze_render_texture_BaseTexture.FromImage(this.gl,image);
		var _this = this.baseTextures;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,baseTexture);
		} else {
			_this.h[id] = baseTexture;
		}
		return baseTexture;
	}
	,ParseTexturePackerJSON: function(textureConfig,id) {
		if(typeof(textureConfig) != "string") {
			return;
		}
		var _this = this.baseTextures;
		var baseTexture = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		var textureData = JSON.parse(textureConfig);
		var fields = Reflect.fields(textureData.frames);
		var _g = 0;
		while(_g < fields.length) {
			var prop = fields[_g];
			++_g;
			var frame = Reflect.field(textureData.frames,prop);
			var _this1 = this.textures;
			var value = new glaze_render_texture_Texture(baseTexture,new glaze_geom_Rectangle(frame.frame.x,frame.frame.y,frame.frame.w,frame.frame.h),new glaze_geom_Vector2(frame.pivot.x,frame.pivot.y));
			if(__map_reserved[prop] != null) {
				_this1.setReserved(prop,value);
			} else {
				_this1.h[prop] = value;
			}
		}
	}
	,ParseTexturesFromTiles: function(tileSize,id) {
	}
	,__class__: glaze_render_texture_TextureManager
};
var glaze_signals_ListenerNode = function() {
};
glaze_signals_ListenerNode.__name__ = ["glaze","signals","ListenerNode"];
glaze_signals_ListenerNode.prototype = {
	__class__: glaze_signals_ListenerNode
};
var glaze_signals_ListenerNodePool = function() {
};
glaze_signals_ListenerNodePool.__name__ = ["glaze","signals","ListenerNodePool"];
glaze_signals_ListenerNodePool.prototype = {
	get: function() {
		if(this.tail != null) {
			var node = this.tail;
			this.tail = this.tail.previous;
			node.previous = null;
			return node;
		} else {
			return new glaze_signals_ListenerNode();
		}
	}
	,dispose: function(node) {
		node.listener = null;
		node.once = false;
		node.next = null;
		node.previous = this.tail;
		this.tail = node;
	}
	,cache: function(node) {
		node.listener = null;
		node.previous = this.cacheTail;
		this.cacheTail = node;
	}
	,releaseCache: function() {
		while(this.cacheTail != null) {
			var node = this.cacheTail;
			this.cacheTail = node.previous;
			node.next = null;
			node.previous = this.tail;
			this.tail = node;
		}
	}
	,__class__: glaze_signals_ListenerNodePool
};
var glaze_signals_SignalBase = function() {
	this.listenerNodePool = new glaze_signals_ListenerNodePool();
	this.numListeners = 0;
};
glaze_signals_SignalBase.__name__ = ["glaze","signals","SignalBase"];
glaze_signals_SignalBase.prototype = {
	startDispatch: function() {
		this.dispatching = true;
	}
	,endDispatch: function() {
		this.dispatching = false;
		if(this.toAddHead != null) {
			if(this.head == null) {
				this.head = this.toAddHead;
				this.tail = this.toAddTail;
			} else {
				this.tail.next = this.toAddHead;
				this.toAddHead.previous = this.tail;
				this.tail = this.toAddTail;
			}
			this.toAddHead = null;
			this.toAddTail = null;
		}
		this.listenerNodePool.releaseCache();
	}
	,getNode: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		return node;
	}
	,nodeExists: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		return node != null;
	}
	,add: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		if(node != null) {
			return;
		}
		var node1 = this.listenerNodePool.get();
		node1.listener = listener;
		this.addNode(node1);
	}
	,addOnce: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		if(node != null) {
			return;
		}
		var node1 = this.listenerNodePool.get();
		node1.listener = listener;
		node1.once = true;
		this.addNode(node1);
	}
	,addNode: function(node) {
		if(this.dispatching) {
			if(this.toAddHead == null) {
				this.toAddHead = this.toAddTail = node;
			} else {
				this.toAddTail.next = node;
				node.previous = this.toAddTail;
				this.toAddTail = node;
			}
		} else if(this.head == null) {
			this.head = this.tail = node;
		} else {
			this.tail.next = node;
			node.previous = this.tail;
			this.tail = node;
		}
		this.numListeners++;
	}
	,remove: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		var node1 = node;
		if(node1 != null) {
			if(this.head == node1) {
				this.head = this.head.next;
			}
			if(this.tail == node1) {
				this.tail = this.tail.previous;
			}
			if(this.toAddHead == node1) {
				this.toAddHead = this.toAddHead.next;
			}
			if(this.toAddTail == node1) {
				this.toAddTail = this.toAddTail.previous;
			}
			if(node1.previous != null) {
				node1.previous.next = node1.next;
			}
			if(node1.next != null) {
				node1.next.previous = node1.previous;
			}
			if(this.dispatching) {
				this.listenerNodePool.cache(node1);
			} else {
				this.listenerNodePool.dispose(node1);
			}
			this.numListeners--;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var node = this.head;
			this.head = this.head.next;
			this.listenerNodePool.dispose(node);
		}
		this.tail = null;
		this.toAddHead = null;
		this.toAddTail = null;
		this.numListeners = 0;
	}
	,__class__: glaze_signals_SignalBase
};
var glaze_signals_Signal0 = function() {
	glaze_signals_SignalBase.call(this);
};
glaze_signals_Signal0.__name__ = ["glaze","signals","Signal0"];
glaze_signals_Signal0.__super__ = glaze_signals_SignalBase;
glaze_signals_Signal0.prototype = $extend(glaze_signals_SignalBase.prototype,{
	dispatch: function() {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener();
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: glaze_signals_Signal0
});
var glaze_signals_Signal1 = function() {
	glaze_signals_SignalBase.call(this);
};
glaze_signals_Signal1.__name__ = ["glaze","signals","Signal1"];
glaze_signals_Signal1.__super__ = glaze_signals_SignalBase;
glaze_signals_Signal1.prototype = $extend(glaze_signals_SignalBase.prototype,{
	dispatch: function(object1) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: glaze_signals_Signal1
});
var glaze_signals_Signal2 = function() {
	glaze_signals_SignalBase.call(this);
};
glaze_signals_Signal2.__name__ = ["glaze","signals","Signal2"];
glaze_signals_Signal2.__super__ = glaze_signals_SignalBase;
glaze_signals_Signal2.prototype = $extend(glaze_signals_SignalBase.prototype,{
	dispatch: function(object1,object2) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1,object2);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: glaze_signals_Signal2
});
var glaze_signals_Signal3 = function() {
	glaze_signals_SignalBase.call(this);
};
glaze_signals_Signal3.__name__ = ["glaze","signals","Signal3"];
glaze_signals_Signal3.__super__ = glaze_signals_SignalBase;
glaze_signals_Signal3.prototype = $extend(glaze_signals_SignalBase.prototype,{
	dispatch: function(object1,object2,object3) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1,object2,object3);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: glaze_signals_Signal3
});
var glaze_tmx_TmxLayer = function(source,parent) {
	this.properties = new glaze_tmx_TmxPropertySet();
	this.map = parent;
	this.name = source.att.resolve("name");
	this.x = source.has.resolve("x") ? Std.parseInt(source.att.resolve("x")) : 0;
	this.y = source.has.resolve("y") ? Std.parseInt(source.att.resolve("y")) : 0;
	this.width = Std.parseInt(source.att.resolve("width"));
	this.height = Std.parseInt(source.att.resolve("height"));
	this.visible = source.has.resolve("visible") && source.att.resolve("visible") == "1";
	this.opacity = source.has.resolve("opacity") ? parseFloat(source.att.resolve("opacity")) : 0;
	var node;
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var node1 = val;
		this.properties.extend(node1);
	}
	var data = source.node.resolve("data");
	if(data != null) {
		var chunk = "";
		var _g = data.att.resolve("encoding");
		switch(_g) {
		case "base64":
			chunk = StringTools.trim(data.get_innerData());
			var compressed = false;
			if(data.has.resolve("compression")) {
				var _g1 = data.att.resolve("compression");
				if(_g1 == "zlib") {
					compressed = true;
				} else {
					throw new js__$Boot_HaxeError("TmxLayer - data compression type not supported!");
				}
			}
			var _d = glaze_ds_Bytes2D.uncompressData(chunk,compressed);
			this.tileGIDs = new glaze_ds_Bytes2D(this.width,this.height,parent.realTileSize,4,_d);
			break;
		case "csv":
			break;
		default:
		}
	}
};
glaze_tmx_TmxLayer.__name__ = ["glaze","tmx","TmxLayer"];
glaze_tmx_TmxLayer.csvToArray = function(input) {
	var result = [];
	var rows = input.split("\n");
	var row;
	var _g = 0;
	while(_g < rows.length) {
		var row1 = rows[_g];
		++_g;
		if(row1 == "") {
			continue;
		}
		var resultRow = [];
		var entries = row1.split(",");
		var entry;
		var _g1 = 0;
		while(_g1 < entries.length) {
			var entry1 = entries[_g1];
			++_g1;
			resultRow.push(Std.parseInt(entry1));
		}
		result.push(resultRow);
	}
	return result;
};
glaze_tmx_TmxLayer.LayerToCoordTexture = function(layer) {
	var tileSet = null;
	var textureData = new glaze_ds_TypedArray2D(layer.width,layer.height);
	var _g1 = 0;
	var _g = layer.width;
	while(_g1 < _g) {
		var xp = _g1++;
		var _g3 = 0;
		var _g2 = layer.height;
		while(_g3 < _g2) {
			var yp = _g3++;
			var _this = layer.tileGIDs;
			var _this1 = layer.tileGIDs;
			var _this2 = layer.tileGIDs;
			var _this3 = layer.tileGIDs;
			var source = _this.data.b[yp * _this.internalWidth + xp * _this.bytesPerCell + 3] << 24 | _this1.data.b[yp * _this1.internalWidth + xp * _this1.bytesPerCell + 2] << 16 | _this2.data.b[yp * _this2.internalWidth + xp * _this2.bytesPerCell + 1] << 8 | _this3.data.b[yp * _this3.internalWidth + xp * _this3.bytesPerCell];
			if(source > 0) {
				var superSet = Math.floor(source / 1024);
				var superY = Math.floor(superSet / 8);
				var superX = superSet % 8;
				var relativeID = source - superSet * 1024;
				--relativeID;
				var y = Math.floor(relativeID / 32);
				var x = relativeID - 32 * y;
				var v = superY << 24 | superX << 16 | y << 8 | x;
				textureData.data32[yp * textureData.w + xp] = v;
			} else {
				textureData.data32[yp * textureData.w + xp] = -1;
			}
		}
	}
	return textureData;
};
glaze_tmx_TmxLayer.LayerToCollisionData = function(layer,tileSize) {
	var tileSet = null;
	var collisionData = new glaze_ds_Bytes2D(layer.width,layer.height,tileSize,1);
	var _g1 = 0;
	var _g = layer.width;
	while(_g1 < _g) {
		var xp = _g1++;
		var _g3 = 0;
		var _g2 = layer.height;
		while(_g3 < _g2) {
			var yp = _g3++;
			var _this = layer.tileGIDs;
			var source = _this.data.b[yp * _this.internalWidth + xp * _this.bytesPerCell];
			if(source > 0) {
				if(tileSet == null) {
					tileSet = layer.map.getGidOwner(source);
				}
				var tileData = 0;
				var relativeID = source - tileSet.firstGID;
				collisionData.data.b[yp * collisionData.internalWidth + xp * collisionData.bytesPerCell] = 1 << relativeID & 255;
			} else {
				collisionData.data.b[yp * collisionData.internalWidth + xp * collisionData.bytesPerCell] = 0;
			}
		}
	}
	return collisionData;
};
glaze_tmx_TmxLayer.prototype = {
	__class__: glaze_tmx_TmxLayer
};
var glaze_tmx_TmxMap = function(data,realTileSize) {
	this.realTileSize = realTileSize;
	this.properties = new glaze_tmx_TmxPropertySet();
	var source = null;
	var node = null;
	if(typeof(data) == "string") {
		source = new haxe_xml_Fast(Xml.parse(data));
	} else {
		throw new js__$Boot_HaxeError("Unknown TMX map format");
	}
	this.tilesets = [];
	this.layers = new glaze_tmx_TmxOrderedHash();
	this.objectGroups = new glaze_tmx_TmxOrderedHash();
	source = source.node.resolve("map");
	this.version = source.att.resolve("version");
	if(this.version == null) {
		this.version = "unknown";
	}
	this.orientation = source.att.resolve("orientation");
	if(this.orientation == null) {
		this.orientation = "orthogonal";
	}
	this.width = Std.parseInt(source.att.resolve("width"));
	this.height = Std.parseInt(source.att.resolve("height"));
	this.tileWidth = Std.parseInt(source.att.resolve("tilewidth"));
	this.tileHeight = Std.parseInt(source.att.resolve("tileheight"));
	this.fullWidth = this.width * this.tileWidth;
	this.fullHeight = this.height * this.tileHeight;
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var node1 = val;
		this.properties.extend(node1);
	}
	var _g_head1 = source.nodes.resolve("tileset").h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var node2 = val1;
		this.tilesets.push(new glaze_tmx_TmxTileSet(node2));
	}
	var _g_head2 = source.nodes.resolve("layer").h;
	while(_g_head2 != null) {
		var val2 = _g_head2.item;
		_g_head2 = _g_head2.next;
		var node3 = val2;
		var _this = this.layers;
		var key = node3.att.resolve("name");
		var value = new glaze_tmx_TmxLayer(node3,this);
		if(!_this._map.exists(key)) {
			_this._keys.push(key);
		}
		_this._map.set(key,value);
	}
	var _g_head3 = source.nodes.resolve("objectgroup").h;
	while(_g_head3 != null) {
		var val3 = _g_head3.item;
		_g_head3 = _g_head3.next;
		var node4 = val3;
		var _this1 = this.objectGroups;
		var key1 = node4.att.resolve("name");
		var value1 = new glaze_tmx_TmxObjectGroup(node4,this);
		if(!_this1._map.exists(key1)) {
			_this1._keys.push(key1);
		}
		_this1._map.set(key1,value1);
	}
};
glaze_tmx_TmxMap.__name__ = ["glaze","tmx","TmxMap"];
glaze_tmx_TmxMap.prototype = {
	getLayer: function(name) {
		return this.layers._map.get(name);
	}
	,getObjectGroup: function(name) {
		return this.objectGroups._map.get(name);
	}
	,getGidOwner: function(gid) {
		var last = null;
		var set;
		var _g = 0;
		var _g1 = this.tilesets;
		while(_g < _g1.length) {
			var set1 = _g1[_g];
			++_g;
			if(set1.hasGid(gid)) {
				return set1;
			}
		}
		return null;
	}
	,__class__: glaze_tmx_TmxMap
};
var glaze_tmx_TmxObject = function(source,parent) {
	this.group = parent;
	this.name = source.has.resolve("name") ? source.att.resolve("name") : "[object]";
	this.type = source.has.resolve("type") ? source.att.resolve("type") : "";
	this.x = Std.parseInt(source.att.resolve("x"));
	this.y = Std.parseInt(source.att.resolve("y"));
	this.width = source.has.resolve("width") ? Std.parseInt(source.att.resolve("width")) : 0;
	this.height = source.has.resolve("height") ? Std.parseInt(source.att.resolve("height")) : 0;
	this.shared = null;
	this.gid = -1;
	if(source.has.resolve("gid") && source.att.resolve("gid").length != 0) {
		this.gid = Std.parseInt(source.att.resolve("gid"));
		var set;
		var _g = 0;
		var _g1 = this.group.map.tilesets;
		while(_g < _g1.length) {
			var set1 = _g1[_g];
			++_g;
			this.shared = set1.getPropertiesByGid(this.gid);
			if(this.shared != null) {
				break;
			}
		}
	}
	var node;
	this.custom = new glaze_tmx_TmxPropertySet();
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var node1 = val;
		this.custom.extend(node1);
	}
	this.combined = new haxe_ds_StringMap();
	if(this.shared != null) {
		this.extend(this.combined,this.shared.keys);
	}
	this.extend(this.combined,this.custom.keys);
	var _g_head1 = source.nodes.resolve("polyline").h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var node2 = val1;
		this.polyline = [];
		var points = node2.att.resolve("points").split(" ");
		var p;
		var _g2 = 0;
		while(_g2 < points.length) {
			var p1 = points[_g2];
			++_g2;
			var coords = p1.split(",");
			var px = parseFloat(coords[0]);
			var py = parseFloat(coords[1]);
			this.polyline.push(new glaze_geom_Vector2(this.x + px,this.y + py));
		}
	}
};
glaze_tmx_TmxObject.__name__ = ["glaze","tmx","TmxObject"];
glaze_tmx_TmxObject.prototype = {
	extend: function(dest,source) {
		var key = source.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var value = __map_reserved[key1] != null ? source.getReserved(key1) : source.h[key1];
			if(__map_reserved[key1] != null) {
				dest.setReserved(key1,value);
			} else {
				dest.h[key1] = value;
			}
		}
	}
	,__class__: glaze_tmx_TmxObject
};
var glaze_tmx_TmxObjectGroup = function(source,parent) {
	this.properties = new glaze_tmx_TmxPropertySet();
	this.objects = [];
	this.map = parent;
	this.name = source.att.resolve("name");
	this.x = source.has.resolve("x") ? Std.parseInt(source.att.resolve("x")) : 0;
	this.y = source.has.resolve("y") ? Std.parseInt(source.att.resolve("y")) : 0;
	this.width = source.has.resolve("width") ? Std.parseInt(source.att.resolve("width")) : 0;
	this.height = source.has.resolve("height") ? Std.parseInt(source.att.resolve("height")) : 0;
	this.visible = source.has.resolve("visible") && source.att.resolve("visible") == "1";
	this.opacity = source.has.resolve("opacity") ? parseFloat(source.att.resolve("opacity")) : 0;
	var node;
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var node1 = val;
		this.properties.extend(node1);
	}
	var _g_head1 = source.nodes.resolve("object").h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var node2 = val1;
		this.objects.push(new glaze_tmx_TmxObject(node2,this));
	}
};
glaze_tmx_TmxObjectGroup.__name__ = ["glaze","tmx","TmxObjectGroup"];
glaze_tmx_TmxObjectGroup.prototype = {
	__class__: glaze_tmx_TmxObjectGroup
};
var glaze_tmx_TmxOrderedHash = function() {
	this._keys = [];
	this._map = new haxe_ds_StringMap();
};
glaze_tmx_TmxOrderedHash.__name__ = ["glaze","tmx","TmxOrderedHash"];
glaze_tmx_TmxOrderedHash.prototype = {
	set: function(key,value) {
		var _this = this._map;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			this._keys.push(key);
		}
		var _this1 = this._map;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,value);
		} else {
			_this1.h[key] = value;
		}
	}
	,remove: function(key) {
		HxOverrides.remove(this._keys,key);
		return this._map.remove(key);
	}
	,exists: function(key) {
		var _this = this._map;
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,get: function(key) {
		var _this = this._map;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,iterator: function() {
		var _keys_itr = HxOverrides.iter(this._keys);
		var __map = this._map;
		return { next : function() {
			var key = _keys_itr.next();
			return __map_reserved[key] != null ? __map.getReserved(key) : __map.h[key];
		}, hasNext : $bind(_keys_itr,_keys_itr.hasNext)};
	}
	,keys: function() {
		return HxOverrides.iter(this._keys);
	}
	,toString: function() {
		var __map = this._map;
		var pairs = Lambda.map(this._keys,function(x) {
			return x + " => " + Std.string(__map_reserved[x] != null ? __map.getReserved(x) : __map.h[x]);
		});
		return "{" + pairs.join(", ") + "}";
	}
	,__class__: glaze_tmx_TmxOrderedHash
};
var glaze_tmx_TmxPropertySet = function() {
	this.keys = new haxe_ds_StringMap();
};
glaze_tmx_TmxPropertySet.__name__ = ["glaze","tmx","TmxPropertySet"];
glaze_tmx_TmxPropertySet.prototype = {
	resolve: function(name) {
		var _this = this.keys;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,extend: function(source) {
		var prop;
		var _g_head = source.nodes.resolve("property").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var prop1 = val;
			var this1 = this.keys;
			var key = prop1.att.resolve("name");
			var value = prop1.att.resolve("value");
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
	}
	,__class__: glaze_tmx_TmxPropertySet
};
var glaze_tmx_TmxTileSet = function(data) {
	var node;
	var source;
	this.numTiles = 16777215;
	this.numRows = this.numCols = 1;
	if(js_Boot.__instanceof(data,haxe_xml_Fast)) {
		source = data;
	} else {
		throw new js__$Boot_HaxeError("Unknown TMX tileset format");
	}
	this.firstGID = source.has.resolve("firstgid") ? Std.parseInt(source.att.resolve("firstgid")) : 1;
	if(!source.has.resolve("source")) {
		var node1 = source.node.resolve("image");
		this.imageSource = node1.att.resolve("source");
		this.name = source.att.resolve("name");
		if(source.has.resolve("tilewidth")) {
			this.tileWidth = Std.parseInt(source.att.resolve("tilewidth"));
		}
		if(source.has.resolve("tileheight")) {
			this.tileHeight = Std.parseInt(source.att.resolve("tileheight"));
		}
		if(source.has.resolve("spacing")) {
			this.spacing = Std.parseInt(source.att.resolve("spacing"));
		}
		if(source.has.resolve("margin")) {
			this.margin = Std.parseInt(source.att.resolve("margin"));
		}
		this._tileProps = [];
		var _g_head = source.nodes.resolve("tile").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node2 = val;
			if(node2.has.resolve("id")) {
				var id = Std.parseInt(node2.att.resolve("id"));
				this._tileProps[id] = new glaze_tmx_TmxPropertySet();
				var _g_head1 = node2.nodes.resolve("properties").h;
				while(_g_head1 != null) {
					var val1 = _g_head1.item;
					_g_head1 = _g_head1.next;
					var prop = val1;
					this._tileProps[id].extend(prop);
				}
			}
		}
	}
};
glaze_tmx_TmxTileSet.__name__ = ["glaze","tmx","TmxTileSet"];
glaze_tmx_TmxTileSet.prototype = {
	get_image: function() {
		return this._image;
	}
	,set_image: function(v) {
		this._image = v;
		this.numCols = Math.floor(v.width / this.tileWidth);
		this.numRows = Math.floor(v.height / this.tileHeight);
		this.numTiles = this.numRows * this.numCols;
		return this._image;
	}
	,hasGid: function(gid) {
		if(gid >= this.firstGID) {
			return gid < this.firstGID + this.numTiles;
		} else {
			return false;
		}
	}
	,fromGid: function(gid) {
		return gid - this.firstGID;
	}
	,toGid: function(id) {
		return this.firstGID + id;
	}
	,getPropertiesByGid: function(gid) {
		if(this._tileProps != null) {
			return this._tileProps[gid - this.firstGID];
		}
		return null;
	}
	,getProperties: function(id) {
		return this._tileProps[id];
	}
	,getRect: function(id) {
		return new glaze_geom_Rectangle(0,0,id % this.numCols * this.tileWidth,id / this.numCols * this.tileHeight);
	}
	,__class__: glaze_tmx_TmxTileSet
	,__properties__: {set_image:"set_image",get_image:"get_image"}
};
var glaze_util_AssetLoader = function() {
	this.assets = new haxe_ds_StringMap();
	this.loaded = new glaze_signals_Signal0();
	this.Reset();
};
glaze_util_AssetLoader.__name__ = ["glaze","util","AssetLoader"];
glaze_util_AssetLoader.prototype = {
	Reset: function() {
		this.running = false;
		this.loaders = [];
	}
	,SetImagesToLoad: function(urls) {
		var _g = 0;
		while(_g < urls.length) {
			var url = urls[_g];
			++_g;
			this.AddAsset(url);
		}
	}
	,AddAsset: function(url) {
		if(this.running == true) {
			return;
		}
		var loader = this.LoaderFactory(url);
		loader.Init(url);
		this.loaders.push(loader);
	}
	,LoaderFactory: function(url) {
		var extention = url.substring(url.length - 3,url.length);
		if(extention == "png") {
			return new glaze_util_ImageAsset(this);
		}
		if(extention == "tmx" || extention == "xml" || extention == "son") {
			return new glaze_util_BlobAsset(this);
		}
		return null;
	}
	,Load: function() {
		if(this.running == true || this.loaders.length == 0) {
			return;
		}
		this.completeCount = this.loaders.length;
		this.running = true;
		var _g = 0;
		var _g1 = this.loaders;
		while(_g < _g1.length) {
			var loader = _g1[_g];
			++_g;
			loader.Load();
		}
	}
	,onLoad: function(item) {
		this.completeCount--;
		var _this = this.assets;
		var key = item.getKey();
		var value = item.getValue();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
		if(this.completeCount == 0) {
			this.loaded.dispatch();
			this.running = false;
		}
	}
	,__class__: glaze_util_AssetLoader
};
var glaze_util_ILoader = function() { };
glaze_util_ILoader.__name__ = ["glaze","util","ILoader"];
glaze_util_ILoader.prototype = {
	__class__: glaze_util_ILoader
};
var glaze_util_ImageAsset = function(mgr) {
	this.mgr = mgr;
};
glaze_util_ImageAsset.__name__ = ["glaze","util","ImageAsset"];
glaze_util_ImageAsset.__interfaces__ = [glaze_util_ILoader];
glaze_util_ImageAsset.prototype = {
	Init: function(url) {
		this.url = url;
		this.image = new Image();
		this.image.onload = $bind(this,this.onLoad);
		this.image.crossOrigin = "anonymous";
	}
	,Load: function() {
		var tmp = this.url + "?cb=";
		var tmp1 = new Date().getTime();
		this.image.src = tmp + tmp1;
		if(this.image.complete == true) {
			this.onLoad(null);
		}
	}
	,onLoad: function(event) {
		if(this.mgr != null) {
			this.mgr.onLoad(this);
		}
	}
	,getKey: function() {
		return this.url;
	}
	,getValue: function() {
		return this.image;
	}
	,__class__: glaze_util_ImageAsset
};
var glaze_util_BlobAsset = function(mgr) {
	this.mgr = mgr;
};
glaze_util_BlobAsset.__name__ = ["glaze","util","BlobAsset"];
glaze_util_BlobAsset.__interfaces__ = [glaze_util_ILoader];
glaze_util_BlobAsset.prototype = {
	Init: function(url) {
		this.url = url;
		this.xhr = new XMLHttpRequest();
		this.xhr.responseType = "text";
		this.xhr.onload = $bind(this,this.onLoad);
		this.xhr.open("GET",this.url + "?cb=" + new Date().getTime(),true);
	}
	,Load: function() {
		this.xhr.send();
	}
	,onLoad: function(event) {
		if(this.mgr != null) {
			this.mgr.onLoad(this);
		}
	}
	,getKey: function() {
		return this.url;
	}
	,getValue: function() {
		return this.xhr.response;
	}
	,__class__: glaze_util_BlobAsset
};
var glaze_util_Ballistics = function() { };
glaze_util_Ballistics.__name__ = ["glaze","util","Ballistics"];
glaze_util_Ballistics.calcProjectileVelocity = function(body,target,velocity) {
	var vel_y;
	var vel_x = target.x;
	vel_y = target.y;
	var v = body.position;
	vel_x -= v.x;
	vel_y -= v.y;
	var t = Math.sqrt(vel_x * vel_x + vel_y * vel_y) + 1e-08;
	vel_x /= t;
	vel_y /= t;
	vel_x *= velocity;
	vel_y *= velocity;
	body.maxScalarVelocity = velocity;
	var _this = body.velocity;
	_this.x = vel_x;
	_this.y = vel_y;
};
glaze_util_Ballistics.calcProjectileForce = function(body,target,force) {
	var newforce_y;
	var newforce_x = target.x;
	newforce_y = target.y;
	var v = body.position;
	newforce_x -= v.x;
	newforce_y -= v.y;
	var t = Math.sqrt(newforce_x * newforce_x + newforce_y * newforce_y) + 1e-08;
	newforce_x /= t;
	newforce_y /= t;
	newforce_x *= force;
	newforce_y *= force;
	var _this = body.forces;
	var s = body.invMass;
	_this.x += newforce_x * s;
	_this.y += newforce_y * s;
	body.canSleep = false;
	body.motion = 10;
	body.bounceCount = 0;
};
var glaze_util_BroadphaseAreaQuery = function(broadphase) {
	this.broadphase = broadphase;
	this.entityCollection = new glaze_ds_EntityCollection();
	this.aabb = new glaze_geom_AABB();
	this.ray = new glaze_physics_collision_Ray();
};
glaze_util_BroadphaseAreaQuery.__name__ = ["glaze","util","BroadphaseAreaQuery"];
glaze_util_BroadphaseAreaQuery.prototype = {
	query: function(position,range,filterEntity,visibleCheck) {
		this.entityCollection.clear();
		var _this = this.aabb.position;
		_this.x = position.x;
		_this.y = position.y;
		var _this1 = this.aabb.extents;
		_this1.x = range;
		_this1.y = range;
		this.filterEntity = filterEntity;
		this.visibleCheck = visibleCheck;
		this.broadphase.QueryArea(this.aabb,$bind(this,this.addBroadphaseItem),true,true);
	}
	,addBroadphaseItem: function(bfproxy) {
		if(this.filterEntity != null && bfproxy.entity == this.filterEntity) {
			return;
		}
		var _this = bfproxy.aabb.position;
		var v = this.aabb.position;
		var dX = _this.x - v.x;
		var dY = _this.y - v.y;
		var distance = dX * dX + dY * dY + 1e-08;
		if(distance > 10 && this.visibleCheck) {
			var _this1 = bfproxy.entity;
			this.ray.initalize(this.aabb.position,bfproxy.entity.map["Position"].coords,0,null);
			this.broadphase.CastRay(this.ray,null,false,false);
			if(this.ray.hit) {
				return;
			}
		}
		var item = this.entityCollection.addItem(bfproxy.entity);
		item.distance = distance;
		item.perspective = this.aabb.position;
	}
	,__class__: glaze_util_BroadphaseAreaQuery
};
var glaze_util_EntityFilterOptions = { __ename__ : true, __constructs__ : ["ALL","FRIENDLY","ENEMY"] };
glaze_util_EntityFilterOptions.ALL = ["ALL",0];
glaze_util_EntityFilterOptions.ALL.toString = $estr;
glaze_util_EntityFilterOptions.ALL.__enum__ = glaze_util_EntityFilterOptions;
glaze_util_EntityFilterOptions.FRIENDLY = ["FRIENDLY",1];
glaze_util_EntityFilterOptions.FRIENDLY.toString = $estr;
glaze_util_EntityFilterOptions.FRIENDLY.__enum__ = glaze_util_EntityFilterOptions;
glaze_util_EntityFilterOptions.ENEMY = ["ENEMY",2];
glaze_util_EntityFilterOptions.ENEMY.toString = $estr;
glaze_util_EntityFilterOptions.ENEMY.__enum__ = glaze_util_EntityFilterOptions;
var glaze_util_GroupEvent = { __ename__ : true, __constructs__ : ["MemberAdded","MemberRemoved"] };
glaze_util_GroupEvent.MemberAdded = ["MemberAdded",0];
glaze_util_GroupEvent.MemberAdded.toString = $estr;
glaze_util_GroupEvent.MemberAdded.__enum__ = glaze_util_GroupEvent;
glaze_util_GroupEvent.MemberRemoved = ["MemberRemoved",1];
glaze_util_GroupEvent.MemberRemoved.toString = $estr;
glaze_util_GroupEvent.MemberRemoved.__enum__ = glaze_util_GroupEvent;
var glaze_util_EntityGroup = function(maxMembers) {
	this.maxMembers = maxMembers;
	this.members = [];
	this.messages = new glaze_signals_Signal2();
};
glaze_util_EntityGroup.__name__ = ["glaze","util","EntityGroup"];
glaze_util_EntityGroup.prototype = {
	addMember: function(entity) {
		if(!this.hasCapacity()) {
			return;
		}
		this.members.push(entity);
		entity.messages.add($bind(this,this.onMemberMessage));
		this.messages.dispatch(glaze_util_GroupEvent.MemberAdded,entity);
	}
	,removeMember: function(entity) {
		if(HxOverrides.remove(this.members,entity)) {
			this.messages.dispatch(glaze_util_GroupEvent.MemberRemoved,entity);
		}
	}
	,onMemberMessage: function(e,type,data) {
		if(type == "destroy") {
			this.removeMember(e);
		}
	}
	,hasCapacity: function() {
		return this.members.length < this.maxMembers;
	}
	,__class__: glaze_util_EntityGroup
};
var glaze_util_EntityUtils = function() { };
glaze_util_EntityUtils.__name__ = ["glaze","util","EntityUtils"];
glaze_util_EntityUtils.standardDestroy = function(entity) {
	entity.addComponent(new glaze_engine_components_Destroy(1));
};
var glaze_util_IDestroyable = function() { };
glaze_util_IDestroyable.__name__ = ["glaze","util","IDestroyable"];
glaze_util_IDestroyable.prototype = {
	__class__: glaze_util_IDestroyable
};
var glaze_util_FlxFSMState = function() {
};
glaze_util_FlxFSMState.__name__ = ["glaze","util","FlxFSMState"];
glaze_util_FlxFSMState.__interfaces__ = [glaze_util_IDestroyable];
glaze_util_FlxFSMState.prototype = {
	enter: function(owner,fsm) {
	}
	,update: function(elapsed,owner,fsm) {
	}
	,exit: function(owner) {
	}
	,destroy: function() {
	}
	,__class__: glaze_util_FlxFSMState
};
var glaze_util_FlxFSM = function(owner,state) {
	this.age = 0;
	this.set_owner(owner);
	this.set_state(state);
	this.type = 0;
	this.transitions = new glaze_util_FlxFSMTransitionTable();
	this.pools = new haxe_ds_StringMap();
};
glaze_util_FlxFSM.__name__ = ["glaze","util","FlxFSM"];
glaze_util_FlxFSM.__interfaces__ = [glaze_util_IDestroyable];
glaze_util_FlxFSM.prototype = {
	update: function(elapsed) {
		if(this.state != null && this.owner != null) {
			this.age += elapsed;
			this.state.update(elapsed,this.owner,this);
		}
		if(this.transitions != null && this.pools != null) {
			var newStateClass = this.transitions.poll(this.stateClass,this.owner);
			if(newStateClass != this.stateClass) {
				var curName = Type.getClassName(this.stateClass);
				var newName = Type.getClassName(newStateClass);
				var _this = this.pools;
				if((__map_reserved[newName] != null ? _this.existsReserved(newName) : _this.h.hasOwnProperty(newName)) == false) {
					var this1 = this.pools;
					var value = new glaze_util_Pool(newStateClass);
					var _this1 = this1;
					if(__map_reserved[newName] != null) {
						_this1.setReserved(newName,value);
					} else {
						_this1.h[newName] = value;
					}
				}
				var returnToPool = this.state;
				var _this2 = this.pools;
				this.set_state((__map_reserved[newName] != null ? _this2.getReserved(newName) : _this2.h[newName]).get());
				var tmp;
				if(this.state != null) {
					var _this3 = this.pools;
					if(__map_reserved[curName] != null) {
						tmp = _this3.existsReserved(curName);
					} else {
						tmp = _this3.h.hasOwnProperty(curName);
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					var _this4 = this.pools;
					(__map_reserved[curName] != null ? _this4.getReserved(curName) : _this4.h[curName]).put(returnToPool);
				}
			}
		}
	}
	,destroy: function() {
		this.set_owner(null);
		this.set_state(null);
		this.stack = null;
		this.name = null;
		this.transitions = null;
		this.pools = null;
	}
	,set_owner: function(owner) {
		if(this.owner != owner) {
			if(this.owner != null && this.state != null) {
				this.state.exit(this.owner);
			}
			this.owner = owner;
			if(this.owner != null && this.state != null) {
				this.age = 0;
				this.state.enter(this.owner,this);
			}
		}
		return this.owner;
	}
	,set_state: function(state) {
		var newClass = state == null ? null : js_Boot.getClass(state);
		if(this.stateClass != newClass) {
			if(this.owner != null && this.state != null) {
				this.state.exit(this.owner);
			}
			this.state = state;
			if(this.state != null && this.owner != null) {
				this.age = 0;
				this.state.enter(this.owner,this);
			}
			this.stateClass = newClass;
		}
		return state;
	}
	,__class__: glaze_util_FlxFSM
	,__properties__: {set_state:"set_state",set_owner:"set_owner"}
};
var glaze_util__$FlxFSM_FlxFSMStackSignal = function() {
	if(glaze_util__$FlxFSM_FlxFSMStackSignal._lockSignal == null) {
		glaze_util__$FlxFSM_FlxFSMStackSignal._lockSignal = new glaze_signals_Signal1();
	}
};
glaze_util__$FlxFSM_FlxFSMStackSignal.__name__ = ["glaze","util","_FlxFSM","FlxFSMStackSignal"];
glaze_util__$FlxFSM_FlxFSMStackSignal.prototype = {
	globalLock: function(type) {
		glaze_util__$FlxFSM_FlxFSMStackSignal._lockSignal.dispatch(type);
	}
	,__class__: glaze_util__$FlxFSM_FlxFSMStackSignal
};
var glaze_util_FlxFSMStack = function() {
	glaze_util__$FlxFSM_FlxFSMStackSignal.call(this);
	this._stack = [];
	this._lockedNames = [];
	this._lockedTypes = 0;
	this._hasLocks = false;
	glaze_util__$FlxFSM_FlxFSMStackSignal._lockSignal.add($bind(this,this.lockType));
};
glaze_util_FlxFSMStack.__name__ = ["glaze","util","FlxFSMStack"];
glaze_util_FlxFSMStack.__interfaces__ = [glaze_util_IDestroyable];
glaze_util_FlxFSMStack.__super__ = glaze_util__$FlxFSM_FlxFSMStackSignal;
glaze_util_FlxFSMStack.prototype = $extend(glaze_util__$FlxFSM_FlxFSMStackSignal.prototype,{
	update: function(elapsed) {
		if(this._alteredStack != null) {
			this._stack = this._alteredStack.slice();
			this._alteredStack = null;
		}
		var _g = 0;
		var _g1 = this._stack;
		while(_g < _g1.length) {
			var fsm = _g1[_g];
			++_g;
			if(this._hasLocks) {
				if(this._lockRemaining == false && (fsm.type & this._lockedTypes) == 0 && this._lockedNames.indexOf(fsm.name) == -1) {
					fsm.update(elapsed);
				}
			} else {
				fsm.update(elapsed);
			}
		}
		if(this._lockedNames.length != 0) {
			this._lockedNames = [];
		}
		this._lockRemaining = false;
		this._lockedTypes = 0;
		this._hasLocks = false;
	}
	,lock: function(name) {
		if(this._lockedNames.indexOf(name) == -1) {
			this._lockedNames.push(name);
			this._hasLocks = true;
		}
	}
	,lockRemaining: function() {
		this._lockRemaining = true;
		this._hasLocks = true;
	}
	,lockType: function(bitflag) {
		this._lockedTypes |= bitflag;
		this._hasLocks = true;
	}
	,unshift: function(FSM) {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		FSM.stack = this;
		this._alteredStack.unshift(FSM);
	}
	,shift: function() {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		var FSM = this._alteredStack.shift();
		FSM.destroy();
		return FSM;
	}
	,push: function(FSM) {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		FSM.stack = this;
		this._alteredStack.push(FSM);
	}
	,pop: function() {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		var FSM = this._alteredStack.pop();
		this.lock(FSM.name);
		FSM.destroy();
		return FSM;
	}
	,remove: function(FSM) {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		if(HxOverrides.remove(this._alteredStack,FSM)) {
			this.lock(FSM.name);
			FSM.destroy();
		}
	}
	,removeByName: function(name) {
		var _g = 0;
		var _g1 = this._stack;
		while(_g < _g1.length) {
			var fsm = _g1[_g];
			++_g;
			if(fsm.name == name) {
				this.remove(fsm);
			}
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._stack;
		while(_g < _g1.length) {
			var fsm = _g1[_g];
			++_g;
			fsm.destroy();
		}
		this.lockRemaining();
		glaze_util__$FlxFSM_FlxFSMStackSignal._lockSignal.remove($bind(this,this.lockType));
	}
	,get_isEmpty: function() {
		return this._stack.length == 0;
	}
	,__class__: glaze_util_FlxFSMStack
	,__properties__: {get_isEmpty:"get_isEmpty"}
});
var glaze_util_FlxFSMTransitionTable = function() {
	this._garbagecollect = false;
	this._table = [];
};
glaze_util_FlxFSMTransitionTable.__name__ = ["glaze","util","FlxFSMTransitionTable"];
glaze_util_FlxFSMTransitionTable.prototype = {
	poll: function(currentState,owner) {
		if(currentState == null && this._startState != null) {
			return this._startState;
		}
		if(this._garbagecollect) {
			this._garbagecollect = false;
			var removeThese = [];
			var _g = 0;
			var _g1 = this._table;
			while(_g < _g1.length) {
				var transition = _g1[_g];
				++_g;
				if(transition.remove == true) {
					if(transition.from == currentState) {
						this._garbagecollect = true;
					} else {
						removeThese.push(transition);
					}
				}
			}
			var _g2 = 0;
			while(_g2 < removeThese.length) {
				var transition1 = removeThese[_g2];
				++_g2;
				HxOverrides.remove(this._table,transition1);
			}
		}
		var _g3 = 0;
		var _g11 = this._table;
		while(_g3 < _g11.length) {
			var transition2 = _g11[_g3];
			++_g3;
			if(transition2.from == currentState || transition2.from == null) {
				if(transition2.evaluate(owner) == true) {
					return transition2.to;
				}
			}
		}
		return currentState;
	}
	,add: function(from,to,condition) {
		if(this.hasTransition(from,to,condition) == false) {
			var row = new glaze_util_Transition();
			row.from = from;
			row.to = to;
			row.condition = condition;
			this._table.push(row);
		}
		return this;
	}
	,addGlobal: function(to,condition) {
		if(this.hasTransition(null,to,condition) == false) {
			var row = new glaze_util_Transition();
			row.to = to;
			row.condition = condition;
			this._table.push(row);
		}
		return this;
	}
	,addTransition: function(transition) {
		if(this._table.indexOf(transition) == -1) {
			this._table.push(transition);
		}
	}
	,start: function($with) {
		this._startState = $with;
		return this;
	}
	,replace: function(target,replacement) {
		var _g = 0;
		var _g1 = this._table;
		while(_g < _g1.length) {
			var transition = _g1[_g];
			++_g;
			if(transition.to == target) {
				transition.remove = true;
				if(transition.from == null) {
					this.addGlobal(replacement,transition.condition);
				} else {
					this.add(transition.from,replacement,transition.condition);
				}
				this._garbagecollect = true;
			}
			if(transition.from == target) {
				transition.remove = true;
				this.add(replacement,transition.to,transition.condition);
				this._garbagecollect = true;
			}
		}
	}
	,remove: function(from,to,condition) {
		if(to == null) {
			if(condition == null) {
				var f = from;
				var _g = 0;
				var _g1 = this._table;
				while(_g < _g1.length) {
					var transition = _g1[_g];
					++_g;
					if(from == transition.from) {
						transition.remove = true;
						this._garbagecollect = true;
					}
				}
			} else if(from == null) {
				var t = to;
				var c = condition;
				var _g2 = 0;
				var _g11 = this._table;
				while(_g2 < _g11.length) {
					var transition1 = _g11[_g2];
					++_g2;
					if(to == transition1.to && condition == transition1.condition) {
						transition1.remove = true;
						this._garbagecollect = true;
					}
				}
			} else {
				var t1 = to;
				var c1 = condition;
				var f1 = from;
				var _g3 = 0;
				var _g12 = this._table;
				while(_g3 < _g12.length) {
					var transition2 = _g12[_g3];
					++_g3;
					if(from == transition2.from && to == transition2.to && condition == transition2.condition) {
						transition2.remove = true;
						this._garbagecollect = true;
					}
				}
			}
		} else if(condition == null) {
			var f2 = from;
			var t2 = to;
			var _g4 = 0;
			var _g13 = this._table;
			while(_g4 < _g13.length) {
				var transition3 = _g13[_g4];
				++_g4;
				if(from == transition3.from && to == transition3.to) {
					transition3.remove = true;
					this._garbagecollect = true;
				}
			}
		} else if(from == null) {
			var t3 = to;
			var c2 = condition;
			var _g5 = 0;
			var _g14 = this._table;
			while(_g5 < _g14.length) {
				var transition4 = _g14[_g5];
				++_g5;
				if(to == transition4.to && condition == transition4.condition) {
					transition4.remove = true;
					this._garbagecollect = true;
				}
			}
		} else {
			var t4 = to;
			var c3 = condition;
			var f3 = from;
			var _g6 = 0;
			var _g15 = this._table;
			while(_g6 < _g15.length) {
				var transition5 = _g15[_g6];
				++_g6;
				if(from == transition5.from && to == transition5.to && condition == transition5.condition) {
					transition5.remove = true;
					this._garbagecollect = true;
				}
			}
		}
	}
	,hasTransition: function(from,to,condition) {
		if(to == null) {
			if(condition == null) {
				var f = from;
				var _g = 0;
				var _g1 = this._table;
				while(_g < _g1.length) {
					var transition = _g1[_g];
					++_g;
					if(from == transition.from && transition.remove == false) {
						return true;
					}
				}
			} else if(from == null) {
				var t = to;
				var c = condition;
				var _g2 = 0;
				var _g11 = this._table;
				while(_g2 < _g11.length) {
					var transition1 = _g11[_g2];
					++_g2;
					if(to == transition1.to && condition == transition1.condition && transition1.remove == false) {
						return true;
					}
				}
			} else {
				var t1 = to;
				var c1 = condition;
				var f1 = from;
				var _g3 = 0;
				var _g12 = this._table;
				while(_g3 < _g12.length) {
					var transition2 = _g12[_g3];
					++_g3;
					if(from == transition2.from && to == transition2.to && condition == transition2.condition && transition2.remove == false) {
						return true;
					}
				}
			}
		} else if(condition == null) {
			var f2 = from;
			var t2 = to;
			var _g4 = 0;
			var _g13 = this._table;
			while(_g4 < _g13.length) {
				var transition3 = _g13[_g4];
				++_g4;
				if(from == transition3.from && to == transition3.to && transition3.remove == false) {
					return true;
				}
			}
		} else if(from == null) {
			var t3 = to;
			var c2 = condition;
			var _g5 = 0;
			var _g14 = this._table;
			while(_g5 < _g14.length) {
				var transition4 = _g14[_g5];
				++_g5;
				if(to == transition4.to && condition == transition4.condition && transition4.remove == false) {
					return true;
				}
			}
		} else {
			var t4 = to;
			var c3 = condition;
			var f3 = from;
			var _g6 = 0;
			var _g15 = this._table;
			while(_g6 < _g15.length) {
				var transition5 = _g15[_g6];
				++_g6;
				if(from == transition5.from && to == transition5.to && condition == transition5.condition && transition5.remove == false) {
					return true;
				}
			}
		}
		return false;
	}
	,__class__: glaze_util_FlxFSMTransitionTable
};
var glaze_util_Transition = function() {
	this.remove = false;
};
glaze_util_Transition.__name__ = ["glaze","util","Transition"];
glaze_util_Transition.prototype = {
	evaluate: function(target) {
		return this.condition(target);
	}
	,__class__: glaze_util_Transition
};
var glaze_util_Geometry = function() { };
glaze_util_Geometry.__name__ = ["glaze","util","Geometry"];
glaze_util_Geometry.lineIntersection = function(A,B,C,D,point) {
	var rTop = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y);
	var sTop = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y);
	var rBot = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);
	var sBot = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);
	if(rBot == 0 || sBot == 0) {
		return -1;
	}
	var r = rTop / rBot;
	var s = sTop / sBot;
	if(r > 0 && r < 1 && s > 0 && s < 1) {
		point.x = A.x + r * (B.x - A.x);
		point.y = A.y + r * (B.y - A.y);
		var dX = A.x - B.x;
		var dY = A.y - B.y;
		return (dX * dX + dY * dY) * r;
	}
	return 0;
};
var glaze_util_IntervalDelay = function(intervalTime) {
	if(intervalTime == null) {
		intervalTime = 0;
	}
	this.reset(intervalTime);
};
glaze_util_IntervalDelay.__name__ = ["glaze","util","IntervalDelay"];
glaze_util_IntervalDelay.prototype = {
	reset: function(intervalTime) {
		if(intervalTime == null) {
			intervalTime = 0;
		}
		this.current = 0;
		this.intervalTime = intervalTime;
		this.intervals = 0;
	}
	,tick: function(delta) {
		this.current += delta;
		if(this.current > this.intervalTime) {
			this.current = 0;
			this.intervals++;
			return true;
		}
		return false;
	}
	,__class__: glaze_util_IntervalDelay
};
var glaze_util_Maths = function() { };
glaze_util_Maths.__name__ = ["glaze","util","Maths"];
glaze_util_Maths.toRad = function(deg) {
	return deg * 0.0174532925199432955;
};
glaze_util_Maths.toDeg = function(rad) {
	return rad * 57.2957795130823229;
};
glaze_util_Maths.Clamp = function(value,min,max) {
	return Math.min(Math.max(value,min),max);
};
glaze_util_Maths.ScaleRectangleWithRatio = function(containerRect,itemRect) {
	var sX = containerRect.x / itemRect.x;
	var sY = containerRect.y / itemRect.y;
	var rD = containerRect.x / containerRect.y;
	var rR = itemRect.x / itemRect.y;
	if(rD < rR) {
		return sX;
	} else {
		return sY;
	}
};
var glaze_util_MessageBus = function() {
	this.map = new haxe_ds_StringMap();
};
glaze_util_MessageBus.__name__ = ["glaze","util","MessageBus"];
glaze_util_MessageBus.prototype = {
	register: function(channelName,callback) {
		var _this = this.map;
		if(!(__map_reserved[channelName] != null ? _this.existsReserved(channelName) : _this.h.hasOwnProperty(channelName))) {
			var _this1 = this.map;
			var value = [];
			if(__map_reserved[channelName] != null) {
				_this1.setReserved(channelName,value);
			} else {
				_this1.h[channelName] = value;
			}
		}
		var _this2 = this.map;
		var channel = __map_reserved[channelName] != null ? _this2.getReserved(channelName) : _this2.h[channelName];
		channel.push(callback);
	}
	,registerAll: function(channelNames,callback) {
		var _g = 0;
		while(_g < channelNames.length) {
			var channelName = channelNames[_g];
			++_g;
			this.register(channelName,callback);
		}
	}
	,unregister: function(channelName,callback) {
		var _this = this.map;
		if(!(__map_reserved[channelName] != null ? _this.existsReserved(channelName) : _this.h.hasOwnProperty(channelName))) {
			return;
		}
		var _this1 = this.map;
		var channel = __map_reserved[channelName] != null ? _this1.getReserved(channelName) : _this1.h[channelName];
		HxOverrides.remove(channel,callback);
	}
	,unregisterAll: function(channelNames,callback) {
		var _g = 0;
		while(_g < channelNames.length) {
			var channelName = channelNames[_g];
			++_g;
			this.unregister(channelName,callback);
		}
	}
	,trigger: function(channelName,data) {
		var _this = this.map;
		var channel = __map_reserved[channelName] != null ? _this.getReserved(channelName) : _this.h[channelName];
		if(channel != null) {
			var _g = 0;
			while(_g < channel.length) {
				var channelItem = channel[_g];
				++_g;
				channelItem(data);
			}
		}
	}
	,triggerAll: function(channelNames,data) {
		var _g = 0;
		while(_g < channelNames.length) {
			var channelName = channelNames[_g];
			++_g;
			this.trigger(channelName,data);
		}
	}
	,__class__: glaze_util_MessageBus
};
var glaze_util_IPool = function() { };
glaze_util_IPool.__name__ = ["glaze","util","IPool"];
glaze_util_IPool.prototype = {
	__class__: glaze_util_IPool
};
var glaze_util_Pool = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
glaze_util_Pool.__name__ = ["glaze","util","Pool"];
glaze_util_Pool.__interfaces__ = [glaze_util_IPool];
glaze_util_Pool.prototype = {
	get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: glaze_util_Pool
	,__properties__: {get_length:"get_length"}
};
var glaze_util_IPooled = function() { };
glaze_util_IPooled.__name__ = ["glaze","util","IPooled"];
glaze_util_IPooled.__interfaces__ = [glaze_util_IDestroyable];
glaze_util_IPooled.prototype = {
	__class__: glaze_util_IPooled
};
var glaze_util_Random = function() { };
glaze_util_Random.__name__ = ["glaze","util","Random"];
glaze_util_Random.SetPseudoRandomSeed = function(seed) {
	glaze_util_Random.PseudoRandomSeed = seed;
};
glaze_util_Random.RandomFloat = function(min,max) {
	return Math.random() * (max - min) + min;
};
glaze_util_Random.RandomBoolean = function(chance) {
	if(chance == null) {
		chance = 0.5;
	}
	return Math.random() < chance;
};
glaze_util_Random.RandomSign = function(chance) {
	if(chance == null) {
		chance = 0.5;
	}
	if(Math.random() < chance) {
		return 1;
	} else {
		return -1;
	}
};
glaze_util_Random.RandomInteger = function(min,max) {
	return Math.floor(Math.random() * (max - min) + min);
};
glaze_util_Random.PseudoFloat = function() {
	glaze_util_Random.PseudoRandomSeed = (glaze_util_Random.PseudoRandomSeed * 9301 + 49297) % 233280;
	return glaze_util_Random.PseudoRandomSeed / 233280.0;
};
var glaze_util_StateChangeProxy = function() {
	this.map = new haxe_ds_StringMap();
};
glaze_util_StateChangeProxy.__name__ = ["glaze","util","StateChangeProxy"];
glaze_util_StateChangeProxy.prototype = {
	registerState: function(state) {
		state.onChanged.add($bind(this,this.onStateChange));
	}
	,onStateChange: function(state) {
		var _this = this.map;
		var key = state.getState();
		var f = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(f != null) {
			f(state);
		}
	}
	,unregisterState: function(state) {
		state.onChanged.remove($bind(this,this.onStateChange));
	}
	,registerStateHandler: function(stateName,f) {
		var _this = this.map;
		if(__map_reserved[stateName] != null) {
			_this.setReserved(stateName,f);
		} else {
			_this.h[stateName] = f;
		}
	}
	,unregisterStateHandler: function(stateName) {
		this.map.remove(stateName);
	}
	,__class__: glaze_util_StateChangeProxy
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_Either = { __ename__ : true, __constructs__ : ["Left","Right"] };
haxe_ds_Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = haxe_ds_Either; $x.toString = $estr; return $x; };
haxe_ds_Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = haxe_ds_Either; $x.toString = $estr; return $x; };
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) {
				xname = "Document";
			} else {
				var _this = this.__x;
				if(_this.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
				}
				xname = _this.nodeName;
			}
			throw new js__$Boot_HaxeError(xname + " is missing element " + name);
		}
		return new haxe_xml_Fast(x);
	}
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		var v = this.__x.get(name);
		if(v == null) {
			var _this = this.__x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			throw new js__$Boot_HaxeError(_this.nodeName + " is missing attribute " + name);
		}
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	resolve: function(name) {
		var l = new List();
		var x = this.__x.elementsNamed(name);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(new haxe_xml_Fast(x1));
		}
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	}
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	get_name: function() {
		if(this.x.nodeType == Xml.Document) {
			return "Document";
		} else {
			var _this = this.x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			return _this.nodeName;
		}
	}
	,get_innerData: function() {
		var _this = this.x;
		if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this.nodeType);
		}
		var it = HxOverrides.iter(_this.children);
		if(!it.hasNext()) {
			throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		}
		var v = it.next();
		if(it.hasNext()) {
			var n = it.next();
			var tmp;
			if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
				if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
				}
				tmp = StringTools.trim(v.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp) {
				if(!it.hasNext()) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					}
					return n.nodeValue;
				}
				var n2 = it.next();
				var tmp1;
				var tmp2;
				if(n2.nodeType == Xml.PCData) {
					if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n2.nodeType);
					}
					tmp2 = StringTools.trim(n2.nodeValue) == "";
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = !it.hasNext();
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					}
					return n.nodeValue;
				}
			}
			throw new js__$Boot_HaxeError(this.get_name() + " does not only have data");
		}
		if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
			throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		}
		if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
		}
		return v.nodeValue;
	}
	,__class__: haxe_xml_Fast
	,__properties__: {get_innerData:"get_innerData",get_name:"get_name"}
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_zip_Huffman = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		if(len < 0 || len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = output.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			output.b.push(b2[i1]);
		}
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
haxe_zip_Uncompress.__name__ = ["haxe","zip","Uncompress"];
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var motion_actuators_IGenericActuator = function() { };
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			var method = this._onPause;
			var params = this._onPauseParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			var method = this._onResume;
			var params = this._onResumeParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = new Date().getTime() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		motion_actuators_SimpleActuator.timer = new haxe_Timer(33);
		motion_actuators_SimpleActuator.timer.run = motion_actuators_SimpleActuator.stage_onEnterFrame;
	}
};
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function() {
	var currentTime = new Date().getTime() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value1 = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible")) {
					target["visible"] = value1;
				} else {
					Reflect.setProperty(target,"visible",value1);
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			value = Reflect.getProperty(target,propertyName);
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					value = Reflect.getProperty(target,i);
				}
				var value1 = value;
				if(start == null) {
					start = 0;
				}
				if(value1 == null) {
					value1 = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value1 - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && Object.prototype.hasOwnProperty.call(this.properties,"visible");
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target1 = this.target;
			var value1 = null;
			if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
				value1 = Reflect.field(target1,"visible");
			} else {
				value1 = Reflect.getProperty(target1,"visible");
			}
			this.cacheVisible = value1;
			var target2 = this.target;
			if(Object.prototype.hasOwnProperty.call(target2,"visible")) {
				target2["visible"] = true;
			} else {
				Reflect.setProperty(target2,"visible",true);
			}
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = new Date().getTime() / 1000;
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += new Date().getTime() / 1000 - this.pauseTime;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			details.target[details.propertyName] = value;
		} else {
			Reflect.setProperty(details.target,details.propertyName,value);
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					var value = details.start + details.change * easing;
					if(details.isField) {
						details.target[details.propertyName] = value;
					} else {
						Reflect.setProperty(details.target,details.propertyName,value);
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						if(details.isField) {
							details.target[details.propertyName] = endValue;
						} else {
							Reflect.setProperty(details.target,details.propertyName,endValue);
						}
					} else {
						var value1 = Math.round(endValue);
						if(details.isField) {
							details.target[details.propertyName] = value1;
						} else {
							Reflect.setProperty(details.target,details.propertyName,value1);
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value2 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value2 = Reflect.field(target,"alpha");
						} else {
							value2 = Reflect.getProperty(target,"alpha");
						}
						tmp = value2 == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = false;
						} else {
							Reflect.setProperty(target1,"visible",false);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"};
motion_easing_Expo.get_easeIn = function() {
	return new motion_easing_ExpoEaseIn();
};
motion_easing_Expo.get_easeInOut = function() {
	return new motion_easing_ExpoEaseInOut();
};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.pow(2,-10 * k);
		}
	}
	,ease: function(t,b,c,d) {
		if(t == d) {
			return b + c;
		} else {
			return c * (1 - Math.pow(2,-10 * t / d)) + b;
		}
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var _g = 0;
		while(_g < library1.length) {
			var actuator = library1[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var i = library1.length - 1;
		while(i >= 0) {
			library1[i].stop(null,false,false);
			--i;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var _g = 0;
		while(_g < library1.length) {
			var actuator = library1[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp1[property] = null;
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion_BezierPath(x,controlX,strength));
		this._y.addPath(new motion_BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) {
			this._rotation = new motion_RotationPath(this._x,this._y);
		}
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) {
			return this.paths[0].calculate(this.start,k);
		} else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else {
					return path.calculate(lastEnd,ratio / path.strength);
				}
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else {
			return this.start;
		}
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
			} else {
				Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.start = Reflect.field(this.target,propertyName);
				} else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) {
						details1.target[details1.propertyName] = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) {
							details2.target[details2.propertyName] = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						}
					} else if(details2.isField) {
						details2.target[details2.propertyName] = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value = Reflect.field(target,"alpha");
						} else {
							value = Reflect.getProperty(target,"alpha");
						}
						tmp = value == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = false;
						} else {
							Reflect.setProperty(target1,"visible",false);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var motion_easing_ExpoEaseIn = function() {
};
motion_easing_ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		} else {
			return Math.pow(2,10 * (k - 1));
		}
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		} else {
			return c * Math.pow(2,10 * (t / d - 1)) + b;
		}
	}
	,__class__: motion_easing_ExpoEaseIn
};
var motion_easing_ExpoEaseInOut = function() {
};
motion_easing_ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		}
		if(k == 1) {
			return 1;
		}
		if((k /= 0.5) < 1.0) {
			return 0.5 * Math.pow(2,10 * (k - 1));
		}
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		}
		if(t == d) {
			return b + c;
		}
		if((t /= d / 2.0) < 1.0) {
			return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		}
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion_easing_ExpoEaseInOut
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = ["tink","core","Annex"];
tink_core_Annex.prototype = {
	__class__: tink_core_Annex
};
var tink_core__$Any_Any_$Impl_$ = {};
tink_core__$Any_Any_$Impl_$.__name__ = ["tink","core","_Any","Any_Impl_"];
tink_core__$Any_Any_$Impl_$.__promote = function(this1) {
	return this1;
};
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = ["tink","core","_Callback","Callback_Impl_"];
tink_core__$Callback_Callback_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.toFunction = function(this1) {
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	this1(data);
};
tink_core__$Callback_Callback_$Impl_$.ignore = function(cb) {
	return tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		cb(tink_core_Noise.Noise);
	});
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	var this1 = function(r) {
		f();
	};
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			callback(v);
		}
	};
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core__$Callback_LinkObject = function() { };
tink_core__$Callback_LinkObject.__name__ = ["tink","core","_Callback","LinkObject"];
tink_core__$Callback_LinkObject.prototype = {
	__class__: tink_core__$Callback_LinkObject
};
var tink_core__$Callback_CallbackLink_$Impl_$ = {};
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = ["tink","core","_Callback","CallbackLink_Impl_"];
tink_core__$Callback_CallbackLink_$Impl_$._new = function(link) {
	var this1 = new tink_core__$Callback_SimpleLink(link);
	return this1;
};
tink_core__$Callback_CallbackLink_$Impl_$.dissolve = function(this1) {
	if(this1 != null) {
		this1.dissolve();
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.toCallback = function(this1) {
	return function(_) {
		this1.dissolve();
	};
};
tink_core__$Callback_CallbackLink_$Impl_$.fromFunction = function(f) {
	var this1 = new tink_core__$Callback_SimpleLink(f);
	return this1;
};
tink_core__$Callback_CallbackLink_$Impl_$.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core__$Callback_CallbackLink_$Impl_$.fromMany = function(callbacks) {
	var this1 = new tink_core__$Callback_SimpleLink(function() {
		var _g = 0;
		while(_g < callbacks.length) {
			var cb = callbacks[_g];
			++_g;
			if(cb != null) {
				cb.dissolve();
			}
		}
	});
	return this1;
};
var tink_core__$Callback_SimpleLink = function(f) {
	this.f = f;
};
tink_core__$Callback_SimpleLink.__name__ = ["tink","core","_Callback","SimpleLink"];
tink_core__$Callback_SimpleLink.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_SimpleLink.prototype = {
	dissolve: function() {
		if(this.f != null) {
			this.f();
		}
	}
	,__class__: tink_core__$Callback_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = ["tink","core","_Callback","LinkPair"];
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	dissolve: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.dissolve();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.dissolve();
			}
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = ["tink","core","_Callback","ListCell"];
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	invoke: function(data) {
		if(this.cb != null) {
			this.cb(data);
		}
	}
	,clear: function() {
		this.list = null;
		this.cb = null;
	}
	,dissolve: function() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = ["tink","core","_Callback","CallbackList_Impl_"];
tink_core__$Callback_CallbackList_$Impl_$.__properties__ = {get_length:"get_length"};
tink_core__$Callback_CallbackList_$Impl_$._new = function() {
	var this1 = [];
	return this1;
};
tink_core__$Callback_CallbackList_$Impl_$.get_length = function(this1) {
	return this1.length;
};
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			cell.cb(data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		cell.clear();
	}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = ["tink","core","TypedError"];
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( $e0 ) {
		if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
		if( js_Boot.__instanceof($e0,tink_core_TypedError) ) {
			var e = $e0;
			return tink_core_Outcome.Failure(e);
		} else {
		var e1 = $e0;
		return tink_core_Outcome.Failure(report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1));
		}
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw js__$Boot_HaxeError.wrap(any);
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		throw new js__$Boot_HaxeError(this);
	}
	,__class__: tink_core_TypedError
};
var tink_core__$Error_Stack_$Impl_$ = {};
tink_core__$Error_Stack_$Impl_$.__name__ = ["tink","core","_Error","Stack_Impl_"];
tink_core__$Error_Stack_$Impl_$.toString = function(this1) {
	return haxe_CallStack.toString(this1);
};
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = ["tink","core","_Future","FutureObject"];
tink_core__$Future_FutureObject.prototype = {
	__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = ["tink","core","_Future","NeverFuture"];
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core_Noise = { __ename__ : true, __constructs__ : ["Noise"] };
tink_core_Noise.Noise = ["Noise",0];
tink_core_Noise.Noise.toString = $estr;
tink_core_Noise.Noise.__enum__ = tink_core_Noise;
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = ["tink","core","_Lazy","LazyObject"];
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = ["tink","core","_Lazy","LazyConst"];
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		return new tink_core__$Lazy_LazyConst(f(this.value));
	}
	,flatMap: function(f) {
		return f(this.value);
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = ["tink","core","_Future","SyncFuture"];
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	,handle: function(cb) {
		cb(this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core__$Future_Future_$Impl_$ = {};
tink_core__$Future_Future_$Impl_$.__name__ = ["tink","core","_Future","Future_Impl_"];
tink_core__$Future_Future_$Impl_$._new = function(f) {
	var this1 = new tink_core__$Future_SimpleFuture(f);
	return this1;
};
tink_core__$Future_Future_$Impl_$.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this2 = l1;
		ret1.handle(function(_) {
			this2.dissolve();
		});
	}
	if(l2 != null) {
		var this3 = l2;
		ret1.handle(function(_1) {
			this3.dissolve();
		});
	}
	return ret1;
};
tink_core__$Future_Future_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core__$Future_Future_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(t) {
		var ret1 = other.map(function(a) {
			return merger(t,a);
		});
		return ret1;
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_NestedFuture(f);
};
tink_core__$Future_Future_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		})["catch"](function(e) {
			var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "Future.hx", lineNumber : 77, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
			cb(tmp);
		});
	});
};
tink_core__$Future_Future_$Impl_$.asPromise = function(s) {
	return s;
};
tink_core__$Future_Future_$Impl_$.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var ret1 = ret.flatMap((function(f1) {
			return function(results) {
				var ret2 = (function() {
					return function(result) {
						return results.concat([result]);
					};
				})();
				var ret3 = f1[0].map(ret2);
				return ret3;
			};
		})(f));
		ret = ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.fromMany = function(futures) {
	return tink_core__$Future_Future_$Impl_$.ofMany(futures);
};
tink_core__$Future_Future_$Impl_$.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core__$Future_Future_$Impl_$.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		var f1 = f;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return tink_core__$Future_Future_$Impl_$.async(f1,false);
		})));
	} else {
		var op = new tink_core_FutureTrigger();
		f($bind(op,op.trigger));
		return op;
	}
};
tink_core__$Future_Future_$Impl_$.or = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.first(a,b);
};
tink_core__$Future_Future_$Impl_$.either = function(a,b) {
	var ret = a.map(haxe_ds_Either.Left);
	var ret1 = b.map(haxe_ds_Either.Right);
	return tink_core__$Future_Future_$Impl_$.first(ret,ret1);
};
tink_core__$Future_Future_$Impl_$.and = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.merge(a,b,function(a1,b1) {
		var this1 = new tink_core_MPair(a1,b1);
		return this1;
	});
};
tink_core__$Future_Future_$Impl_$._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return map(d);
		case 1:
			var f1 = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			var ret1 = map(d).map(tink_core_Outcome.Success);
			return ret1.gather();
		case 1:
			var f1 = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(map));
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$.trigger = function() {
	return new tink_core_FutureTrigger();
};
var tink_core__$Future_Futuristic_$Impl_$ = {};
tink_core__$Future_Futuristic_$Impl_$.__name__ = ["tink","core","_Future","Futuristic_Impl_"];
tink_core__$Future_Futuristic_$Impl_$.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
tink_core__$Future_SimpleFuture.__name__ = ["tink","core","_Future","SimpleFuture"];
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var data = f(v);
				cb(data);
			});
		});
	}
	,flatMap: function(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var data = f1(v);
				cb(data);
			});
		}));
	}
	,gather: function() {
		return tink_core_FutureTrigger.gatherFuture(this);
	}
	,eager: function() {
		var ret = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,__class__: tink_core__$Future_SimpleFuture
};
var tink_core__$Future_NestedFuture = function(outer) {
	this.outer = outer;
};
tink_core__$Future_NestedFuture.__name__ = ["tink","core","_Future","NestedFuture"];
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NestedFuture.prototype = {
	map: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.map(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.flatMap(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,gather: function() {
		return tink_core_FutureTrigger.gatherFuture(this);
	}
	,eager: function() {
		var ret = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,handle: function(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				cb(result);
			});
		});
		return ret;
	}
	,__class__: tink_core__$Future_NestedFuture
};
var tink_core_FutureTrigger = function() {
	var this1 = [];
	this.list = this1;
};
tink_core_FutureTrigger.__name__ = ["tink","core","FutureTrigger"];
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	var op = null;
	var this1 = new tink_core__$Future_SimpleFuture(function(cb) {
		if(op == null) {
			op = new tink_core_FutureTrigger();
			f.handle($bind(op,op.trigger));
			f = null;
		}
		return op.handle(cb);
	});
	return this1;
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			callback(this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				var tmp = f(v1);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			if(tink_core_FutureTrigger.depth >= 1000) {
				tink_core__$Callback_Callback_$Impl_$.defer(function() {
					tink_core_FutureTrigger.depth++;
					tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
					tink_core__$Callback_CallbackList_$Impl_$.clear(list);
					tink_core_FutureTrigger.depth--;
				});
			} else {
				tink_core_FutureTrigger.depth++;
				tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
				tink_core__$Callback_CallbackList_$Impl_$.clear(list);
				tink_core_FutureTrigger.depth--;
			}
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = ["tink","core","JsPromiseTools"];
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
var tink_core__$Lazy_Lazy_$Impl_$ = {};
tink_core__$Lazy_Lazy_$Impl_$.__name__ = ["tink","core","_Lazy","Lazy_Impl_"];
tink_core__$Lazy_Lazy_$Impl_$.get = function(this1) {
	return this1.get();
};
tink_core__$Lazy_Lazy_$Impl_$.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core__$Lazy_Lazy_$Impl_$.map = function(this1,f) {
	return this1.map(f);
};
tink_core__$Lazy_Lazy_$Impl_$.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core__$Lazy_Lazy_$Impl_$.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = ["tink","core","_Lazy","LazyFunc"];
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = ["tink","core","NamedWith"];
tink_core_NamedWith.prototype = {
	__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = ["tink","core","OptionTools"];
tink_core_OptionTools.force = function(o,pos) {
	if(o[1] == 0) {
		var v = o[2];
		return v;
	} else {
		throw new js__$Boot_HaxeError(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o[1] == 0) {
		var v = o[2];
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o[1] == 0) {
		var v = o[2];
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o[1] == 0) {
		var _hx_tmp = f(o[2]);
		if(_hx_tmp == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o[1] == 0) {
		var v = o[2];
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o[1] == 0) {
		var v1 = o[2];
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o[1] == 0) {
		var v = o[2];
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o[1] == 0) {
		var v = o[2];
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o[1] == 0) {
		var v = o[2];
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o[1] == 0) {
		var v = o[2];
		this.value = v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = ["tink","core","OptionIter"];
tink_core_OptionIter.prototype = {
	hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = { __ename__ : true, __constructs__ : ["Success","Failure"] };
tink_core_Outcome.Success = function(data) { var $x = ["Success",0,data]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
tink_core_Outcome.Failure = function(failure) { var $x = ["Failure",1,failure]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = ["tink","core","OutcomeTools"];
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		var failure = outcome[2];
		if(js_Boot.__instanceof(failure,tink_core_TypedError)) {
			return failure.throwSelf();
		} else {
			throw new js__$Boot_HaxeError(failure);
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return haxe_ds_Option.Some(data);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option[1]) {
	case 0:
		var value = option[2];
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "Outcome.hx", lineNumber : 47, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome[1]) {
	case 0:
		return outcome;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome[1]) {
	case 0:
		var a = outcome[2];
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome[2];
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome[1] == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome[1]) {
	case 0:
		var a = outcome[2];
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome[2];
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o[1]) {
	case 0:
		switch(o[2][1]) {
		case 0:
			var d = o[2][2];
			return tink_core_Outcome.Success(d);
		case 1:
			var f = o[2][2];
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f1 = o[2];
		return tink_core_Outcome.Failure(f1);
	}
};
var tink_core__$Outcome_OutcomeMapper_$Impl_$ = {};
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = ["tink","core","_Outcome","OutcomeMapper_Impl_"];
tink_core__$Outcome_OutcomeMapper_$Impl_$._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return f(d);
		case 1:
			var f1 = o[2];
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			var _g = f(d);
			switch(_g[1]) {
			case 0:
				var d1 = _g[2];
				return tink_core_Outcome.Success(d1);
			case 1:
				var f1 = _g[2];
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f2 = o[2];
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
		}
	});
};
var tink_core__$Pair_Pair_$Impl_$ = {};
tink_core__$Pair_Pair_$Impl_$.__name__ = ["tink","core","_Pair","Pair_Impl_"];
tink_core__$Pair_Pair_$Impl_$.__properties__ = {get_b:"get_b",get_a:"get_a"};
tink_core__$Pair_Pair_$Impl_$._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core__$Pair_Pair_$Impl_$.get_a = function(this1) {
	return this1.a;
};
tink_core__$Pair_Pair_$Impl_$.get_b = function(this1) {
	return this1.b;
};
tink_core__$Pair_Pair_$Impl_$.toBool = function(this1) {
	return this1 != null;
};
tink_core__$Pair_Pair_$Impl_$.isNil = function(this1) {
	return this1 == null;
};
tink_core__$Pair_Pair_$Impl_$.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = ["tink","core","MPair"];
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = ["tink","core","_Promise","Promise_Impl_"];
tink_core__$Promise_Promise_$Impl_$.eager = function(this1) {
	return this1.eager();
};
tink_core__$Promise_Promise_$Impl_$.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o[2];
			return f(e);
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o[2];
			return f(e);
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o[1]) {
		case 0:
			return o;
		case 1:
			var e = o[2];
			return tink_core_Outcome.Failure(f(e));
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core__$Promise_Promise_$Impl_$.noise = function(this1) {
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(v) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(tink_core_Noise.Noise));
	});
};
tink_core__$Promise_Promise_$Impl_$.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return f(d);
		case 1:
			var f1 = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Promise_Promise_$Impl_$.swap = function(this1,v) {
	return tink_core__$Future_Future_$Impl_$._tryMap(this1,function(_) {
		return v;
	});
};
tink_core__$Promise_Promise_$Impl_$.swapError = function(this1,e) {
	return tink_core__$Promise_Promise_$Impl_$.mapError(this1,function(_) {
		return e;
	});
};
tink_core__$Promise_Promise_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(t) {
		return tink_core__$Promise_Promise_$Impl_$.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core__$Promise_Promise_$Impl_$.and = function(a,b) {
	return tink_core__$Promise_Promise_$Impl_$.merge(a,b,function(a1,b1) {
		var this1 = new tink_core_MPair(a1,b1);
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(this1));
	});
};
tink_core__$Promise_Promise_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core__$Promise_Promise_$Impl_$.ofSpecific = function(s) {
	return s;
};
tink_core__$Promise_Promise_$Impl_$.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core__$Promise_Promise_$Impl_$.ofError = function(e) {
	return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Failure(e));
};
tink_core__$Promise_Promise_$Impl_$.ofData = function(d) {
	return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(d));
};
tink_core__$Promise_Promise_$Impl_$.lazy = function(p) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core__$Promise_Promise_$Impl_$.inParallel = function(a,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var sync = false;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.dissolve();
				}
				cb(o);
			};
			var fail = function(e) {
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				}
			};
			var linkArray = [];
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = [_g1++];
				if(sync) {
					break;
				}
				var i1 = i[0];
				var tmp = (function(i2) {
					return function(o1) {
						switch(o1[1]) {
						case 0:
							var v = o1[2];
							set(i2[0],v);
							break;
						case 1:
							var e1 = o1[2];
							fail(e1);
							break;
						}
					};
				})(i);
				linkArray.push(a[i1].handle(tmp));
			}
			links = tink_core__$Callback_CallbackLink_$Impl_$.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.dissolve();
				}
			}
		},lazy);
	}
};
tink_core__$Promise_Promise_$Impl_$.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success([]));
		} else {
			return tink_core__$Promise_Promise_$Impl_$.next(a[index],function(head) {
				return tink_core__$Promise_Promise_$Impl_$.next(loop(index + 1),function(tail) {
					return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success([head].concat(tail)));
				});
			});
		}
	};
	var loop1 = loop;
	return loop1(0);
};
tink_core__$Promise_Promise_$Impl_$.lift = function(p) {
	return p;
};
var tink_core__$Promise_Next_$Impl_$ = {};
tink_core__$Promise_Next_$Impl_$.__name__ = ["tink","core","_Promise","Next_Impl_"];
tink_core__$Promise_Next_$Impl_$.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core__$Promise_Next_$Impl_$.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core__$Promise_Next_$Impl_$.ofSafeSync = function(f) {
	return function(x) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(f(x)));
	};
};
tink_core__$Promise_Next_$Impl_$._chain = function(a,b) {
	return function(v) {
		return tink_core__$Promise_Promise_$Impl_$.next(a(v),b);
	};
};
var tink_core__$Promise_Recover_$Impl_$ = {};
tink_core__$Promise_Recover_$Impl_$.__name__ = ["tink","core","_Promise","Recover_Impl_"];
tink_core__$Promise_Recover_$Impl_$.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core__$Promise_Combiner_$Impl_$ = {};
tink_core__$Promise_Combiner_$Impl_$.__name__ = ["tink","core","_Promise","Combiner_Impl_"];
tink_core__$Promise_Combiner_$Impl_$.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSafeSync = function(f) {
	return function(x1,x2) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(f(x1,x2)));
	};
};
var tink_core__$Ref_Ref_$Impl_$ = {};
tink_core__$Ref_Ref_$Impl_$.__name__ = ["tink","core","_Ref","Ref_Impl_"];
tink_core__$Ref_Ref_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value"};
tink_core__$Ref_Ref_$Impl_$._new = function() {
	var this1;
	var this2 = new Array(1);
	this1 = this2;
	return this1;
};
tink_core__$Ref_Ref_$Impl_$.get_value = function(this1) {
	return this1[0];
};
tink_core__$Ref_Ref_$Impl_$.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core__$Ref_Ref_$Impl_$.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core__$Ref_Ref_$Impl_$.to = function(v) {
	var this1;
	var this2 = new Array(1);
	this1 = this2;
	var ret = this1;
	ret[0] = v;
	return ret;
};
var tink_core__$Signal_Signal_$Impl_$ = {};
tink_core__$Signal_Signal_$Impl_$.__name__ = ["tink","core","_Signal","Signal_Impl_"];
tink_core__$Signal_Signal_$Impl_$._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core__$Signal_Signal_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			var data = f(result);
			cb(data);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			if(f(result)) {
				cb(result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.handle(cb),other.handle(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.next = function(this1) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.handle(function(v) {
		ret.trigger(v);
		if(link == null) {
			immediate = true;
		} else if(link != null) {
			link.dissolve();
		}
	});
	if(immediate) {
		if(link != null) {
			link.dissolve();
		}
	}
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.noise = function(this1) {
	return tink_core__$Signal_Signal_$Impl_$.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core__$Signal_Signal_$Impl_$.gather = function(this1) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	this1.handle(function(x) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(ret.handlers,x);
	});
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core__$Signal_Signal_$Impl_$.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			cb(a);
		};
		add(f);
		var this2;
		var f1 = remove;
		var a1 = f;
		this2 = new tink_core__$Callback_SimpleLink(function() {
			f1(a1);
		});
		return this2;
	});
	var ret = this1;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = ["tink","core","SignalObject"];
tink_core_SignalObject.prototype = {
	__class__: tink_core_SignalObject
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = ["tink","core","_Signal","SimpleSignal"];
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	handle: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core_SignalTrigger = function() {
	var this1 = [];
	this.handlers = this1;
};
tink_core_SignalTrigger.__name__ = ["tink","core","SignalTrigger"];
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(this.handlers,event);
	}
	,getLength: function() {
		return this.handlers.length;
	}
	,handle: function(cb) {
		return tink_core__$Callback_CallbackList_$Impl_$.add(this.handlers,cb);
	}
	,clear: function() {
		tink_core__$Callback_CallbackList_$Impl_$.clear(this.handlers);
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_state__$Measurement_Measurement_$Impl_$ = {};
tink_state__$Measurement_Measurement_$Impl_$.__name__ = ["tink","state","_Measurement","Measurement_Impl_"];
tink_state__$Measurement_Measurement_$Impl_$.__properties__ = {get_becameInvalid:"get_becameInvalid",get_value:"get_value"};
tink_state__$Measurement_Measurement_$Impl_$.get_value = function(this1) {
	return this1.a;
};
tink_state__$Measurement_Measurement_$Impl_$.get_becameInvalid = function(this1) {
	return this1.b;
};
tink_state__$Measurement_Measurement_$Impl_$._new = function(value,becameInvalid) {
	var this1;
	var this2 = new tink_core_MPair(value,becameInvalid);
	this1 = this2;
	return this1;
};
var tink_state__$Observable_Observable_$Impl_$ = {};
tink_state__$Observable_Observable_$Impl_$.__name__ = ["tink","state","_Observable","Observable_Impl_"];
tink_state__$Observable_Observable_$Impl_$.__properties__ = {get_value:"get_value"};
tink_state__$Observable_Observable_$Impl_$.get_value = function(this1) {
	return tink_state__$Observable_Observable_$Impl_$.measure(this1).a;
};
tink_state__$Observable_Observable_$Impl_$._new = function(get,changed) {
	var this1 = tink_state__$Observable_Observable_$Impl_$.create(function() {
		var this2;
		var this3 = new tink_core_MPair(get(),tink_core__$Signal_Signal_$Impl_$.next(changed));
		this2 = this3;
		return this2;
	},{ fileName : "Observable.hx", lineNumber : 17, className : "tink.state._Observable.Observable_Impl_", methodName : "_new"});
	return this1;
};
tink_state__$Observable_Observable_$Impl_$.combine = function(this1,that,f) {
	return new tink_state__$Observable_SimpleObservable(function() {
		var p = tink_state__$Observable_Observable_$Impl_$.measure(this1);
		var q = tink_state__$Observable_Observable_$Impl_$.measure(that);
		var this2;
		var this3 = new tink_core_MPair(f(p.a,q.a),tink_core__$Future_Future_$Impl_$.first(p.b,q.b));
		this2 = this3;
		return this2;
	},{ fileName : "Observable.hx", lineNumber : 20, className : "tink.state._Observable.Observable_Impl_", methodName : "combine"});
};
tink_state__$Observable_Observable_$Impl_$.nextTime = function(this1,options,check) {
	var ret = new tink_core_FutureTrigger();
	var waiting = options != null && options.butNotNow;
	var link = tink_state__$Observable_Observable_$Impl_$.bind(this1,{ direct : options != null && options.hires},function(value) {
		if(waiting) {
			waiting = check(value);
		} else if(check(value)) {
			ret.trigger(value);
		}
	});
	var _e = link;
	var tmp = function() {
		if(_e != null) {
			_e.dissolve();
		}
	};
	ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(tmp));
	return ret;
};
tink_state__$Observable_Observable_$Impl_$.join = function(this1,that) {
	var lastA = null;
	return tink_state__$Observable_Observable_$Impl_$.combine(this1,that,function(a,b) {
		var ret = lastA == a ? b : a;
		lastA = a;
		return ret;
	});
};
tink_state__$Observable_Observable_$Impl_$.map = function(this1,f) {
	return tink_state__$Observable_Observable_$Impl_$.create(function() {
		var m = tink_state__$Observable_Observable_$Impl_$.measure(this1);
		var this2;
		var this3 = new tink_core_MPair(f(m.a),m.b);
		this2 = this3;
		return this2;
	},{ fileName : "Observable.hx", lineNumber : 56, className : "tink.state._Observable.Observable_Impl_", methodName : "map"});
};
tink_state__$Observable_Observable_$Impl_$.combineAsync = function(this1,that,f) {
	return tink_state__$Observable_Observable_$Impl_$.mapAsync(tink_state__$Observable_Observable_$Impl_$.combine(this1,that,f),tink_state__$Observable_Transform_$Impl_$.plain(function(x) {
		return x;
	}));
};
tink_state__$Observable_Observable_$Impl_$.mapAsync = function(this1,f) {
	return tink_state__$Observable_Observable_$Impl_$.flatten(tink_state__$Observable_Observable_$Impl_$.map(tink_state__$Observable_Observable_$Impl_$.map(this1,f),tink_state__$Observable_Transform_$Impl_$.plain(tink_state__$Observable_Observable_$Impl_$.ofPromise)));
};
tink_state__$Observable_Observable_$Impl_$.measure = function(this1) {
	var before = tink_state__$Observable_Observable_$Impl_$.stack.first();
	tink_state__$Observable_Observable_$Impl_$.stack.push(this1);
	var p = this1.poll();
	var _g = (before instanceof tink_state__$Observable_AutoObservable) ? before : null;
	if(_g != null) {
		var v = _g;
		p.b.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(v,v.invalidate)));
	}
	tink_state__$Observable_Observable_$Impl_$.stack.pop();
	return p;
};
tink_state__$Observable_Observable_$Impl_$.switchSync = function(this1,cases,dfault) {
	return new tink_state__$Observable_SimpleObservable(function() {
		var p = tink_state__$Observable_Observable_$Impl_$.measure(this1);
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			if(c.when(p.a)) {
				dfault = c.then;
				break;
			}
		}
		var p2 = tink_state__$Observable_Observable_$Impl_$.measure(dfault.get());
		var this2;
		var this3 = new tink_core_MPair(p2.a,tink_core__$Future_Future_$Impl_$.first(p.b,p2.b));
		this2 = this3;
		return this2;
	},{ fileName : "Observable.hx", lineNumber : 83, className : "tink.state._Observable.Observable_Impl_", methodName : "switchSync"});
};
tink_state__$Observable_Observable_$Impl_$.bind = function(this1,options,cb) {
	if(options == null) {
		var scheduled = false;
		var active = true;
		var updated = null;
		var link = null;
		var update = function() {
			if(active) {
				var next = tink_state__$Observable_Observable_$Impl_$.measure(this1);
				cb(next.a);
				scheduled = false;
				link = next.b.handle(updated);
			}
		};
		var doSchedule = function() {
			if(scheduled) {
				return;
			}
			scheduled = true;
			tink_state__$Observable_Observable_$Impl_$.schedule(update);
		};
		updated = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule);
		doSchedule();
		var this2 = new tink_core__$Callback_SimpleLink(function() {
			if(active) {
				active = false;
				if(link != null) {
					link.dissolve();
				}
			}
		});
		return this2;
	} else if(options.direct == null) {
		var scheduled1 = false;
		var active1 = true;
		var updated1 = null;
		var link1 = null;
		var update1 = function() {
			if(active1) {
				var next1 = tink_state__$Observable_Observable_$Impl_$.measure(this1);
				cb(next1.a);
				scheduled1 = false;
				link1 = next1.b.handle(updated1);
			}
		};
		var doSchedule1 = function() {
			if(scheduled1) {
				return;
			}
			scheduled1 = true;
			tink_state__$Observable_Observable_$Impl_$.schedule(update1);
		};
		updated1 = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule1);
		doSchedule1();
		var this3 = new tink_core__$Callback_SimpleLink(function() {
			if(active1) {
				active1 = false;
				if(link1 != null) {
					link1.dissolve();
				}
			}
		});
		return this3;
	} else if(options.direct == false) {
		var scheduled2 = false;
		var active2 = true;
		var updated2 = null;
		var link2 = null;
		var update2 = function() {
			if(active2) {
				var next2 = tink_state__$Observable_Observable_$Impl_$.measure(this1);
				cb(next2.a);
				scheduled2 = false;
				link2 = next2.b.handle(updated2);
			}
		};
		var doSchedule2 = function() {
			if(scheduled2) {
				return;
			}
			scheduled2 = true;
			tink_state__$Observable_Observable_$Impl_$.schedule(update2);
		};
		updated2 = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule2);
		doSchedule2();
		var this4 = new tink_core__$Callback_SimpleLink(function() {
			if(active2) {
				active2 = false;
				if(link2 != null) {
					link2.dissolve();
				}
			}
		});
		return this4;
	} else {
		var link3 = null;
		var update3 = null;
		update3 = function(_) {
			var next3 = tink_state__$Observable_Observable_$Impl_$.measure(this1);
			cb(next3.a);
			link3 = next3.b.handle(update3);
		};
		var update4 = update3;
		update4(tink_core_Noise.Noise);
		var this5 = new tink_core__$Callback_SimpleLink(function() {
			if(link3 != null) {
				link3.dissolve();
			}
		});
		return this5;
	}
};
tink_state__$Observable_Observable_$Impl_$.schedule = function(f) {
	var _g = tink_state__$Observable_Observable_$Impl_$.scheduled;
	if(_g == null) {
		f();
	} else if(_g.length == 0) {
		tink_state__$Observable_Observable_$Impl_$.scheduled.push(f);
		if(tink_state__$Observable_Observable_$Impl_$.hasRAF) {
			window.requestAnimationFrame(function(_) {
				tink_state__$Observable_Observable_$Impl_$.updateAll();
			});
		} else {
			tink_core__$Callback_Callback_$Impl_$.defer(f);
		}
	} else {
		var v = _g;
		v.push(f);
	}
};
tink_state__$Observable_Observable_$Impl_$.updateAll = function() {
	if(tink_state__$Observable_Observable_$Impl_$.scheduled == null) {
		return;
	}
	var old = tink_state__$Observable_Observable_$Impl_$.scheduled;
	tink_state__$Observable_Observable_$Impl_$.scheduled = null;
	var _g = 0;
	while(_g < old.length) {
		var o = old[_g];
		++_g;
		o();
	}
	tink_state__$Observable_Observable_$Impl_$.scheduled = [];
};
tink_state__$Observable_Observable_$Impl_$.lift = function(o) {
	return o;
};
tink_state__$Observable_Observable_$Impl_$.deliver = function(o,initial) {
	return tink_state__$Observable_Observable_$Impl_$.map(o,tink_state__$Observable_Transform_$Impl_$.plain(function(p) {
		if(p[1] == 1) {
			var v = p[2];
			initial = v;
			return initial;
		} else {
			return initial;
		}
	}));
};
tink_state__$Observable_Observable_$Impl_$.flatten = function(o) {
	return tink_state__$Observable_Observable_$Impl_$.create(function() {
		var m = tink_state__$Observable_Observable_$Impl_$.measure(o);
		var m2 = tink_state__$Observable_Observable_$Impl_$.measure(m.a);
		var this1;
		var this2 = new tink_core_MPair(m2.a,tink_core__$Future_Future_$Impl_$.or(m.b,m2.b));
		this1 = this2;
		return this1;
	},{ fileName : "Observable.hx", lineNumber : 200, className : "tink.state._Observable.Observable_Impl_", methodName : "flatten"});
};
tink_state__$Observable_Observable_$Impl_$.ofPromise = function(p) {
	if(p == null) {
		throw new js__$Boot_HaxeError("Expected Promise but got null");
	}
	var value = tink_state_Promised.Loading;
	var _e = p;
	var f1 = function(f) {
		var ret = _e.map(f);
		return ret.gather();
	};
	var becameInvalid = new tink_core__$Lazy_LazyFunc(function() {
		return f1(function(_) {
			return tink_core_Noise.Noise;
		});
	});
	return tink_state__$Observable_Observable_$Impl_$.create(function() {
		if(p != null) {
			p.handle(function(o) {
				switch(o[1]) {
				case 0:
					var v = o[2];
					value = tink_state_Promised.Done(v);
					break;
				case 1:
					var e = o[2];
					value = tink_state_Promised.Failed(e);
					break;
				}
				becameInvalid = new tink_core__$Lazy_LazyConst(tink_state_ConstObservable.NEVER);
			});
		}
		var becameInvalid1 = becameInvalid.get();
		var this1;
		var this2 = new tink_core_MPair(value,becameInvalid1);
		this1 = this2;
		return this1;
	},{ fileName : "Observable.hx", lineNumber : 213, className : "tink.state._Observable.Observable_Impl_", methodName : "ofPromise"});
};
tink_state__$Observable_Observable_$Impl_$.create = function(f,pos) {
	return new tink_state__$Observable_SimpleObservable(f,pos);
};
tink_state__$Observable_Observable_$Impl_$.auto = function(f) {
	return new tink_state__$Observable_AutoObservable(f);
};
tink_state__$Observable_Observable_$Impl_$["const"] = function(value) {
	return new tink_state_ConstObservable(value);
};
var tink_state__$Observable_Computation_$Impl_$ = {};
tink_state__$Observable_Computation_$Impl_$.__name__ = ["tink","state","_Observable","Computation_Impl_"];
tink_state__$Observable_Computation_$Impl_$._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_state__$Observable_Computation_$Impl_$.perform = function(this1) {
	return this1.f();
};
tink_state__$Observable_Computation_$Impl_$.async = function(f) {
	var this1 = { f : f};
	var o = tink_state__$Observable_Observable_$Impl_$.map(tink_state__$Observable_Observable_$Impl_$.auto(this1),tink_state__$Observable_Transform_$Impl_$.plain(tink_state__$Observable_Observable_$Impl_$.ofPromise));
	return tink_state__$Observable_Computation_$Impl_$.plain(function() {
		return tink_state__$Observable_Observable_$Impl_$.get_value(tink_state__$Observable_Observable_$Impl_$.get_value(o));
	});
};
tink_state__$Observable_Computation_$Impl_$.plain = function(f) {
	var this1 = { f : f};
	return this1;
};
var tink_state_ObservableObject = function() { };
tink_state_ObservableObject.__name__ = ["tink","state","ObservableObject"];
tink_state_ObservableObject.prototype = {
	__class__: tink_state_ObservableObject
};
var tink_state__$Observable_SimpleObservable = function(f,pos) {
	this._poll = f;
	this.pos = pos;
};
tink_state__$Observable_SimpleObservable.__name__ = ["tink","state","_Observable","SimpleObservable"];
tink_state__$Observable_SimpleObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state__$Observable_SimpleObservable.prototype = {
	resetCache: function(_) {
		this.cache = null;
	}
	,poll: function() {
		var count = 0;
		var last = null;
		while(this.cache == null) {
			var cache = this.cache = this._poll();
			if(last == cache) {
				throw new js__$Boot_HaxeError("Polling loops on the same value");
			}
			last = cache;
			cache.b.handle($bind(this,this.resetCache));
			if(count++ >= 100) {
				throw new js__$Boot_HaxeError("Polling not concluded after 100 iterations");
			}
		}
		return this.cache;
	}
	,__class__: tink_state__$Observable_SimpleObservable
};
var tink_state__$Observable_Transform_$Impl_$ = {};
tink_state__$Observable_Transform_$Impl_$.__name__ = ["tink","state","_Observable","Transform_Impl_"];
tink_state__$Observable_Transform_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tink_state__$Observable_Transform_$Impl_$.apply = function(this1,value) {
	return this1(value);
};
tink_state__$Observable_Transform_$Impl_$.naiveAsync = function(f) {
	var this1 = function(p) {
		switch(p[1]) {
		case 0:
			var this2 = new tink_core__$Future_SimpleFuture(function(_) {
				return null;
			});
			return this2;
		case 1:
			var v = p[2];
			return f(v);
		case 2:
			var e = p[2];
			return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Failure(e));
		}
	};
	return this1;
};
tink_state__$Observable_Transform_$Impl_$.naive = function(f) {
	var this1 = function(p) {
		switch(p[1]) {
		case 0:
			return tink_state_Promised.Loading;
		case 1:
			var v = p[2];
			return tink_state_Promised.Done(f(v));
		case 2:
			var e = p[2];
			return tink_state_Promised.Failed(e);
		}
	};
	return this1;
};
tink_state__$Observable_Transform_$Impl_$.plain = function(f) {
	var this1 = f;
	return this1;
};
var tink_state_ConstObservable = function(value) {
	var this1;
	var this2 = new tink_core_MPair(value,tink_state_ConstObservable.NEVER);
	this1 = this2;
	this.m = this1;
};
tink_state_ConstObservable.__name__ = ["tink","state","ConstObservable"];
tink_state_ConstObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state_ConstObservable.prototype = {
	poll: function() {
		return this.m;
	}
	,__class__: tink_state_ConstObservable
};
var tink_state__$Observable_AutoObservable = function(comp) {
	var _gthis = this;
	tink_state__$Observable_SimpleObservable.call(this,function() {
		_gthis.trigger = new tink_core_FutureTrigger();
		var this1;
		var this2 = new tink_core_MPair(comp.f(),_gthis.trigger);
		this1 = this2;
		return this1;
	},{ fileName : "Observable.hx", lineNumber : 331, className : "tink.state._Observable.AutoObservable", methodName : "new"});
};
tink_state__$Observable_AutoObservable.__name__ = ["tink","state","_Observable","AutoObservable"];
tink_state__$Observable_AutoObservable.__super__ = tink_state__$Observable_SimpleObservable;
tink_state__$Observable_AutoObservable.prototype = $extend(tink_state__$Observable_SimpleObservable.prototype,{
	invalidate: function() {
		this.trigger.trigger(tink_core_Noise.Noise);
	}
	,__class__: tink_state__$Observable_AutoObservable
});
var tink_state_Promised = { __ename__ : true, __constructs__ : ["Loading","Done","Failed"] };
tink_state_Promised.Loading = ["Loading",0];
tink_state_Promised.Loading.toString = $estr;
tink_state_Promised.Loading.__enum__ = tink_state_Promised;
tink_state_Promised.Done = function(result) { var $x = ["Done",1,result]; $x.__enum__ = tink_state_Promised; $x.toString = $estr; return $x; };
tink_state_Promised.Failed = function(error) { var $x = ["Failed",2,error]; $x.__enum__ = tink_state_Promised; $x.toString = $estr; return $x; };
var tink_state__$State_State_$Impl_$ = {};
tink_state__$State_State_$Impl_$.__name__ = ["tink","state","_State","State_Impl_"];
tink_state__$State_State_$Impl_$.__properties__ = {get_value:"get_value"};
tink_state__$State_State_$Impl_$.get_value = function(this1) {
	return tink_state__$Observable_Observable_$Impl_$.get_value(tink_state__$State_State_$Impl_$.observe(this1));
};
tink_state__$State_State_$Impl_$._new = function(value) {
	var this1 = new tink_state__$State_StateObject(value);
	return this1;
};
tink_state__$State_State_$Impl_$.observe = function(this1) {
	return this1;
};
tink_state__$State_State_$Impl_$.toggle = function(s) {
	s.set(!s.value);
};
tink_state__$State_State_$Impl_$.toCallback = function(this1) {
	return $bind(this1,this1.set);
};
tink_state__$State_State_$Impl_$.ofConstant = function(value) {
	var this1 = new tink_state__$State_StateObject(value);
	return this1;
};
var tink_state__$State_StateObject = function(value) {
	this.value = value;
	this.arm();
};
tink_state__$State_StateObject.__name__ = ["tink","state","_State","StateObject"];
tink_state__$State_StateObject.__interfaces__ = [tink_state_ObservableObject];
tink_state__$State_StateObject.prototype = {
	poll: function() {
		return this.next;
	}
	,get_value: function() {
		return this.value;
	}
	,arm: function() {
		this.trigger = new tink_core_FutureTrigger();
		var this1;
		var this2 = new tink_core_MPair(this.value,this.trigger);
		this1 = this2;
		this.next = this1;
	}
	,set: function(value) {
		if(value != this.value) {
			this.value = value;
			var last = this.trigger;
			this.arm();
			last.trigger(tink_core_Noise.Noise);
		}
	}
	,__class__: tink_state__$State_StateObject
	,__properties__: {get_value:"get_value"}
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
GameTestA.MAP_DATA = "data/16map.tmx";
GameTestA.TEXTURE_CONFIG = "data/sprites.json";
GameTestA.TEXTURE_DATA = "data/sprites.png";
GameTestA.FRAMES_CONFIG = "data/frames.json";
GameTestA.PARTICLE_TEXTURE_CONFIG = "data/particles.json";
GameTestA.PARTICLE_TEXTURE_DATA = "data/particles.png";
GameTestA.PARTICLE_FRAMES_CONFIG = "data/particleFrames.json";
GameTestA.TILE_FRAMES_CONFIG = "data/tileFrames.json";
GameTestA.TILE_SPRITE_SHEET = "data/superSet.png";
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
cdb__$Data_TileMode_$Impl_$.Tile = "tile";
cdb__$Data_TileMode_$Impl_$.Ground = "ground";
cdb__$Data_TileMode_$Impl_$.Border = "border";
cdb__$Data_TileMode_$Impl_$.Object = "object";
cdb__$Data_TileMode_$Impl_$.Group = "group";
dat__$Data_Entities_$factory_$Impl_$.door = 0;
dat__$Data_Entities_$factory_$Impl_$["switch"] = 1;
dat__$Data_Entities_$factory_$Impl_$.COUNT = 2;
dat__$Data_Entities_$factory_$Impl_$.NAMES = ["door","switch"];
dat__$Data_EntitiesKind_$Impl_$.HallDoor = "HallDoor";
dat__$Data_EntitiesKind_$Impl_$.HallDoorSwitch = "HallDoorSwitch";
dat__$Data_StatesKind_$Impl_$.DoorAState = "DoorAState";
dat__$Data_StatesKind_$Impl_$.GlobalAState = "GlobalAState";
dat__$Data_Switches_$trigger_$Impl_$.collision = 0;
dat__$Data_Switches_$trigger_$Impl_$.COUNT = 1;
dat__$Data_Switches_$trigger_$Impl_$.NAMES = ["collision"];
exile_ExileFilters.PLAYER_CAT = 4;
exile_ExileFilters.PROJECTILE_CAT = 8;
exile_ExileFilters.PROJECTILE_COLLIDABLE_CAT = 16;
exile_ExileFilters.SOLID_CAT = 32;
exile_ExileFilters.HOLDABLE_CAT = 64;
exile_ExileFilters.ph1_CAT = 128;
exile_ExileFilters.ph2_CAT = 256;
exile_ExileFilters.ph3_CAT = 512;
exile_ExileFilters.ph4_CAT = 1024;
exile_ExileFilters.ph5_CAT = 2048;
exile_ExileFilters.PLAYER_GROUP = -1;
exile_ExileFilters.ENEMY_GROUP = -2;
exile_ExileFilters.TURRET_GROUP = -3;
exile_ExileFilters.BIRD_GROUP = -3;
exile_ExileFilters.SOLID_OBJECT_GROUP = 1;
exile_components_Bee.NAME = "Bee";
exile_components_Bee.ID = 33;
exile_components_BeeHive.NAME = "BeeHive";
exile_components_BeeHive.ID = 34;
exile_components_Bird.NAME = "Bird";
exile_components_Bird.ID = 20;
exile_components_BirdNest.NAME = "BirdNest";
exile_components_BirdNest.ID = 39;
exile_components_Chicken.NAME = "Chicken";
exile_components_Chicken.ID = 18;
exile_components_Door.NAME = "Door";
exile_components_Door.ID = 38;
exile_components_Grenade.NAME = "Grenade";
exile_components_Grenade.ID = 19;
exile_components_GunTurret.NAME = "GunTurret";
exile_components_GunTurret.ID = 37;
exile_components_Maggot.NAME = "Maggot";
exile_components_Maggot.ID = 15;
exile_components_Player.NAME = "Player";
exile_components_Player.ID = 36;
exile_components_Projectile.NAME = "Projectile";
exile_components_Projectile.ID = 43;
exile_components_Rabbit.NAME = "Rabbit";
exile_components_Rabbit.ID = 10;
exile_components_Teleporter.NAME = "Teleporter";
exile_components_Teleporter.ID = 35;
exile_components_WaterHolder.NAME = "WaterHolder";
exile_components_WaterHolder.ID = 48;
glaze_engine_components_Destroy.NAME = "Destroy";
glaze_engine_components_Destroy.ID = 41;
glaze_engine_core_EngineLifecycle.INITALIZE = "initalize";
glaze_engine_core_EngineLifecycle.RUNNING = "running";
glaze_engine_core_EngineLifecycle.DESTROY = "destroy";
glaze_engine_core_EngineLifecycle.CLEANUP = "cleanup";
glaze_engine_core_EngineLifecycle.LIFECYCLE_SET = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = glaze_engine_core_EngineLifecycle.onInitalize;
		if(__map_reserved["initalize"] != null) {
			_g.setReserved("initalize",value);
		} else {
			_g.h["initalize"] = value;
		}
	}
	{
		var value1 = glaze_engine_core_EngineLifecycle.onRunning;
		if(__map_reserved["running"] != null) {
			_g.setReserved("running",value1);
		} else {
			_g.h["running"] = value1;
		}
	}
	{
		var value2 = glaze_engine_core_EngineLifecycle.onDestroy;
		if(__map_reserved["destroy"] != null) {
			_g.setReserved("destroy",value2);
		} else {
			_g.h["destroy"] = value2;
		}
	}
	{
		var value3 = glaze_engine_core_EngineLifecycle.onCleanup;
		if(__map_reserved["cleanup"] != null) {
			_g.setReserved("cleanup",value3);
		} else {
			_g.h["cleanup"] = value3;
		}
	}
	$r = _g;
	return $r;
}(this));
glaze_engine_components_ParticleEmitters.NAME = "ParticleEmitters";
glaze_engine_components_ParticleEmitters.ID = 25;
exile_entities_creatures_ChickenFactory.CHICKEN_LIFECYCLE = glaze_engine_core_EngineLifecycle.CreateLifeCylce(null,null,exile_entities_creatures_ChickenFactory.onDestroy,null);
exile_entities_items_DoorFactory.id = "door";
exile_entities_items_DoorFactory.states = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["open"] != null) {
		_g.setReserved("open",function(entity1) {
			var component3 = entity1.map["Door"];
			var door1 = component3;
			var component11 = entity1.map["TileDisplay"];
			var tileDisplay1 = component11;
			tileDisplay1.set_tileFrameId(door1.type + "Open");
			var component21 = entity1.map["PhysicsCollision"];
			var pc1 = component21;
			pc1.proxy.responseBias.x = 0;
			pc1.proxy.isActive = false;
		});
	} else {
		_g.h["open"] = function(entity1) {
			var component3 = entity1.map["Door"];
			var door1 = component3;
			var component11 = entity1.map["TileDisplay"];
			var tileDisplay1 = component11;
			tileDisplay1.set_tileFrameId(door1.type + "Open");
			var component21 = entity1.map["PhysicsCollision"];
			var pc1 = component21;
			pc1.proxy.responseBias.x = 0;
			pc1.proxy.isActive = false;
		};
	}
	if(__map_reserved["close"] != null) {
		_g.setReserved("close",function(entity21) {
			var component41 = entity21.map["Door"];
			var door21 = component41;
			var component51 = entity21.map["TileDisplay"];
			var tileDisplay21 = component51;
			tileDisplay21.set_tileFrameId(door21.type + "Closed");
			var component61 = entity21.map["PhysicsCollision"];
			var pc21 = component61;
			pc21.proxy.responseBias.x = 1;
			pc21.proxy.isActive = true;
		});
	} else {
		_g.h["close"] = function(entity21) {
			var component41 = entity21.map["Door"];
			var door21 = component41;
			var component51 = entity21.map["TileDisplay"];
			var tileDisplay21 = component51;
			tileDisplay21.set_tileFrameId(door21.type + "Closed");
			var component61 = entity21.map["PhysicsCollision"];
			var pc21 = component61;
			pc21.proxy.responseBias.x = 1;
			pc21.proxy.isActive = true;
		};
	}
	$r = _g;
	return $r;
}(this));
glaze_geom_Vector2.ZERO_TOLERANCE = 1e-08;
exile_entities_projectile_StandardBulletFactory.BULLET_LIFECYCLE = glaze_engine_core_EngineLifecycle.CreateLifeCylce(null,null,exile_entities_projectile_StandardBulletFactory.onDestroy,null);
exile_entities_weapon_HandGrenadeFactory.count = 0;
exile_util_CharacterController2.BASE_FORCE = 600;
exile_util_CharacterController2.WALK_FORCE = 1200.;
exile_util_CharacterController2.AIR_CONTROL_FORCE = 600;
exile_util_CharacterController2.JUMP_FORCE = 18000.;
exile_util_CharacterController2.MAX_AIR_HORIZONTAL_VELOCITY = 300.;
exile_util_CharacterController2.MAX_BURN = 3000.;
exile_util_CharacterController2.BOOST_FACTOR = 1.4;
glaze_EngineConstants.TIMESTEP = 16.6666666666666679;
glaze_EngineConstants.TILE_SIZE = 16;
glaze_ai_behaviortree_BehaviorTree.defaultBehaviours = [glaze_ai_behaviortree_branch_Monitor,glaze_ai_behaviortree_branch_Parallel,glaze_ai_behaviortree_branch_Selector,glaze_ai_behaviortree_branch_Sequence,glaze_ai_behaviortree_decorator_Invert,glaze_ai_behaviortree_decorator_Repeat,glaze_ai_behaviortree_decorator_RepeatUntilSuccess,glaze_ai_behaviortree_decorator_RepeatUntilFail,glaze_ai_behaviortree_leaf_CopyContextData,glaze_ai_behaviortree_leaf_Failure,glaze_ai_behaviortree_leaf_FunctionExecutorAction,glaze_ai_behaviortree_leaf_Logger,glaze_ai_behaviortree_leaf_SetContextData,glaze_ai_behaviortree_leaf_Success];
glaze_ai_behaviortree_BehaviorTree.extendedBehaviours = [glaze_engine_actions_Delay,glaze_engine_actions_CanSee,glaze_engine_actions_FindTarget,glaze_engine_actions_WanderToTarget,glaze_engine_actions_SeekTarget,glaze_engine_actions_InRangeTarget];
glaze_ai_behaviortree_BehaviorTree.behaviours = new haxe_ds_StringMap();
glaze_ai_behaviortree_BehaviorTree.scripts = new haxe_ds_StringMap();
glaze_ai_faction_components_Personality.NAME = "Personality";
glaze_ai_faction_components_Personality.ID = 9;
glaze_ai_steering_SteeringAgentParameters.default_scale = .2;
glaze_ai_steering_SteeringAgentParameters.heavy_scale = 5;
glaze_ai_steering_SteeringAgentParameters.default_maxAcceleration = 100;
glaze_ai_steering_SteeringAgentParameters.default_maxSteeringForcePerStep = 100;
glaze_ai_steering_SteeringAgentParameters.DEFAULT_STEERING_PARAMS = new glaze_ai_steering_SteeringAgentParameters(20.,20.);
glaze_ai_steering_SteeringAgentParameters.HEAVY_STEERING_PARAMS = new glaze_ai_steering_SteeringAgentParameters(500.,500.);
glaze_ai_steering_SteeringBehavior.CALCULATE_SUM = 0;
glaze_ai_steering_SteeringBehavior.CALCULATE_SPEED = 1;
glaze_ai_steering_SteeringBehavior.CALCULATE_ACCURACY = 2;
glaze_ai_steering_SteeringSettings.speedTweaker = .3;
glaze_ai_steering_SteeringSettings.arriveFast = 1;
glaze_ai_steering_SteeringSettings.arriveNormal = 3;
glaze_ai_steering_SteeringSettings.arriveSlow = 5;
glaze_ai_steering_SteeringSettings.wanderJitter = 300;
glaze_ai_steering_SteeringSettings.wanderDistance = 25;
glaze_ai_steering_SteeringSettings.wanderRadius = 15;
glaze_ai_steering_SteeringSettings.separationProbability = 0.2;
glaze_ai_steering_SteeringSettings.cohesionProbability = 0.6;
glaze_ai_steering_SteeringSettings.alignmentProbability = 0.3;
glaze_ai_steering_SteeringSettings.dodgeProbability = 0.6;
glaze_ai_steering_SteeringSettings.seekProbability = 0.8;
glaze_ai_steering_SteeringSettings.fleeProbability = 0.6;
glaze_ai_steering_SteeringSettings.pursuitProbability = 0.8;
glaze_ai_steering_SteeringSettings.evadeProbability = 1;
glaze_ai_steering_SteeringSettings.offsetPursuitProbability = 0.8;
glaze_ai_steering_SteeringSettings.arriveProbability = 0.5;
glaze_ai_steering_SteeringSettings.obstacleAvoidanceProbability = 0.5;
glaze_ai_steering_SteeringSettings.wallAvoidanceProbability = 0.5;
glaze_ai_steering_SteeringSettings.hideProbability = 0.8;
glaze_ai_steering_SteeringSettings.followPathProbability = 0.7;
glaze_ai_steering_SteeringSettings.interposeProbability = 0.8;
glaze_ai_steering_SteeringSettings.wanderProbability = 0.8;
glaze_ai_steering_SteeringSettings.separationWeight = 1;
glaze_ai_steering_SteeringSettings.alignmentWeight = 3;
glaze_ai_steering_SteeringSettings.cohesionWeight = 2;
glaze_ai_steering_SteeringSettings.dodgeWeight = 1;
glaze_ai_steering_SteeringSettings.seekWeight = 1;
glaze_ai_steering_SteeringSettings.fleeWeight = 1;
glaze_ai_steering_SteeringSettings.pursuitWeight = 1;
glaze_ai_steering_SteeringSettings.evadeWeight = 0.1;
glaze_ai_steering_SteeringSettings.offsetPursuitWeight = 1;
glaze_ai_steering_SteeringSettings.arriveWeight = 1;
glaze_ai_steering_SteeringSettings.obstacleAvoidanceWeight = 10;
glaze_ai_steering_SteeringSettings.wallAvoidanceWeight = 10;
glaze_ai_steering_SteeringSettings.hideWeight = 1;
glaze_ai_steering_SteeringSettings.followPathWeight = 0.5;
glaze_ai_steering_SteeringSettings.interposeWeight = 1;
glaze_ai_steering_SteeringSettings.wanderWeight = 1;
glaze_ai_steering_SteeringSettings.wallAvoidancePriority = 10;
glaze_ai_steering_SteeringSettings.obstacleAvoidancePriority = 20;
glaze_ai_steering_SteeringSettings.evadePriority = 30;
glaze_ai_steering_SteeringSettings.hidePriority = 35;
glaze_ai_steering_SteeringSettings.seperationPriority = 40;
glaze_ai_steering_SteeringSettings.alignmentPriority = 50;
glaze_ai_steering_SteeringSettings.cohesionPriority = 60;
glaze_ai_steering_SteeringSettings.dodgePriority = 65;
glaze_ai_steering_SteeringSettings.seekPriority = 70;
glaze_ai_steering_SteeringSettings.fleePriority = 80;
glaze_ai_steering_SteeringSettings.arrivePriority = 90;
glaze_ai_steering_SteeringSettings.pursuitPriority = 100;
glaze_ai_steering_SteeringSettings.offsetPursuitPriority = 110;
glaze_ai_steering_SteeringSettings.interposePriority = 120;
glaze_ai_steering_SteeringSettings.followPathPriority = 130;
glaze_ai_steering_SteeringSettings.wanderPriority = 140;
glaze_ai_steering_components_Steering.CALCULATE_SUM = 0;
glaze_ai_steering_components_Steering.CALCULATE_SPEED = 1;
glaze_ai_steering_components_Steering.CALCULATE_ACCURACY = 2;
glaze_ai_steering_components_Steering.NAME = "Steering";
glaze_ai_steering_components_Steering.ID = 32;
glaze_animation_components_SpriteAnimation.NAME = "SpriteAnimation";
glaze_animation_components_SpriteAnimation.ID = 14;
glaze_core_GameLoop.MIN_DELTA = 16.6666666766666687;
glaze_ds_EntityCollection.itempool = (function($this) {
	var $r;
	var pool = new glaze_ds_DLL();
	$r = pool;
	return $r;
}(this));
glaze_eco_core_Entity.DESTROY = "destroy";
glaze_eco_core_Phase.DEFAULT_TIME_DELTA = 16.6666666666666679;
glaze_engine_components_Active.NAME = "Active";
glaze_engine_components_Active.ID = 31;
glaze_engine_components_Age.NAME = "Age";
glaze_engine_components_Age.ID = 30;
glaze_engine_components_CollidableSwitch.NAME = "CollidableSwitch";
glaze_engine_components_CollidableSwitch.ID = 8;
glaze_engine_components_CollisionCounter.NAME = "CollisionCounter";
glaze_engine_components_CollisionCounter.ID = 42;
glaze_engine_components_Display.NAME = "Display";
glaze_engine_components_Display.ID = 29;
glaze_engine_components_ECState.NAME = "ECState";
glaze_engine_components_ECState.ID = 45;
glaze_engine_components_EnvironmentForce.NAME = "EnvironmentForce";
glaze_engine_components_EnvironmentForce.ID = 6;
glaze_engine_components_Extents.NAME = "Extents";
glaze_engine_components_Extents.ID = 28;
glaze_engine_components_Fixed.NAME = "Fixed";
glaze_engine_components_Fixed.ID = 21;
glaze_engine_components_Health.NAME = "Health";
glaze_engine_components_Health.ID = 27;
glaze_engine_components_Held.NAME = "Held";
glaze_engine_components_Held.ID = 44;
glaze_engine_components_Holdable.NAME = "Holdable";
glaze_engine_components_Holdable.ID = 7;
glaze_engine_components_Holder.NAME = "Holder";
glaze_engine_components_Holder.ID = 13;
glaze_engine_components_Inventory.NAME = "Inventory";
glaze_engine_components_Inventory.ID = 12;
glaze_engine_components_LifeCycle.NAME = "LifeCycle";
glaze_engine_components_LifeCycle.ID = 2;
glaze_engine_components_Moveable.NAME = "Moveable";
glaze_engine_components_Moveable.ID = 26;
glaze_engine_components_Position.NAME = "Position";
glaze_engine_components_Position.ID = 40;
glaze_engine_components_Script.NAME = "Script";
glaze_engine_components_Script.ID = 3;
glaze_engine_components_State.NAME = "State";
glaze_engine_components_State.ID = 16;
glaze_engine_components_Storeable.NAME = "Storeable";
glaze_engine_components_Storeable.ID = 1;
glaze_engine_components_TMX.NAME = "TMX";
glaze_engine_components_TMX.ID = 46;
glaze_engine_components_TileDisplay.NAME = "TileDisplay";
glaze_engine_components_TileDisplay.ID = 17;
glaze_engine_components_Viewable.NAME = "Viewable";
glaze_engine_components_Viewable.ID = 22;
glaze_engine_components_Water.NAME = "Water";
glaze_engine_components_Water.ID = 4;
glaze_engine_components_Wind.NAME = "Wind";
glaze_engine_components_Wind.ID = 5;
glaze_engine_factories_tmx_ForceFactory.FORCE_SCALE = 0.01;
glaze_lighting_components_Light.NAME = "Light";
glaze_lighting_components_Light.ID = 11;
glaze_particle_BlockSpriteParticle.INV_ALPHA = 0.00392156862745098;
glaze_particle_PointSpriteParticle.INV_ALPHA = 0.00392156862745098;
glaze_physics_Body.SLEEP_BIAS = 0.99332805041467;
glaze_physics_Body.SLEEP_EPSILON = 0.0009;
glaze_physics_Body.WAKE_MOTION = 10;
glaze_physics_Body.MASS_SCALE = 0.1;
glaze_physics_Material.NORMAL = new glaze_physics_Material(1,0.3,0.1);
glaze_physics_Material.LIGHTMETAL = new glaze_physics_Material(1.4,0.3,0.1);
glaze_physics_Material.ROCK = new glaze_physics_Material(2.0,0.2,0.1);
glaze_physics_collision_BFProxy.nextID = 0;
glaze_physics_collision_Intersect.epsilon = 1e-8;
glaze_physics_collision_Map.SOLID = 1;
glaze_physics_collision_Map.ONE_WAY = 2;
glaze_physics_collision_Map.STEP = 4;
glaze_physics_collision_Map.AABBCOLLIDABLE = 7;
glaze_physics_collision_Map.ONE_WAY_TOLLERANCE = -4.0;
glaze_physics_collision_Map.CORRECTION = .0;
glaze_physics_collision_Map.ROUNDDOWN = .01;
glaze_physics_collision_Map.ROUNDUP = .5;
glaze_physics_components_ContactRouter.NAME = "ContactRouter";
glaze_physics_components_ContactRouter.ID = 0;
glaze_physics_components_PhysicsBody.NAME = "PhysicsBody";
glaze_physics_components_PhysicsBody.ID = 24;
glaze_physics_components_PhysicsCollision.NAME = "PhysicsCollision";
glaze_physics_components_PhysicsCollision.ID = 23;
glaze_physics_components_PhysicsConstraints.NAME = "PhysicsConstraints";
glaze_physics_components_PhysicsConstraints.ID = 47;
glaze_render_renderers_webgl_PointSpriteLightMapRenderer.SPRITE_VERTEX_SHADER = ["precision mediump float;","uniform vec2 projectionVector;","uniform vec2 cameraPosition;","attribute vec2 position;","attribute float size;","attribute vec4 colour;","varying vec4 vColor;","void main() {","gl_PointSize = size;","vColor = colour;","gl_Position = vec4( (cameraPosition.x + position.x) / projectionVector.x -1.0, (cameraPosition.y + position.y) / -projectionVector.y + 1.0 , 0.0, 1.0);","}"];
glaze_render_renderers_webgl_PointSpriteLightMapRenderer.SPRITE_FRAGMENT_SHADER = ["precision mediump float;","varying vec4 vColor;","void main() {","gl_FragColor = vColor;","}"];
glaze_render_renderers_webgl_PointSpriteRenderer.SPRITE_VERTEX_SHADER = ["precision mediump float;","uniform vec2 projectionVector;","attribute vec2 position;","attribute float size;","attribute vec2 tilePosition;","attribute vec2 tileDimension;","attribute vec2 colour;","varying vec2 vTilePos;","varying vec2 tileDim;","void main() {","vTilePos = tilePosition;","tileDim = tileDimension;","gl_PointSize = size;","gl_Position = vec4( position.x / projectionVector.x -1.0, position.y / -projectionVector.y + 1.0 , 0.0, 1.0);","}"];
glaze_render_renderers_webgl_PointSpriteRenderer.SPRITE_FRAGMENT_SHADER = ["precision mediump float;","uniform sampler2D texture;","varying vec2 vTilePos;","varying vec2 tileDim;","void main() {","vec2 uv = vec2( gl_PointCoord.x*tileDim.x + vTilePos.x, gl_PointCoord.y*tileDim.y + vTilePos.y );","gl_FragColor = texture2D( texture, uv );","}"];
glaze_render_renderers_webgl_SpriteRenderer.SPRITE_VERTEX_SHADER = ["precision mediump float;","attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute float aColor;","uniform vec2 projectionVector;","varying vec2 vTextureCoord;","varying float vColor;","void main(void) {","gl_Position = vec4( aVertexPosition.x / projectionVector.x -1.0, aVertexPosition.y / -projectionVector.y + 1.0 , 0.0, 1.0);","vTextureCoord = aTextureCoord;","vColor = aColor;","}"];
glaze_render_renderers_webgl_SpriteRenderer.SPRITE_FRAGMENT_SHADER = ["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform sampler2D uSampler;","void main(void) {","gl_FragColor = texture2D(uSampler,vTextureCoord) * vColor;","}"];
glaze_render_renderers_webgl_TileMap.TILEMAP_VERTEX_SHADER = ["precision mediump float;","attribute vec2 position;","attribute vec2 texture;","varying vec2 pixelCoord;","varying vec2 texCoord;","uniform vec2 viewOffset;","uniform vec2 viewportSize;","uniform vec2 inverseTileTextureSize;","uniform float inverseTileSize;","void main(void) {","   pixelCoord = (texture * viewportSize) + viewOffset;","   texCoord = pixelCoord * inverseTileTextureSize * inverseTileSize;","   gl_Position = vec4(position, 0.0, 1.0);","}"];
glaze_render_renderers_webgl_TileMap.TILEMAP_FRAGMENT_SHADER = ["precision mediump float;","varying vec2 pixelCoord;","varying vec2 texCoord;","uniform sampler2D tiles;","uniform sampler2D sprites;","uniform vec2 inverseTileTextureSize;","uniform vec2 inverseSpriteTextureSize;","uniform float tileSize;","void main(void) {","   vec4 tile = texture2D(tiles, texCoord);","   if(tile.x == 1.0 && tile.y == 1.0) { ","    discard;","   } else {","   vec2 superSpriteOffset = floor(tile.zw * 256.0) * 256.0;","   vec2 spriteOffset = floor(tile.xy * 256.0) * tileSize;","   vec2 spriteCoord = mod(pixelCoord, tileSize);","   gl_FragColor = texture2D(sprites, (superSpriteOffset + spriteOffset + spriteCoord) * inverseSpriteTextureSize);","   }","}"];
glaze_tmx_TmxLayer.BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
glaze_util_BroadphaseAreaQuery.RAYCAST_THRESHOLD = 10;
glaze_util_Maths.ZERO_TOLERANCE = 1e-08;
glaze_util_Maths.RAD_DEG = 57.2957795130823229;
glaze_util_Maths.DEG_RAD = 0.0174532925199432955;
glaze_util_Maths.LN2 = 0.6931471805599453;
glaze_util_Maths.LN10 = 2.302585092994046;
glaze_util_Maths.PIHALF = 1.5707963267948966;
glaze_util_Maths.PI = 3.141592653589793;
glaze_util_Maths.PI2 = 6.283185307179586;
glaze_util_Maths.EPS = 1e-6;
glaze_util_Maths.SQRT2 = 1.414213562373095;
glaze_util_Random.PseudoRandomSeed = 3489752;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core__$Future_Future_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core__$Future_Future_$Impl_$.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_FutureTrigger.depth = 0;
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core__$Promise_Promise_$Impl_$.NEVER = (function($this) {
	var $r;
	var ret = tink_core__$Future_Future_$Impl_$.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_state__$Observable_Observable_$Impl_$.stack = new List();
tink_state__$Observable_Observable_$Impl_$.scheduled = [];
tink_state__$Observable_Observable_$Impl_$.hasRAF = typeof window != 'undefined' && 'requestAnimationFrame' in window;
tink_state__$Observable_Observable_$Impl_$.counter = 0;
tink_state_ConstObservable.NEVER = (function($this) {
	var $r;
	var this1 = new tink_core__$Future_SimpleFuture(function(_) {
		return null;
	});
	$r = this1;
	return $r;
}(this));
GameTestA.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
